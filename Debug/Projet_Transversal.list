
Projet_Transversal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08007b7c  08007b7c  00008b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c3c  08007c3c  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c3c  08007c3c  00008c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c44  08007c44  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c44  08007c44  00008c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c48  08007c48  00008c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007c4c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000905c  2**0
                  CONTENTS
 10 .bss          0000042c  2000005c  2000005c  0000905c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000488  20000488  0000905c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000123fd  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025fe  00000000  00000000  0001b489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  0001da88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c48  00000000  00000000  0001ea30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f06f  00000000  00000000  0001f678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b6e  00000000  00000000  0003e6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c009c  00000000  00000000  00052255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001122f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004754  00000000  00000000  00112334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00116a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b64 	.word	0x08007b64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08007b64 	.word	0x08007b64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
  * @retval int
  */

HAL_StatusTypeDef x;
int main(void)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b09b      	sub	sp, #108	@ 0x6c
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fed9 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f893 	bl	80003b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 fb11 	bl	80008b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 faa7 	bl	80007e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000296:	f000 fad9 	bl	800084c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800029a:	f000 f97b 	bl	8000594 <MX_TIM2_Init>
  MX_TIM15_Init();
 800029e:	f000 fa49 	bl	8000734 <MX_TIM15_Init>
  MX_ADC1_Init();
 80002a2:	f000 f8e3 	bl	800046c <MX_ADC1_Init>
  MX_TIM3_Init();
 80002a6:	f000 f9ed 	bl	8000684 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, uart2_char, 1);
 80002aa:	2201      	movs	r2, #1
 80002ac:	4935      	ldr	r1, [pc, #212]	@ (8000384 <main+0x104>)
 80002ae:	4836      	ldr	r0, [pc, #216]	@ (8000388 <main+0x108>)
 80002b0:	f005 fdd7 	bl	8005e62 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT(&huart3, uart3_char, 1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002b4:	2100      	movs	r1, #0
 80002b6:	4835      	ldr	r0, [pc, #212]	@ (800038c <main+0x10c>)
 80002b8:	f004 fb5a 	bl	8004970 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002bc:	2100      	movs	r1, #0
 80002be:	4834      	ldr	r0, [pc, #208]	@ (8000390 <main+0x110>)
 80002c0:	f004 fb56 	bl	8004970 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);
 80002c4:	4833      	ldr	r0, [pc, #204]	@ (8000394 <main+0x114>)
 80002c6:	f001 f937 	bl	8001538 <HAL_ADC_Start_IT>


  state = FORWARD;
 80002ca:	4b33      	ldr	r3, [pc, #204]	@ (8000398 <main+0x118>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
//	  uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
//	  HAL_UART_Transmit(&huart2, (uint8_t *) &adc_val, 1, 100);
//	  HAL_UART_Transmit(&huart2, (uint8_t *) "\r\n", 2, 100);

	  char cmd[100];
	  if(state == FORWARD) {
 80002d0:	4b31      	ldr	r3, [pc, #196]	@ (8000398 <main+0x118>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d107      	bne.n	80002e8 <main+0x68>
		  strcpy(cmd, "mogo 1:4 2:4\r");
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4a30      	ldr	r2, [pc, #192]	@ (800039c <main+0x11c>)
 80002dc:	461c      	mov	r4, r3
 80002de:	4613      	mov	r3, r2
 80002e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002e2:	c407      	stmia	r4!, {r0, r1, r2}
 80002e4:	8023      	strh	r3, [r4, #0]
 80002e6:	e02b      	b.n	8000340 <main+0xc0>
//		  cmd = "mogo 1:4 2:4\r";
		  //send_serializer_cmd(&SERIALIZER_UART_HANDLE, (uint8_t *) cmd, strlen(cmd), HAL_MAX_DELAY);
//		  HAL_UART_Transmit(&huart3, (uint8_t *) "mogo 1:4 2:4\r", 13, 100);
//		  HAL_UART_Transmit(&huart2, (uint8_t *) "forward\r\n", 9, 100);
//		  HAL_Delay(100);
	  } else if(state == TURN_RIGHT) {
 80002e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000398 <main+0x118>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d10d      	bne.n	800030c <main+0x8c>
		  strcpy(cmd, "mogo 1:4 2:-4\r");
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	4a2b      	ldr	r2, [pc, #172]	@ (80003a0 <main+0x120>)
 80002f4:	461c      	mov	r4, r3
 80002f6:	4613      	mov	r3, r2
 80002f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002fa:	c407      	stmia	r4!, {r0, r1, r2}
 80002fc:	8023      	strh	r3, [r4, #0]
 80002fe:	3402      	adds	r4, #2
 8000300:	0c1b      	lsrs	r3, r3, #16
 8000302:	7023      	strb	r3, [r4, #0]
//		  cmd = "mogo 1:4 2:-4\r";
		  //send_serializer_cmd(&SERIALIZER_UART_HANDLE, (uint8_t *) cmd, strlen(cmd), 100);
//		  HAL_UART_Transmit(&huart3, (uint8_t *) "mogo 1:4 2:-4\r", 14, 100);
//		  HAL_UART_Transmit(&huart2, (uint8_t *) "right\r\n", 7, 100);
//		  HAL_Delay(2000);
		  state = FORWARD;
 8000304:	4b24      	ldr	r3, [pc, #144]	@ (8000398 <main+0x118>)
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
 800030a:	e019      	b.n	8000340 <main+0xc0>
	  } else if(state == BACKWARD) {
 800030c:	4b22      	ldr	r3, [pc, #136]	@ (8000398 <main+0x118>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b03      	cmp	r3, #3
 8000312:	d10a      	bne.n	800032a <main+0xaa>
		  strcpy(cmd, "mogo 1:-4 2:-4\r");
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	4a23      	ldr	r2, [pc, #140]	@ (80003a4 <main+0x124>)
 8000318:	461c      	mov	r4, r3
 800031a:	4613      	mov	r3, r2
 800031c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800031e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  //cmd = "mogo 1:-4 2:-4\r";
		  //send_serializer_cmd(&SERIALIZER_UART_HANDLE, (uint8_t *) cmd, strlen(cmd), 100);
//		  HAL_UART_Transmit(&huart3, (uint8_t *) "mogo 1:-4 2:-4\r", 15, 100);
//		  HAL_UART_Transmit(&huart2, (uint8_t *) "back\r\n", 6, 100);
//		  HAL_Delay(2000);
		  state = TURN_RIGHT;
 8000322:	4b1d      	ldr	r3, [pc, #116]	@ (8000398 <main+0x118>)
 8000324:	2201      	movs	r2, #1
 8000326:	701a      	strb	r2, [r3, #0]
 8000328:	e00a      	b.n	8000340 <main+0xc0>
	  } else if(state == STOP) {
 800032a:	4b1b      	ldr	r3, [pc, #108]	@ (8000398 <main+0x118>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b04      	cmp	r3, #4
 8000330:	d106      	bne.n	8000340 <main+0xc0>
		  strcpy(cmd, "stop\r");
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4a1c      	ldr	r2, [pc, #112]	@ (80003a8 <main+0x128>)
 8000336:	e892 0003 	ldmia.w	r2, {r0, r1}
 800033a:	6018      	str	r0, [r3, #0]
 800033c:	3304      	adds	r3, #4
 800033e:	8019      	strh	r1, [r3, #0]
//		  HAL_UART_Transmit(&huart2, (uint8_t *) "stop\r\n", 6, 100);
//		  HAL_Delay(1000);
		  //state = STOP;
	  }

	  HAL_UART_Transmit(&SERIALIZER_UART_HANDLE, cmd, strlen(cmd), 100);
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff44 	bl	80001d0 <strlen>
 8000348:	4603      	mov	r3, r0
 800034a:	b29a      	uxth	r2, r3
 800034c:	1d39      	adds	r1, r7, #4
 800034e:	2364      	movs	r3, #100	@ 0x64
 8000350:	4816      	ldr	r0, [pc, #88]	@ (80003ac <main+0x12c>)
 8000352:	f005 fcfd 	bl	8005d50 <HAL_UART_Transmit>
	  sprintf(cmd, "%s\n", cmd);
 8000356:	1d3a      	adds	r2, r7, #4
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	4915      	ldr	r1, [pc, #84]	@ (80003b0 <main+0x130>)
 800035c:	4618      	mov	r0, r3
 800035e:	f006 ff61 	bl	8007224 <siprintf>
	  HAL_UART_Transmit(&WIRELESS_UART_HANDLE, cmd, strlen(cmd), 100);
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ff33 	bl	80001d0 <strlen>
 800036a:	4603      	mov	r3, r0
 800036c:	b29a      	uxth	r2, r3
 800036e:	1d39      	adds	r1, r7, #4
 8000370:	2364      	movs	r3, #100	@ 0x64
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <main+0x108>)
 8000374:	f005 fcec 	bl	8005d50 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000378:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800037c:	f000 fec4 	bl	8001108 <HAL_Delay>
  {
 8000380:	e7a6      	b.n	80002d0 <main+0x50>
 8000382:	bf00      	nop
 8000384:	20000324 	.word	0x20000324
 8000388:	200001ac 	.word	0x200001ac
 800038c:	200000c8 	.word	0x200000c8
 8000390:	20000114 	.word	0x20000114
 8000394:	20000078 	.word	0x20000078
 8000398:	20000334 	.word	0x20000334
 800039c:	08007b84 	.word	0x08007b84
 80003a0:	08007b94 	.word	0x08007b94
 80003a4:	08007ba4 	.word	0x08007ba4
 80003a8:	08007bb4 	.word	0x08007bb4
 80003ac:	20000234 	.word	0x20000234
 80003b0:	08007bbc 	.word	0x08007bbc

080003b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b09e      	sub	sp, #120	@ 0x78
 80003b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80003be:	2228      	movs	r2, #40	@ 0x28
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f006 ff4e 	bl	8007264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d8:	463b      	mov	r3, r7
 80003da:	223c      	movs	r2, #60	@ 0x3c
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f006 ff40 	bl	8007264 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e4:	2302      	movs	r3, #2
 80003e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e8:	2301      	movs	r3, #1
 80003ea:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ec:	2310      	movs	r3, #16
 80003ee:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f0:	2302      	movs	r3, #2
 80003f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003f4:	2300      	movs	r3, #0
 80003f6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003f8:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 80003fc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000402:	4618      	mov	r0, r3
 8000404:	f002 fdf8 	bl	8002ff8 <HAL_RCC_OscConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800040e:	f000 fba7 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	230f      	movs	r3, #15
 8000414:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000416:	2302      	movs	r3, #2
 8000418:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800041e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000422:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000428:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800042c:	2101      	movs	r1, #1
 800042e:	4618      	mov	r0, r3
 8000430:	f003 fe20 	bl	8004074 <HAL_RCC_ClockConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800043a:	f000 fb91 	bl	8000b60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 800043e:	2386      	movs	r3, #134	@ 0x86
 8000440:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000446:	2300      	movs	r3, #0
 8000448:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800044a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800044e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000450:	463b      	mov	r3, r7
 8000452:	4618      	mov	r0, r3
 8000454:	f004 f82e 	bl	80044b4 <HAL_RCCEx_PeriphCLKConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800045e:	f000 fb7f 	bl	8000b60 <Error_Handler>
  }
}
 8000462:	bf00      	nop
 8000464:	3778      	adds	r7, #120	@ 0x78
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b090      	sub	sp, #64	@ 0x40
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000472:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800047e:	f107 031c 	add.w	r3, r7, #28
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]
 800048e:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
 800049c:	611a      	str	r2, [r3, #16]
 800049e:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004a0:	4b3b      	ldr	r3, [pc, #236]	@ (8000590 <MX_ADC1_Init+0x124>)
 80004a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80004a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004a8:	4b39      	ldr	r3, [pc, #228]	@ (8000590 <MX_ADC1_Init+0x124>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ae:	4b38      	ldr	r3, [pc, #224]	@ (8000590 <MX_ADC1_Init+0x124>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004b4:	4b36      	ldr	r3, [pc, #216]	@ (8000590 <MX_ADC1_Init+0x124>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ba:	4b35      	ldr	r3, [pc, #212]	@ (8000590 <MX_ADC1_Init+0x124>)
 80004bc:	2200      	movs	r2, #0
 80004be:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004c0:	4b33      	ldr	r3, [pc, #204]	@ (8000590 <MX_ADC1_Init+0x124>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004c8:	4b31      	ldr	r3, [pc, #196]	@ (8000590 <MX_ADC1_Init+0x124>)
 80004ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80004d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000590 <MX_ADC1_Init+0x124>)
 80004d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000590 <MX_ADC1_Init+0x124>)
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80004de:	4b2c      	ldr	r3, [pc, #176]	@ (8000590 <MX_ADC1_Init+0x124>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000590 <MX_ADC1_Init+0x124>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ec:	4b28      	ldr	r3, [pc, #160]	@ (8000590 <MX_ADC1_Init+0x124>)
 80004ee:	2204      	movs	r2, #4
 80004f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004f2:	4b27      	ldr	r3, [pc, #156]	@ (8000590 <MX_ADC1_Init+0x124>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004f8:	4b25      	ldr	r3, [pc, #148]	@ (8000590 <MX_ADC1_Init+0x124>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004fe:	4824      	ldr	r0, [pc, #144]	@ (8000590 <MX_ADC1_Init+0x124>)
 8000500:	f000 fe3a 	bl	8001178 <HAL_ADC_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 800050a:	f000 fb29 	bl	8000b60 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800050e:	2300      	movs	r3, #0
 8000510:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000512:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000516:	4619      	mov	r1, r3
 8000518:	481d      	ldr	r0, [pc, #116]	@ (8000590 <MX_ADC1_Init+0x124>)
 800051a:	f002 f891 	bl	8002640 <HAL_ADCEx_MultiModeConfigChannel>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000524:	f000 fb1c 	bl	8000b60 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000528:	2301      	movs	r3, #1
 800052a:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800052c:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 8000530:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.HighThreshold = 3048;
 8000532:	f640 33e8 	movw	r3, #3048	@ 0xbe8
 8000536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.LowThreshold = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	633b      	str	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.Channel = ADC_CHANNEL_8;
 800053c:	2308      	movs	r3, #8
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.ITMode = ENABLE;
 8000540:	2301      	movs	r3, #1
 8000542:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	4619      	mov	r1, r3
 800054c:	4810      	ldr	r0, [pc, #64]	@ (8000590 <MX_ADC1_Init+0x124>)
 800054e:	f001 ff2b 	bl	80023a8 <HAL_ADC_AnalogWDGConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000558:	f000 fb02 	bl	8000b60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800055c:	2308      	movs	r3, #8
 800055e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000560:	2301      	movs	r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	4619      	mov	r1, r3
 8000578:	4805      	ldr	r0, [pc, #20]	@ (8000590 <MX_ADC1_Init+0x124>)
 800057a:	f001 fc2b 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000584:	f000 faec 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	3740      	adds	r7, #64	@ 0x40
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000078 	.word	0x20000078

08000594 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08e      	sub	sp, #56	@ 0x38
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800059a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b4:	463b      	mov	r3, r7
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]
 80005c2:	615a      	str	r2, [r3, #20]
 80005c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000680 <MX_TIM2_Init+0xec>)
 80005c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 960-1;
 80005ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000680 <MX_TIM2_Init+0xec>)
 80005d0:	f240 32bf 	movw	r2, #959	@ 0x3bf
 80005d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000680 <MX_TIM2_Init+0xec>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80005dc:	4b28      	ldr	r3, [pc, #160]	@ (8000680 <MX_TIM2_Init+0xec>)
 80005de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e4:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <MX_TIM2_Init+0xec>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ea:	4b25      	ldr	r3, [pc, #148]	@ (8000680 <MX_TIM2_Init+0xec>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005f0:	4823      	ldr	r0, [pc, #140]	@ (8000680 <MX_TIM2_Init+0xec>)
 80005f2:	f004 f90f 	bl	8004814 <HAL_TIM_Base_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80005fc:	f000 fab0 	bl	8000b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000604:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000606:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800060a:	4619      	mov	r1, r3
 800060c:	481c      	ldr	r0, [pc, #112]	@ (8000680 <MX_TIM2_Init+0xec>)
 800060e:	f004 fcb7 	bl	8004f80 <HAL_TIM_ConfigClockSource>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000618:	f000 faa2 	bl	8000b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800061c:	4818      	ldr	r0, [pc, #96]	@ (8000680 <MX_TIM2_Init+0xec>)
 800061e:	f004 f950 	bl	80048c2 <HAL_TIM_PWM_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000628:	f000 fa9a 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4811      	ldr	r0, [pc, #68]	@ (8000680 <MX_TIM2_Init+0xec>)
 800063c:	f005 faba 	bl	8005bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000646:	f000 fa8b 	bl	8000b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800064a:	2360      	movs	r3, #96	@ 0x60
 800064c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	4619      	mov	r1, r3
 8000660:	4807      	ldr	r0, [pc, #28]	@ (8000680 <MX_TIM2_Init+0xec>)
 8000662:	f004 fb79 	bl	8004d58 <HAL_TIM_PWM_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800066c:	f000 fa78 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000670:	4803      	ldr	r0, [pc, #12]	@ (8000680 <MX_TIM2_Init+0xec>)
 8000672:	f000 fb67 	bl	8000d44 <HAL_TIM_MspPostInit>

}
 8000676:	bf00      	nop
 8000678:	3738      	adds	r7, #56	@ 0x38
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000c8 	.word	0x200000c8

08000684 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	@ 0x28
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
 80006a4:	615a      	str	r2, [r3, #20]
 80006a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a8:	4b20      	ldr	r3, [pc, #128]	@ (800072c <MX_TIM3_Init+0xa8>)
 80006aa:	4a21      	ldr	r2, [pc, #132]	@ (8000730 <MX_TIM3_Init+0xac>)
 80006ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <MX_TIM3_Init+0xa8>)
 80006b0:	2264      	movs	r2, #100	@ 0x64
 80006b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <MX_TIM3_Init+0xa8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <MX_TIM3_Init+0xa8>)
 80006bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <MX_TIM3_Init+0xa8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c8:	4b18      	ldr	r3, [pc, #96]	@ (800072c <MX_TIM3_Init+0xa8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006ce:	4817      	ldr	r0, [pc, #92]	@ (800072c <MX_TIM3_Init+0xa8>)
 80006d0:	f004 f8f7 	bl	80048c2 <HAL_TIM_PWM_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80006da:	f000 fa41 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006de:	2320      	movs	r3, #32
 80006e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	480f      	ldr	r0, [pc, #60]	@ (800072c <MX_TIM3_Init+0xa8>)
 80006ee:	f005 fa61 	bl	8005bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80006f8:	f000 fa32 	bl	8000b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006fc:	2360      	movs	r3, #96	@ 0x60
 80006fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	@ (800072c <MX_TIM3_Init+0xa8>)
 8000714:	f004 fb20 	bl	8004d58 <HAL_TIM_PWM_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800071e:	f000 fa1f 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3728      	adds	r7, #40	@ 0x28
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000114 	.word	0x20000114
 8000730:	40000400 	.word	0x40000400

08000734 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000752:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <MX_TIM15_Init+0xa8>)
 8000754:	4a22      	ldr	r2, [pc, #136]	@ (80007e0 <MX_TIM15_Init+0xac>)
 8000756:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000758:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <MX_TIM15_Init+0xa8>)
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075e:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_TIM15_Init+0xa8>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000764:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <MX_TIM15_Init+0xa8>)
 8000766:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800076a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <MX_TIM15_Init+0xa8>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000772:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_TIM15_Init+0xa8>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000778:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <MX_TIM15_Init+0xa8>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800077e:	4817      	ldr	r0, [pc, #92]	@ (80007dc <MX_TIM15_Init+0xa8>)
 8000780:	f004 f9f6 	bl	8004b70 <HAL_TIM_IC_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800078a:	f000 f9e9 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	480f      	ldr	r0, [pc, #60]	@ (80007dc <MX_TIM15_Init+0xa8>)
 800079e:	f005 fa09 	bl	8005bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80007a8:	f000 f9da 	bl	8000b60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007b0:	2301      	movs	r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <MX_TIM15_Init+0xa8>)
 80007c4:	f004 fa2b 	bl	8004c1e <HAL_TIM_IC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 80007ce:	f000 f9c7 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3720      	adds	r7, #32
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000160 	.word	0x20000160
 80007e0:	40014000 	.word	0x40014000

080007e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e8:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_USART2_UART_Init+0x60>)
 80007ea:	4a17      	ldr	r2, [pc, #92]	@ (8000848 <MX_USART2_UART_Init+0x64>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <MX_USART2_UART_Init+0x60>)
 80007f0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80007f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_USART2_UART_Init+0x60>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_USART2_UART_Init+0x60>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <MX_USART2_UART_Init+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USART2_UART_Init+0x60>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <MX_USART2_UART_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USART2_UART_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <MX_USART2_UART_Init+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000820:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USART2_UART_Init+0x60>)
 8000822:	2210      	movs	r2, #16
 8000824:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000826:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_USART2_UART_Init+0x60>)
 8000828:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800082c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_USART2_UART_Init+0x60>)
 8000830:	f005 fa40 	bl	8005cb4 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800083a:	f000 f991 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200001ac 	.word	0x200001ac
 8000848:	40004400 	.word	0x40004400

0800084c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_USART3_UART_Init+0x60>)
 8000852:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <MX_USART3_UART_Init+0x64>)
 8000854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8000856:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <MX_USART3_UART_Init+0x60>)
 8000858:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800085c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <MX_USART3_UART_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_USART3_UART_Init+0x60>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_USART3_UART_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_USART3_UART_Init+0x60>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <MX_USART3_UART_Init+0x60>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_USART3_UART_Init+0x60>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <MX_USART3_UART_Init+0x60>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_USART3_UART_Init+0x60>)
 800088a:	2210      	movs	r2, #16
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800088e:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <MX_USART3_UART_Init+0x60>)
 8000890:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000894:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_USART3_UART_Init+0x60>)
 8000898:	f005 fa0c 	bl	8005cb4 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 80008a2:	f000 f95d 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000234 	.word	0x20000234
 80008b0:	40004800 	.word	0x40004800

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	@ 0x28
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ca:	4b51      	ldr	r3, [pc, #324]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a50      	ldr	r2, [pc, #320]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 80008d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b4e      	ldr	r3, [pc, #312]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b4b      	ldr	r3, [pc, #300]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a4a      	ldr	r2, [pc, #296]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 80008e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b48      	ldr	r3, [pc, #288]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fa:	4b45      	ldr	r3, [pc, #276]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a44      	ldr	r2, [pc, #272]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 8000900:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b42      	ldr	r3, [pc, #264]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b3f      	ldr	r3, [pc, #252]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a3e      	ldr	r2, [pc, #248]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b39      	ldr	r3, [pc, #228]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a38      	ldr	r2, [pc, #224]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 8000930:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b36      	ldr	r3, [pc, #216]	@ (8000a10 <MX_GPIO_Init+0x15c>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000942:	2200      	movs	r2, #0
 8000944:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000948:	4832      	ldr	r0, [pc, #200]	@ (8000a14 <MX_GPIO_Init+0x160>)
 800094a:	f002 fb3d 	bl	8002fc8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800094e:	2337      	movs	r3, #55	@ 0x37
 8000950:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000952:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	482c      	ldr	r0, [pc, #176]	@ (8000a14 <MX_GPIO_Init+0x160>)
 8000964:	f002 f9b6 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000968:	f64f 7308 	movw	r3, #65288	@ 0xff08
 800096c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	4824      	ldr	r0, [pc, #144]	@ (8000a14 <MX_GPIO_Init+0x160>)
 8000982:	f002 f9a7 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000986:	2301      	movs	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099c:	f002 f99a 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80009a0:	23e0      	movs	r3, #224	@ 0xe0
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009b0:	2305      	movs	r3, #5
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009be:	f002 f989 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80009c2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80009d4:	230e      	movs	r3, #14
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e2:	f002 f977 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80009e6:	23c0      	movs	r3, #192	@ 0xc0
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ea:	2312      	movs	r3, #18
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f6:	2304      	movs	r3, #4
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_GPIO_Init+0x164>)
 8000a02:	f002 f967 	bl	8002cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	@ 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48001000 	.word	0x48001000
 8000a18:	48000400 	.word	0x48000400

08000a1c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t *) "ab\r\n", 4, 100);
	if(huart == &huart2) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a3c      	ldr	r2, [pc, #240]	@ (8000b18 <HAL_UART_RxCpltCallback+0xfc>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d161      	bne.n	8000af0 <HAL_UART_RxCpltCallback+0xd4>
		if(uart2_char[0] == 's') {
 8000a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b1c <HAL_UART_RxCpltCallback+0x100>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b73      	cmp	r3, #115	@ 0x73
 8000a32:	d103      	bne.n	8000a3c <HAL_UART_RxCpltCallback+0x20>
			state = STOP;
 8000a34:	4b3a      	ldr	r3, [pc, #232]	@ (8000b20 <HAL_UART_RxCpltCallback+0x104>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e00c      	b.n	8000a56 <HAL_UART_RxCpltCallback+0x3a>
		} else if(uart2_char[0] == 'g') {
 8000a3c:	4b37      	ldr	r3, [pc, #220]	@ (8000b1c <HAL_UART_RxCpltCallback+0x100>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b67      	cmp	r3, #103	@ 0x67
 8000a42:	d108      	bne.n	8000a56 <HAL_UART_RxCpltCallback+0x3a>
			HAL_UART_Transmit(&huart2, (uint8_t *) "cd\r\n", 4, 100);
 8000a44:	2364      	movs	r3, #100	@ 0x64
 8000a46:	2204      	movs	r2, #4
 8000a48:	4936      	ldr	r1, [pc, #216]	@ (8000b24 <HAL_UART_RxCpltCallback+0x108>)
 8000a4a:	4833      	ldr	r0, [pc, #204]	@ (8000b18 <HAL_UART_RxCpltCallback+0xfc>)
 8000a4c:	f005 f980 	bl	8005d50 <HAL_UART_Transmit>
			state = FORWARD;
 8000a50:	4b33      	ldr	r3, [pc, #204]	@ (8000b20 <HAL_UART_RxCpltCallback+0x104>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
		}


		if(!is_receiving && uart2_char[0] == 'c') {
 8000a56:	4b34      	ldr	r3, [pc, #208]	@ (8000b28 <HAL_UART_RxCpltCallback+0x10c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d110      	bne.n	8000a80 <HAL_UART_RxCpltCallback+0x64>
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b1c <HAL_UART_RxCpltCallback+0x100>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b63      	cmp	r3, #99	@ 0x63
 8000a64:	d10c      	bne.n	8000a80 <HAL_UART_RxCpltCallback+0x64>
			is_receiving = '1';
 8000a66:	4b30      	ldr	r3, [pc, #192]	@ (8000b28 <HAL_UART_RxCpltCallback+0x10c>)
 8000a68:	2231      	movs	r2, #49	@ 0x31
 8000a6a:	601a      	str	r2, [r3, #0]
			buf_cnt = 0;
 8000a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b2c <HAL_UART_RxCpltCallback+0x110>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart2, (uint8_t *) "hit\r\n", 5, 100);
 8000a72:	2364      	movs	r3, #100	@ 0x64
 8000a74:	2205      	movs	r2, #5
 8000a76:	492e      	ldr	r1, [pc, #184]	@ (8000b30 <HAL_UART_RxCpltCallback+0x114>)
 8000a78:	4827      	ldr	r0, [pc, #156]	@ (8000b18 <HAL_UART_RxCpltCallback+0xfc>)
 8000a7a:	f005 f969 	bl	8005d50 <HAL_UART_Transmit>
 8000a7e:	e042      	b.n	8000b06 <HAL_UART_RxCpltCallback+0xea>
//			HAL_UART_Transmit(&huart2, interrupt_buf, 10, 100);
//			HAL_UART_Transmit(&huart2, (uint8_t *) "\r\n", 2, 100);

//			HAL_UART_Transmit(&huart3, interrupt_buf, 10, HAL_MAX_DELAY);
//			HAL_UART_Transmit(&huart3, (uint8_t *) "\r", 1, 100);
		} else if(is_receiving) {
 8000a80:	4b29      	ldr	r3, [pc, #164]	@ (8000b28 <HAL_UART_RxCpltCallback+0x10c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d03e      	beq.n	8000b06 <HAL_UART_RxCpltCallback+0xea>
			interrupt_buf[buf_cnt] = uart2_char[0];
 8000a88:	4b28      	ldr	r3, [pc, #160]	@ (8000b2c <HAL_UART_RxCpltCallback+0x110>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a23      	ldr	r2, [pc, #140]	@ (8000b1c <HAL_UART_RxCpltCallback+0x100>)
 8000a8e:	7811      	ldrb	r1, [r2, #0]
 8000a90:	4a28      	ldr	r2, [pc, #160]	@ (8000b34 <HAL_UART_RxCpltCallback+0x118>)
 8000a92:	54d1      	strb	r1, [r2, r3]
			buf_cnt++;
 8000a94:	4b25      	ldr	r3, [pc, #148]	@ (8000b2c <HAL_UART_RxCpltCallback+0x110>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	4a24      	ldr	r2, [pc, #144]	@ (8000b2c <HAL_UART_RxCpltCallback+0x110>)
 8000a9c:	6013      	str	r3, [r2, #0]

			if(uart2_char[0] == '\r' || buf_cnt >= 99) {
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <HAL_UART_RxCpltCallback+0x100>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b0d      	cmp	r3, #13
 8000aa4:	d003      	beq.n	8000aae <HAL_UART_RxCpltCallback+0x92>
 8000aa6:	4b21      	ldr	r3, [pc, #132]	@ (8000b2c <HAL_UART_RxCpltCallback+0x110>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b62      	cmp	r3, #98	@ 0x62
 8000aac:	dd2b      	ble.n	8000b06 <HAL_UART_RxCpltCallback+0xea>

				interrupt_buf[buf_cnt] = '\0';
 8000aae:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <HAL_UART_RxCpltCallback+0x110>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a20      	ldr	r2, [pc, #128]	@ (8000b34 <HAL_UART_RxCpltCallback+0x118>)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	54d1      	strb	r1, [r2, r3]

				for(int i = 0; interrupt_buf[i] != '\0' && i<101; i++) {
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	e00b      	b.n	8000ad6 <HAL_UART_RxCpltCallback+0xba>
					HAL_UART_Transmit(&huart3, (uint8_t *) interrupt_buf+i, 1, HAL_MAX_DELAY);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b34 <HAL_UART_RxCpltCallback+0x118>)
 8000ac2:	1899      	adds	r1, r3, r2
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ac8:	2201      	movs	r2, #1
 8000aca:	481b      	ldr	r0, [pc, #108]	@ (8000b38 <HAL_UART_RxCpltCallback+0x11c>)
 8000acc:	f005 f940 	bl	8005d50 <HAL_UART_Transmit>
				for(int i = 0; interrupt_buf[i] != '\0' && i<101; i++) {
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4a17      	ldr	r2, [pc, #92]	@ (8000b34 <HAL_UART_RxCpltCallback+0x118>)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <HAL_UART_RxCpltCallback+0xcc>
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2b64      	cmp	r3, #100	@ 0x64
 8000ae6:	ddea      	ble.n	8000abe <HAL_UART_RxCpltCallback+0xa2>
				}

				is_receiving = 0;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <HAL_UART_RxCpltCallback+0x10c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e00a      	b.n	8000b06 <HAL_UART_RxCpltCallback+0xea>
			}
		}
	} else if(huart == &huart3) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a11      	ldr	r2, [pc, #68]	@ (8000b38 <HAL_UART_RxCpltCallback+0x11c>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d106      	bne.n	8000b06 <HAL_UART_RxCpltCallback+0xea>
		//HAL_UART_Receive(&huart3, uart3_char, 1, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, uart3_char, 1, HAL_MAX_DELAY);
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000afc:	2201      	movs	r2, #1
 8000afe:	490f      	ldr	r1, [pc, #60]	@ (8000b3c <HAL_UART_RxCpltCallback+0x120>)
 8000b00:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <HAL_UART_RxCpltCallback+0xfc>)
 8000b02:	f005 f925 	bl	8005d50 <HAL_UART_Transmit>

	}

	HAL_UART_Receive_IT(&huart2, uart2_char, 1);
 8000b06:	2201      	movs	r2, #1
 8000b08:	4904      	ldr	r1, [pc, #16]	@ (8000b1c <HAL_UART_RxCpltCallback+0x100>)
 8000b0a:	4803      	ldr	r0, [pc, #12]	@ (8000b18 <HAL_UART_RxCpltCallback+0xfc>)
 8000b0c:	f005 f9a9 	bl	8005e62 <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart3, uart3_char, 1);
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200001ac 	.word	0x200001ac
 8000b1c:	20000324 	.word	0x20000324
 8000b20:	20000334 	.word	0x20000334
 8000b24:	08007bc0 	.word	0x08007bc0
 8000b28:	2000032c 	.word	0x2000032c
 8000b2c:	20000330 	.word	0x20000330
 8000b30:	08007bc8 	.word	0x08007bc8
 8000b34:	200002bc 	.word	0x200002bc
 8000b38:	20000234 	.word	0x20000234
 8000b3c:	20000328 	.word	0x20000328

08000b40 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Set variable to report analog watchdog out of window status to main      */
  /* program.                                                                 */
	//HAL_UART_Transmit(&huart2, (uint8_t *) "wdi\r\n", 5, 100);
	state = BACKWARD;
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <HAL_ADC_LevelOutOfWindowCallback+0x1c>)
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	701a      	strb	r2, [r3, #0]

}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000334 	.word	0x20000334

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <Error_Handler+0x8>

08000b6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <HAL_MspInit+0x44>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb0 <HAL_MspInit+0x44>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6193      	str	r3, [r2, #24]
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <HAL_MspInit+0x44>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <HAL_MspInit+0x44>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a08      	ldr	r2, [pc, #32]	@ (8000bb0 <HAL_MspInit+0x44>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_MspInit+0x44>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ba2:	2007      	movs	r0, #7
 8000ba4:	f001 ffd8 	bl	8002b58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	@ 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bd4:	d12b      	bne.n	8000c2e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <HAL_ADC_MspInit+0x84>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <HAL_ADC_MspInit+0x84>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be0:	6153      	str	r3, [r2, #20]
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <HAL_ADC_MspInit+0x84>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_ADC_MspInit+0x84>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	4a11      	ldr	r2, [pc, #68]	@ (8000c38 <HAL_ADC_MspInit+0x84>)
 8000bf4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000bf8:	6153      	str	r3, [r2, #20]
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <HAL_ADC_MspInit+0x84>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c06:	2304      	movs	r3, #4
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4808      	ldr	r0, [pc, #32]	@ (8000c3c <HAL_ADC_MspInit+0x88>)
 8000c1a:	f002 f85b 	bl	8002cd4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2012      	movs	r0, #18
 8000c24:	f001 ffa3 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c28:	2012      	movs	r0, #18
 8000c2a:	f001 ffbc 	bl	8002ba6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	@ 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000800 	.word	0x48000800

08000c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c50:	d10b      	bne.n	8000c6a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <HAL_TIM_Base_MspInit+0x38>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <HAL_TIM_Base_MspInit+0x38>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	61d3      	str	r3, [r2, #28]
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_TIM_Base_MspInit+0x38>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <HAL_TIM_PWM_MspInit+0x38>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d10b      	bne.n	8000ca6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	4a09      	ldr	r2, [pc, #36]	@ (8000cb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	61d3      	str	r3, [r2, #28]
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40000400 	.word	0x40000400
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM15)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a17      	ldr	r2, [pc, #92]	@ (8000d38 <HAL_TIM_IC_MspInit+0x7c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d128      	bne.n	8000d30 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000cde:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <HAL_TIM_IC_MspInit+0x80>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4a16      	ldr	r2, [pc, #88]	@ (8000d3c <HAL_TIM_IC_MspInit+0x80>)
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce8:	6193      	str	r3, [r2, #24]
 8000cea:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <HAL_TIM_IC_MspInit+0x80>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <HAL_TIM_IC_MspInit+0x80>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	4a10      	ldr	r2, [pc, #64]	@ (8000d3c <HAL_TIM_IC_MspInit+0x80>)
 8000cfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d00:	6153      	str	r3, [r2, #20]
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_TIM_IC_MspInit+0x80>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PF9     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 8000d20:	2303      	movs	r3, #3
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <HAL_TIM_IC_MspInit+0x84>)
 8000d2c:	f001 ffd2 	bl	8002cd4 <HAL_GPIO_Init>

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	@ 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40014000 	.word	0x40014000
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	48001400 	.word	0x48001400

08000d44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d64:	d11d      	bne.n	8000da2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <HAL_TIM_MspPostInit+0x68>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	4a10      	ldr	r2, [pc, #64]	@ (8000dac <HAL_TIM_MspPostInit+0x68>)
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d70:	6153      	str	r3, [r2, #20]
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <HAL_TIM_MspPostInit+0x68>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9e:	f001 ff99 	bl	8002cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	@ 0x30
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a37      	ldr	r2, [pc, #220]	@ (8000eac <HAL_UART_MspInit+0xfc>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d131      	bne.n	8000e36 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd2:	4b37      	ldr	r3, [pc, #220]	@ (8000eb0 <HAL_UART_MspInit+0x100>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a36      	ldr	r2, [pc, #216]	@ (8000eb0 <HAL_UART_MspInit+0x100>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b34      	ldr	r3, [pc, #208]	@ (8000eb0 <HAL_UART_MspInit+0x100>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b31      	ldr	r3, [pc, #196]	@ (8000eb0 <HAL_UART_MspInit+0x100>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a30      	ldr	r2, [pc, #192]	@ (8000eb0 <HAL_UART_MspInit+0x100>)
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb0 <HAL_UART_MspInit+0x100>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e02:	230c      	movs	r3, #12
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e12:	2307      	movs	r3, #7
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e20:	f001 ff58 	bl	8002cd4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	2026      	movs	r0, #38	@ 0x26
 8000e2a:	f001 fea0 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e2e:	2026      	movs	r0, #38	@ 0x26
 8000e30:	f001 feb9 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e34:	e035      	b.n	8000ea2 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb4 <HAL_UART_MspInit+0x104>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d130      	bne.n	8000ea2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e40:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <HAL_UART_MspInit+0x100>)
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb0 <HAL_UART_MspInit+0x100>)
 8000e46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e4a:	61d3      	str	r3, [r2, #28]
 8000e4c:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <HAL_UART_MspInit+0x100>)
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e58:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <HAL_UART_MspInit+0x100>)
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	4a14      	ldr	r2, [pc, #80]	@ (8000eb0 <HAL_UART_MspInit+0x100>)
 8000e5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e62:	6153      	str	r3, [r2, #20]
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <HAL_UART_MspInit+0x100>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e82:	2307      	movs	r3, #7
 8000e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480a      	ldr	r0, [pc, #40]	@ (8000eb8 <HAL_UART_MspInit+0x108>)
 8000e8e:	f001 ff21 	bl	8002cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2027      	movs	r0, #39	@ 0x27
 8000e98:	f001 fe69 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e9c:	2027      	movs	r0, #39	@ 0x27
 8000e9e:	f001 fe82 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 8000ea2:	bf00      	nop
 8000ea4:	3730      	adds	r7, #48	@ 0x30
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40004400 	.word	0x40004400
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40004800 	.word	0x40004800
 8000eb8:	48000400 	.word	0x48000400

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f12:	f000 f8d9 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <ADC1_2_IRQHandler+0x10>)
 8000f22:	f000 fc49 	bl	80017b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000078 	.word	0x20000078

08000f30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <USART2_IRQHandler+0x10>)
 8000f36:	f004 ffd9 	bl	8005eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200001ac 	.word	0x200001ac

08000f44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <USART3_IRQHandler+0x10>)
 8000f4a:	f004 ffcf 	bl	8005eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000234 	.word	0x20000234

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f006 f974 	bl	8007274 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000a000 	.word	0x2000a000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	20000338 	.word	0x20000338
 8000fc0:	20000488 	.word	0x20000488

08000fc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001020 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fec:	f7ff ffea 	bl	8000fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	@ (8001028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800102c <LoopForever+0xe>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	@ (8001034 <LoopForever+0x16>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001016:	f006 f933 	bl	8007280 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800101a:	f7ff f931 	bl	8000280 <main>

0800101e <LoopForever>:

LoopForever:
    b LoopForever
 800101e:	e7fe      	b.n	800101e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001020:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800102c:	08007c4c 	.word	0x08007c4c
  ldr r2, =_sbss
 8001030:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001034:	20000488 	.word	0x20000488

08001038 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC3_IRQHandler>
	...

0800103c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <HAL_Init+0x28>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	@ (8001064 <HAL_Init+0x28>)
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f001 fd83 	bl	8002b58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fd88 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40022000 	.word	0x40022000

08001068 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f001 fd9b 	bl	8002bc2 <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010a4:	f001 fd63 	bl	8002b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	@ (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000004 	.word	0x20000004

080010c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008
 80010ec:	2000033c 	.word	0x2000033c

080010f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80010f4:	4b03      	ldr	r3, [pc, #12]	@ (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2000033c 	.word	0x2000033c

08001108 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffde 	bl	80010f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008

08001150 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b09a      	sub	sp, #104	@ 0x68
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e1c9      	b.n	800152c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	f003 0310 	and.w	r3, r3, #16
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d176      	bne.n	8001298 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d152      	bne.n	8001258 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fcf1 	bl	8000bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d13b      	bne.n	8001258 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f001 fb83 	bl	80028ec <ADC_Disable>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d12f      	bne.n	8001258 <HAL_ADC_Init+0xe0>
 80011f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d12b      	bne.n	8001258 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001204:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001208:	f023 0302 	bic.w	r3, r3, #2
 800120c:	f043 0202 	orr.w	r2, r3, #2
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001222:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001232:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001234:	4b86      	ldr	r3, [pc, #536]	@ (8001450 <HAL_ADC_Init+0x2d8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a86      	ldr	r2, [pc, #536]	@ (8001454 <HAL_ADC_Init+0x2dc>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0c9a      	lsrs	r2, r3, #18
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800124a:	e002      	b.n	8001252 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	3b01      	subs	r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f9      	bne.n	800124c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001274:	d110      	bne.n	8001298 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	f023 0312 	bic.w	r3, r3, #18
 800127e:	f043 0210 	orr.w	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128a:	f043 0201 	orr.w	r2, r3, #1
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f040 8136 	bne.w	8001512 <HAL_ADC_Init+0x39a>
 80012a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f040 8131 	bne.w	8001512 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f040 8129 	bne.w	8001512 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80012c8:	f043 0202 	orr.w	r2, r3, #2
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012d8:	d004      	beq.n	80012e4 <HAL_ADC_Init+0x16c>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a5e      	ldr	r2, [pc, #376]	@ (8001458 <HAL_ADC_Init+0x2e0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d101      	bne.n	80012e8 <HAL_ADC_Init+0x170>
 80012e4:	4b5d      	ldr	r3, [pc, #372]	@ (800145c <HAL_ADC_Init+0x2e4>)
 80012e6:	e000      	b.n	80012ea <HAL_ADC_Init+0x172>
 80012e8:	4b5d      	ldr	r3, [pc, #372]	@ (8001460 <HAL_ADC_Init+0x2e8>)
 80012ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012f4:	d102      	bne.n	80012fc <HAL_ADC_Init+0x184>
 80012f6:	4b58      	ldr	r3, [pc, #352]	@ (8001458 <HAL_ADC_Init+0x2e0>)
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	e01a      	b.n	8001332 <HAL_ADC_Init+0x1ba>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a55      	ldr	r2, [pc, #340]	@ (8001458 <HAL_ADC_Init+0x2e0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d103      	bne.n	800130e <HAL_ADC_Init+0x196>
 8001306:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e011      	b.n	8001332 <HAL_ADC_Init+0x1ba>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a54      	ldr	r2, [pc, #336]	@ (8001464 <HAL_ADC_Init+0x2ec>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d102      	bne.n	800131e <HAL_ADC_Init+0x1a6>
 8001318:	4b53      	ldr	r3, [pc, #332]	@ (8001468 <HAL_ADC_Init+0x2f0>)
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	e009      	b.n	8001332 <HAL_ADC_Init+0x1ba>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a51      	ldr	r2, [pc, #324]	@ (8001468 <HAL_ADC_Init+0x2f0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d102      	bne.n	800132e <HAL_ADC_Init+0x1b6>
 8001328:	4b4e      	ldr	r3, [pc, #312]	@ (8001464 <HAL_ADC_Init+0x2ec>)
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	e001      	b.n	8001332 <HAL_ADC_Init+0x1ba>
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d108      	bne.n	8001352 <HAL_ADC_Init+0x1da>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_ADC_Init+0x1da>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <HAL_ADC_Init+0x1dc>
 8001352:	2300      	movs	r3, #0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d11c      	bne.n	8001392 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001358:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800135a:	2b00      	cmp	r3, #0
 800135c:	d010      	beq.n	8001380 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d107      	bne.n	800137a <HAL_ADC_Init+0x202>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_ADC_Init+0x202>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_ADC_Init+0x204>
 800137a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800137c:	2b00      	cmp	r3, #0
 800137e:	d108      	bne.n	8001392 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001380:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	431a      	orrs	r2, r3
 800138e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001390:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7e5b      	ldrb	r3, [r3, #25]
 8001396:	035b      	lsls	r3, r3, #13
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800139c:	2a01      	cmp	r2, #1
 800139e:	d002      	beq.n	80013a6 <HAL_ADC_Init+0x22e>
 80013a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013a4:	e000      	b.n	80013a8 <HAL_ADC_Init+0x230>
 80013a6:	2200      	movs	r2, #0
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013b8:	4313      	orrs	r3, r2
 80013ba:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d11b      	bne.n	80013fe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7e5b      	ldrb	r3, [r3, #25]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d2:	3b01      	subs	r3, #1
 80013d4:	045a      	lsls	r2, r3, #17
 80013d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80013d8:	4313      	orrs	r3, r2
 80013da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013de:	663b      	str	r3, [r7, #96]	@ 0x60
 80013e0:	e00d      	b.n	80013fe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80013ea:	f043 0220 	orr.w	r2, r3, #32
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	f043 0201 	orr.w	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001402:	2b01      	cmp	r3, #1
 8001404:	d03a      	beq.n	800147c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <HAL_ADC_Init+0x2ec>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d004      	beq.n	800141a <HAL_ADC_Init+0x2a2>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a14      	ldr	r2, [pc, #80]	@ (8001468 <HAL_ADC_Init+0x2f0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d128      	bne.n	800146c <HAL_ADC_Init+0x2f4>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001422:	d012      	beq.n	800144a <HAL_ADC_Init+0x2d2>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800142c:	d00a      	beq.n	8001444 <HAL_ADC_Init+0x2cc>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001432:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001436:	d002      	beq.n	800143e <HAL_ADC_Init+0x2c6>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800143c:	e018      	b.n	8001470 <HAL_ADC_Init+0x2f8>
 800143e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001442:	e015      	b.n	8001470 <HAL_ADC_Init+0x2f8>
 8001444:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001448:	e012      	b.n	8001470 <HAL_ADC_Init+0x2f8>
 800144a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800144e:	e00f      	b.n	8001470 <HAL_ADC_Init+0x2f8>
 8001450:	20000000 	.word	0x20000000
 8001454:	431bde83 	.word	0x431bde83
 8001458:	50000100 	.word	0x50000100
 800145c:	50000300 	.word	0x50000300
 8001460:	50000700 	.word	0x50000700
 8001464:	50000400 	.word	0x50000400
 8001468:	50000500 	.word	0x50000500
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001474:	4313      	orrs	r3, r2
 8001476:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001478:	4313      	orrs	r3, r2
 800147a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b00      	cmp	r3, #0
 8001488:	d114      	bne.n	80014b4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001498:	f023 0302 	bic.w	r3, r3, #2
 800149c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7e1b      	ldrb	r3, [r3, #24]
 80014a2:	039a      	lsls	r2, r3, #14
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4313      	orrs	r3, r2
 80014ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014b0:	4313      	orrs	r3, r2
 80014b2:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <HAL_ADC_Init+0x3bc>)
 80014bc:	4013      	ands	r3, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80014c4:	430b      	orrs	r3, r1
 80014c6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d10c      	bne.n	80014ea <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f023 010f 	bic.w	r1, r3, #15
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	1e5a      	subs	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80014e8:	e007      	b.n	80014fa <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 020f 	bic.w	r2, r2, #15
 80014f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	f023 0303 	bic.w	r3, r3, #3
 8001508:	f043 0201 	orr.w	r2, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001510:	e00a      	b.n	8001528 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f023 0312 	bic.w	r3, r3, #18
 800151a:	f043 0210 	orr.w	r2, r3, #16
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001522:	2301      	movs	r3, #1
 8001524:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001528:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800152c:	4618      	mov	r0, r3
 800152e:	3768      	adds	r7, #104	@ 0x68
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	fff0c007 	.word	0xfff0c007

08001538 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 8123 	bne.w	800179a <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800155a:	2b01      	cmp	r3, #1
 800155c:	d101      	bne.n	8001562 <HAL_ADC_Start_IT+0x2a>
 800155e:	2302      	movs	r3, #2
 8001560:	e11e      	b.n	80017a0 <HAL_ADC_Start_IT+0x268>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f001 f95a 	bl	8002824 <ADC_Enable>
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 810a 	bne.w	8001790 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001598:	d004      	beq.n	80015a4 <HAL_ADC_Start_IT+0x6c>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a82      	ldr	r2, [pc, #520]	@ (80017a8 <HAL_ADC_Start_IT+0x270>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d106      	bne.n	80015b2 <HAL_ADC_Start_IT+0x7a>
 80015a4:	4b81      	ldr	r3, [pc, #516]	@ (80017ac <HAL_ADC_Start_IT+0x274>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 031f 	and.w	r3, r3, #31
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d010      	beq.n	80015d2 <HAL_ADC_Start_IT+0x9a>
 80015b0:	e005      	b.n	80015be <HAL_ADC_Start_IT+0x86>
 80015b2:	4b7f      	ldr	r3, [pc, #508]	@ (80017b0 <HAL_ADC_Start_IT+0x278>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d009      	beq.n	80015d2 <HAL_ADC_Start_IT+0x9a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015c6:	d004      	beq.n	80015d2 <HAL_ADC_Start_IT+0x9a>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a79      	ldr	r2, [pc, #484]	@ (80017b4 <HAL_ADC_Start_IT+0x27c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d115      	bne.n	80015fe <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d036      	beq.n	800165a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80015fc:	e02d      	b.n	800165a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001612:	d004      	beq.n	800161e <HAL_ADC_Start_IT+0xe6>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a63      	ldr	r2, [pc, #396]	@ (80017a8 <HAL_ADC_Start_IT+0x270>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d10a      	bne.n	8001634 <HAL_ADC_Start_IT+0xfc>
 800161e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf14      	ite	ne
 800162c:	2301      	movne	r3, #1
 800162e:	2300      	moveq	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	e008      	b.n	8001646 <HAL_ADC_Start_IT+0x10e>
 8001634:	4b5f      	ldr	r3, [pc, #380]	@ (80017b4 <HAL_ADC_Start_IT+0x27c>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	bf14      	ite	ne
 8001640:	2301      	movne	r3, #1
 8001642:	2300      	moveq	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001652:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001666:	d106      	bne.n	8001676 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166c:	f023 0206 	bic.w	r2, r3, #6
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	645a      	str	r2, [r3, #68]	@ 0x44
 8001674:	e002      	b.n	800167c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	221c      	movs	r2, #28
 800168a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	2b08      	cmp	r3, #8
 8001692:	d110      	bne.n	80016b6 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0204 	bic.w	r2, r2, #4
 80016a2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0208 	orr.w	r2, r2, #8
 80016b2:	605a      	str	r2, [r3, #4]
          break;
 80016b4:	e008      	b.n	80016c8 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 020c 	orr.w	r2, r2, #12
 80016c4:	605a      	str	r2, [r3, #4]
          break;
 80016c6:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d107      	bne.n	80016e0 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0210 	bic.w	r2, r2, #16
 80016de:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016e8:	d004      	beq.n	80016f4 <HAL_ADC_Start_IT+0x1bc>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a2e      	ldr	r2, [pc, #184]	@ (80017a8 <HAL_ADC_Start_IT+0x270>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d106      	bne.n	8001702 <HAL_ADC_Start_IT+0x1ca>
 80016f4:	4b2d      	ldr	r3, [pc, #180]	@ (80017ac <HAL_ADC_Start_IT+0x274>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 031f 	and.w	r3, r3, #31
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d03e      	beq.n	800177e <HAL_ADC_Start_IT+0x246>
 8001700:	e005      	b.n	800170e <HAL_ADC_Start_IT+0x1d6>
 8001702:	4b2b      	ldr	r3, [pc, #172]	@ (80017b0 <HAL_ADC_Start_IT+0x278>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 031f 	and.w	r3, r3, #31
 800170a:	2b00      	cmp	r3, #0
 800170c:	d037      	beq.n	800177e <HAL_ADC_Start_IT+0x246>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001716:	d004      	beq.n	8001722 <HAL_ADC_Start_IT+0x1ea>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <HAL_ADC_Start_IT+0x270>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d106      	bne.n	8001730 <HAL_ADC_Start_IT+0x1f8>
 8001722:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <HAL_ADC_Start_IT+0x274>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 031f 	and.w	r3, r3, #31
 800172a:	2b05      	cmp	r3, #5
 800172c:	d027      	beq.n	800177e <HAL_ADC_Start_IT+0x246>
 800172e:	e005      	b.n	800173c <HAL_ADC_Start_IT+0x204>
 8001730:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <HAL_ADC_Start_IT+0x278>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	2b05      	cmp	r3, #5
 800173a:	d020      	beq.n	800177e <HAL_ADC_Start_IT+0x246>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001744:	d004      	beq.n	8001750 <HAL_ADC_Start_IT+0x218>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a17      	ldr	r2, [pc, #92]	@ (80017a8 <HAL_ADC_Start_IT+0x270>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d106      	bne.n	800175e <HAL_ADC_Start_IT+0x226>
 8001750:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <HAL_ADC_Start_IT+0x274>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 031f 	and.w	r3, r3, #31
 8001758:	2b09      	cmp	r3, #9
 800175a:	d010      	beq.n	800177e <HAL_ADC_Start_IT+0x246>
 800175c:	e005      	b.n	800176a <HAL_ADC_Start_IT+0x232>
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <HAL_ADC_Start_IT+0x278>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	2b09      	cmp	r3, #9
 8001768:	d009      	beq.n	800177e <HAL_ADC_Start_IT+0x246>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001772:	d004      	beq.n	800177e <HAL_ADC_Start_IT+0x246>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0e      	ldr	r2, [pc, #56]	@ (80017b4 <HAL_ADC_Start_IT+0x27c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d10f      	bne.n	800179e <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0204 	orr.w	r2, r2, #4
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	e006      	b.n	800179e <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001798:	e001      	b.n	800179e <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800179a:	2302      	movs	r3, #2
 800179c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	50000100 	.word	0x50000100
 80017ac:	50000300 	.word	0x50000300
 80017b0:	50000700 	.word	0x50000700
 80017b4:	50000400 	.word	0x50000400

080017b8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d004      	beq.n	80017f0 <HAL_ADC_IRQHandler+0x38>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10b      	bne.n	8001808 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80bc 	beq.w	8001974 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 80b6 	beq.w	8001974 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	d105      	bne.n	8001820 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001828:	d004      	beq.n	8001834 <HAL_ADC_IRQHandler+0x7c>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a90      	ldr	r2, [pc, #576]	@ (8001a70 <HAL_ADC_IRQHandler+0x2b8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d106      	bne.n	8001842 <HAL_ADC_IRQHandler+0x8a>
 8001834:	4b8f      	ldr	r3, [pc, #572]	@ (8001a74 <HAL_ADC_IRQHandler+0x2bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	2b00      	cmp	r3, #0
 800183e:	d03e      	beq.n	80018be <HAL_ADC_IRQHandler+0x106>
 8001840:	e005      	b.n	800184e <HAL_ADC_IRQHandler+0x96>
 8001842:	4b8d      	ldr	r3, [pc, #564]	@ (8001a78 <HAL_ADC_IRQHandler+0x2c0>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	2b00      	cmp	r3, #0
 800184c:	d037      	beq.n	80018be <HAL_ADC_IRQHandler+0x106>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001856:	d004      	beq.n	8001862 <HAL_ADC_IRQHandler+0xaa>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a84      	ldr	r2, [pc, #528]	@ (8001a70 <HAL_ADC_IRQHandler+0x2b8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d106      	bne.n	8001870 <HAL_ADC_IRQHandler+0xb8>
 8001862:	4b84      	ldr	r3, [pc, #528]	@ (8001a74 <HAL_ADC_IRQHandler+0x2bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 031f 	and.w	r3, r3, #31
 800186a:	2b05      	cmp	r3, #5
 800186c:	d027      	beq.n	80018be <HAL_ADC_IRQHandler+0x106>
 800186e:	e005      	b.n	800187c <HAL_ADC_IRQHandler+0xc4>
 8001870:	4b81      	ldr	r3, [pc, #516]	@ (8001a78 <HAL_ADC_IRQHandler+0x2c0>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	2b05      	cmp	r3, #5
 800187a:	d020      	beq.n	80018be <HAL_ADC_IRQHandler+0x106>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001884:	d004      	beq.n	8001890 <HAL_ADC_IRQHandler+0xd8>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a79      	ldr	r2, [pc, #484]	@ (8001a70 <HAL_ADC_IRQHandler+0x2b8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d106      	bne.n	800189e <HAL_ADC_IRQHandler+0xe6>
 8001890:	4b78      	ldr	r3, [pc, #480]	@ (8001a74 <HAL_ADC_IRQHandler+0x2bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	2b09      	cmp	r3, #9
 800189a:	d010      	beq.n	80018be <HAL_ADC_IRQHandler+0x106>
 800189c:	e005      	b.n	80018aa <HAL_ADC_IRQHandler+0xf2>
 800189e:	4b76      	ldr	r3, [pc, #472]	@ (8001a78 <HAL_ADC_IRQHandler+0x2c0>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	2b09      	cmp	r3, #9
 80018a8:	d009      	beq.n	80018be <HAL_ADC_IRQHandler+0x106>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018b2:	d004      	beq.n	80018be <HAL_ADC_IRQHandler+0x106>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a70      	ldr	r2, [pc, #448]	@ (8001a7c <HAL_ADC_IRQHandler+0x2c4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d104      	bne.n	80018c8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	e00f      	b.n	80018e8 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018d0:	d004      	beq.n	80018dc <HAL_ADC_IRQHandler+0x124>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a66      	ldr	r2, [pc, #408]	@ (8001a70 <HAL_ADC_IRQHandler+0x2b8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d102      	bne.n	80018e2 <HAL_ADC_IRQHandler+0x12a>
 80018dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018e0:	e000      	b.n	80018e4 <HAL_ADC_IRQHandler+0x12c>
 80018e2:	4b66      	ldr	r3, [pc, #408]	@ (8001a7c <HAL_ADC_IRQHandler+0x2c4>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d137      	bne.n	8001966 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d132      	bne.n	8001966 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d02d      	beq.n	8001966 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d11a      	bne.n	800194e <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 020c 	bic.w	r2, r2, #12
 8001926:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d112      	bne.n	8001966 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	f043 0201 	orr.w	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	641a      	str	r2, [r3, #64]	@ 0x40
 800194c:	e00b      	b.n	8001966 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f043 0210 	orr.w	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	f043 0201 	orr.w	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fbf2 	bl	8001150 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	220c      	movs	r2, #12
 8001972:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f003 0320 	and.w	r3, r3, #32
 800197a:	2b00      	cmp	r3, #0
 800197c:	d004      	beq.n	8001988 <HAL_ADC_IRQHandler+0x1d0>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f003 0320 	and.w	r3, r3, #32
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10b      	bne.n	80019a0 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8138 	beq.w	8001c04 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8132 	beq.w	8001c04 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019b4:	d004      	beq.n	80019c0 <HAL_ADC_IRQHandler+0x208>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001a70 <HAL_ADC_IRQHandler+0x2b8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d106      	bne.n	80019ce <HAL_ADC_IRQHandler+0x216>
 80019c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a74 <HAL_ADC_IRQHandler+0x2bc>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d03e      	beq.n	8001a4a <HAL_ADC_IRQHandler+0x292>
 80019cc:	e005      	b.n	80019da <HAL_ADC_IRQHandler+0x222>
 80019ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <HAL_ADC_IRQHandler+0x2c0>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d037      	beq.n	8001a4a <HAL_ADC_IRQHandler+0x292>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019e2:	d004      	beq.n	80019ee <HAL_ADC_IRQHandler+0x236>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a21      	ldr	r2, [pc, #132]	@ (8001a70 <HAL_ADC_IRQHandler+0x2b8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d106      	bne.n	80019fc <HAL_ADC_IRQHandler+0x244>
 80019ee:	4b21      	ldr	r3, [pc, #132]	@ (8001a74 <HAL_ADC_IRQHandler+0x2bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d027      	beq.n	8001a4a <HAL_ADC_IRQHandler+0x292>
 80019fa:	e005      	b.n	8001a08 <HAL_ADC_IRQHandler+0x250>
 80019fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a78 <HAL_ADC_IRQHandler+0x2c0>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d020      	beq.n	8001a4a <HAL_ADC_IRQHandler+0x292>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a10:	d004      	beq.n	8001a1c <HAL_ADC_IRQHandler+0x264>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a16      	ldr	r2, [pc, #88]	@ (8001a70 <HAL_ADC_IRQHandler+0x2b8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d106      	bne.n	8001a2a <HAL_ADC_IRQHandler+0x272>
 8001a1c:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <HAL_ADC_IRQHandler+0x2bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	2b09      	cmp	r3, #9
 8001a26:	d010      	beq.n	8001a4a <HAL_ADC_IRQHandler+0x292>
 8001a28:	e005      	b.n	8001a36 <HAL_ADC_IRQHandler+0x27e>
 8001a2a:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <HAL_ADC_IRQHandler+0x2c0>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	2b09      	cmp	r3, #9
 8001a34:	d009      	beq.n	8001a4a <HAL_ADC_IRQHandler+0x292>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a3e:	d004      	beq.n	8001a4a <HAL_ADC_IRQHandler+0x292>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0d      	ldr	r2, [pc, #52]	@ (8001a7c <HAL_ADC_IRQHandler+0x2c4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d104      	bne.n	8001a54 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	e018      	b.n	8001a86 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a5c:	d004      	beq.n	8001a68 <HAL_ADC_IRQHandler+0x2b0>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a03      	ldr	r2, [pc, #12]	@ (8001a70 <HAL_ADC_IRQHandler+0x2b8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d10b      	bne.n	8001a80 <HAL_ADC_IRQHandler+0x2c8>
 8001a68:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a6c:	e009      	b.n	8001a82 <HAL_ADC_IRQHandler+0x2ca>
 8001a6e:	bf00      	nop
 8001a70:	50000100 	.word	0x50000100
 8001a74:	50000300 	.word	0x50000300
 8001a78:	50000700 	.word	0x50000700
 8001a7c:	50000400 	.word	0x50000400
 8001a80:	4b92      	ldr	r3, [pc, #584]	@ (8001ccc <HAL_ADC_IRQHandler+0x514>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f040 80b0 	bne.w	8001bf6 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00d      	beq.n	8001abc <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f040 80a3 	bne.w	8001bf6 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f040 809d 	bne.w	8001bf6 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8097 	beq.w	8001bf6 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ad0:	d004      	beq.n	8001adc <HAL_ADC_IRQHandler+0x324>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a7e      	ldr	r2, [pc, #504]	@ (8001cd0 <HAL_ADC_IRQHandler+0x518>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d106      	bne.n	8001aea <HAL_ADC_IRQHandler+0x332>
 8001adc:	4b7d      	ldr	r3, [pc, #500]	@ (8001cd4 <HAL_ADC_IRQHandler+0x51c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d03e      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x3ae>
 8001ae8:	e005      	b.n	8001af6 <HAL_ADC_IRQHandler+0x33e>
 8001aea:	4b7b      	ldr	r3, [pc, #492]	@ (8001cd8 <HAL_ADC_IRQHandler+0x520>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d037      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x3ae>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001afe:	d004      	beq.n	8001b0a <HAL_ADC_IRQHandler+0x352>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a72      	ldr	r2, [pc, #456]	@ (8001cd0 <HAL_ADC_IRQHandler+0x518>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d106      	bne.n	8001b18 <HAL_ADC_IRQHandler+0x360>
 8001b0a:	4b72      	ldr	r3, [pc, #456]	@ (8001cd4 <HAL_ADC_IRQHandler+0x51c>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d027      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x3ae>
 8001b16:	e005      	b.n	8001b24 <HAL_ADC_IRQHandler+0x36c>
 8001b18:	4b6f      	ldr	r3, [pc, #444]	@ (8001cd8 <HAL_ADC_IRQHandler+0x520>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	2b06      	cmp	r3, #6
 8001b22:	d020      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x3ae>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b2c:	d004      	beq.n	8001b38 <HAL_ADC_IRQHandler+0x380>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a67      	ldr	r2, [pc, #412]	@ (8001cd0 <HAL_ADC_IRQHandler+0x518>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d106      	bne.n	8001b46 <HAL_ADC_IRQHandler+0x38e>
 8001b38:	4b66      	ldr	r3, [pc, #408]	@ (8001cd4 <HAL_ADC_IRQHandler+0x51c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	2b07      	cmp	r3, #7
 8001b42:	d010      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x3ae>
 8001b44:	e005      	b.n	8001b52 <HAL_ADC_IRQHandler+0x39a>
 8001b46:	4b64      	ldr	r3, [pc, #400]	@ (8001cd8 <HAL_ADC_IRQHandler+0x520>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	2b07      	cmp	r3, #7
 8001b50:	d009      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x3ae>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b5a:	d004      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x3ae>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a5a      	ldr	r2, [pc, #360]	@ (8001ccc <HAL_ADC_IRQHandler+0x514>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d104      	bne.n	8001b70 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	e00f      	b.n	8001b90 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b78:	d004      	beq.n	8001b84 <HAL_ADC_IRQHandler+0x3cc>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a54      	ldr	r2, [pc, #336]	@ (8001cd0 <HAL_ADC_IRQHandler+0x518>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d102      	bne.n	8001b8a <HAL_ADC_IRQHandler+0x3d2>
 8001b84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b88:	e000      	b.n	8001b8c <HAL_ADC_IRQHandler+0x3d4>
 8001b8a:	4b50      	ldr	r3, [pc, #320]	@ (8001ccc <HAL_ADC_IRQHandler+0x514>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d12d      	bne.n	8001bf6 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d11a      	bne.n	8001bde <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001bb6:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d112      	bne.n	8001bf6 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	f043 0201 	orr.w	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bdc:	e00b      	b.n	8001bf6 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f043 0210 	orr.w	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	f043 0201 	orr.w	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8c4 	bl	8001d84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2260      	movs	r2, #96	@ 0x60
 8001c02:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d011      	beq.n	8001c32 <HAL_ADC_IRQHandler+0x47a>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00c      	beq.n	8001c32 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7fe ff8b 	bl	8000b40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2280      	movs	r2, #128	@ 0x80
 8001c30:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d012      	beq.n	8001c62 <HAL_ADC_IRQHandler+0x4aa>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00d      	beq.n	8001c62 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f8aa 	bl	8001dac <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c60:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d012      	beq.n	8001c92 <HAL_ADC_IRQHandler+0x4da>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00d      	beq.n	8001c92 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f89c 	bl	8001dc0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c90:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d04f      	beq.n	8001d3c <HAL_ADC_IRQHandler+0x584>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d04a      	beq.n	8001d3c <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d102      	bne.n	8001cb4 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	e02d      	b.n	8001d10 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cbc:	d004      	beq.n	8001cc8 <HAL_ADC_IRQHandler+0x510>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a03      	ldr	r2, [pc, #12]	@ (8001cd0 <HAL_ADC_IRQHandler+0x518>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d109      	bne.n	8001cdc <HAL_ADC_IRQHandler+0x524>
 8001cc8:	4b02      	ldr	r3, [pc, #8]	@ (8001cd4 <HAL_ADC_IRQHandler+0x51c>)
 8001cca:	e008      	b.n	8001cde <HAL_ADC_IRQHandler+0x526>
 8001ccc:	50000400 	.word	0x50000400
 8001cd0:	50000100 	.word	0x50000100
 8001cd4:	50000300 	.word	0x50000300
 8001cd8:	50000700 	.word	0x50000700
 8001cdc:	4b28      	ldr	r3, [pc, #160]	@ (8001d80 <HAL_ADC_IRQHandler+0x5c8>)
 8001cde:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d10a      	bne.n	8001d10 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	e007      	b.n	8001d10 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d10e      	bne.n	8001d34 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f043 0202 	orr.w	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff fa18 	bl	8001164 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d018      	beq.n	8001d78 <HAL_ADC_IRQHandler+0x5c0>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d60:	f043 0208 	orr.w	r2, r3, #8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d70:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f810 	bl	8001d98 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	50000700 	.word	0x50000700

08001d84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b09b      	sub	sp, #108	@ 0x6c
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x22>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e2c8      	b.n	8002388 <HAL_ADC_ConfigChannel+0x5b4>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f040 82ac 	bne.w	8002366 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d81c      	bhi.n	8001e50 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	461a      	mov	r2, r3
 8001e2a:	231f      	movs	r3, #31
 8001e2c:	4093      	lsls	r3, r2
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	4019      	ands	r1, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	fa00 f203 	lsl.w	r2, r0, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e4e:	e063      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	d81e      	bhi.n	8001e96 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	3b1e      	subs	r3, #30
 8001e6c:	221f      	movs	r2, #31
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	4019      	ands	r1, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	3b1e      	subs	r3, #30
 8001e88:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e94:	e040      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b0e      	cmp	r3, #14
 8001e9c:	d81e      	bhi.n	8001edc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	3b3c      	subs	r3, #60	@ 0x3c
 8001eb2:	221f      	movs	r2, #31
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	4019      	ands	r1, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	3b3c      	subs	r3, #60	@ 0x3c
 8001ece:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001eda:	e01d      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	3b5a      	subs	r3, #90	@ 0x5a
 8001ef0:	221f      	movs	r2, #31
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	4019      	ands	r1, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	3b5a      	subs	r3, #90	@ 0x5a
 8001f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f040 80e5 	bne.w	80020f2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	d91c      	bls.n	8001f6a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6999      	ldr	r1, [r3, #24]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	3b1e      	subs	r3, #30
 8001f42:	2207      	movs	r2, #7
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4019      	ands	r1, r3
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	6898      	ldr	r0, [r3, #8]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	3b1e      	subs	r3, #30
 8001f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	619a      	str	r2, [r3, #24]
 8001f68:	e019      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6959      	ldr	r1, [r3, #20]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	2207      	movs	r2, #7
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4019      	ands	r1, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6898      	ldr	r0, [r3, #8]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	fa00 f203 	lsl.w	r2, r0, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d84f      	bhi.n	8002060 <HAL_ADC_ConfigChannel+0x28c>
 8001fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc6:	bf00      	nop
 8001fc8:	08001fd9 	.word	0x08001fd9
 8001fcc:	08001ffb 	.word	0x08001ffb
 8001fd0:	0800201d 	.word	0x0800201d
 8001fd4:	0800203f 	.word	0x0800203f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fde:	4b99      	ldr	r3, [pc, #612]	@ (8002244 <HAL_ADC_ConfigChannel+0x470>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	0691      	lsls	r1, r2, #26
 8001fe8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001fea:	430a      	orrs	r2, r1
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ff6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ff8:	e07b      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002000:	4b90      	ldr	r3, [pc, #576]	@ (8002244 <HAL_ADC_ConfigChannel+0x470>)
 8002002:	4013      	ands	r3, r2
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	0691      	lsls	r1, r2, #26
 800200a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800200c:	430a      	orrs	r2, r1
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002018:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800201a:	e06a      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002022:	4b88      	ldr	r3, [pc, #544]	@ (8002244 <HAL_ADC_ConfigChannel+0x470>)
 8002024:	4013      	ands	r3, r2
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	0691      	lsls	r1, r2, #26
 800202c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800202e:	430a      	orrs	r2, r1
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800203a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800203c:	e059      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002044:	4b7f      	ldr	r3, [pc, #508]	@ (8002244 <HAL_ADC_ConfigChannel+0x470>)
 8002046:	4013      	ands	r3, r2
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	0691      	lsls	r1, r2, #26
 800204e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002050:	430a      	orrs	r2, r1
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800205c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800205e:	e048      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002066:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	069b      	lsls	r3, r3, #26
 8002070:	429a      	cmp	r2, r3
 8002072:	d107      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002082:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800208a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	069b      	lsls	r3, r3, #26
 8002094:	429a      	cmp	r2, r3
 8002096:	d107      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020a6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	069b      	lsls	r3, r3, #26
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d107      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020ca:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	069b      	lsls	r3, r3, #26
 80020dc:	429a      	cmp	r2, r3
 80020de:	d107      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020ee:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80020f0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d108      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x33e>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x33e>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_ADC_ConfigChannel+0x340>
 8002112:	2300      	movs	r3, #0
 8002114:	2b00      	cmp	r3, #0
 8002116:	f040 8131 	bne.w	800237c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d00f      	beq.n	8002142 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2201      	movs	r2, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43da      	mvns	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	400a      	ands	r2, r1
 800213c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002140:	e049      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2201      	movs	r2, #1
 8002150:	409a      	lsls	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b09      	cmp	r3, #9
 8002162:	d91c      	bls.n	800219e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6999      	ldr	r1, [r3, #24]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	3b1b      	subs	r3, #27
 8002176:	2207      	movs	r2, #7
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	4019      	ands	r1, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6898      	ldr	r0, [r3, #8]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	3b1b      	subs	r3, #27
 8002190:	fa00 f203 	lsl.w	r2, r0, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	619a      	str	r2, [r3, #24]
 800219c:	e01b      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6959      	ldr	r1, [r3, #20]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	2207      	movs	r2, #7
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	4019      	ands	r1, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6898      	ldr	r0, [r3, #8]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	fa00 f203 	lsl.w	r2, r0, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021de:	d004      	beq.n	80021ea <HAL_ADC_ConfigChannel+0x416>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a18      	ldr	r2, [pc, #96]	@ (8002248 <HAL_ADC_ConfigChannel+0x474>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x41a>
 80021ea:	4b18      	ldr	r3, [pc, #96]	@ (800224c <HAL_ADC_ConfigChannel+0x478>)
 80021ec:	e000      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x41c>
 80021ee:	4b18      	ldr	r3, [pc, #96]	@ (8002250 <HAL_ADC_ConfigChannel+0x47c>)
 80021f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	d105      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d015      	beq.n	8002232 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800220a:	2b11      	cmp	r3, #17
 800220c:	d105      	bne.n	800221a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800220e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800221e:	2b12      	cmp	r3, #18
 8002220:	f040 80ac 	bne.w	800237c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002224:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800222c:	2b00      	cmp	r3, #0
 800222e:	f040 80a5 	bne.w	800237c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800223a:	d10b      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x480>
 800223c:	4b02      	ldr	r3, [pc, #8]	@ (8002248 <HAL_ADC_ConfigChannel+0x474>)
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e023      	b.n	800228a <HAL_ADC_ConfigChannel+0x4b6>
 8002242:	bf00      	nop
 8002244:	83fff000 	.word	0x83fff000
 8002248:	50000100 	.word	0x50000100
 800224c:	50000300 	.word	0x50000300
 8002250:	50000700 	.word	0x50000700
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a4e      	ldr	r2, [pc, #312]	@ (8002394 <HAL_ADC_ConfigChannel+0x5c0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d103      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x492>
 800225e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	e011      	b.n	800228a <HAL_ADC_ConfigChannel+0x4b6>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a4b      	ldr	r2, [pc, #300]	@ (8002398 <HAL_ADC_ConfigChannel+0x5c4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d102      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x4a2>
 8002270:	4b4a      	ldr	r3, [pc, #296]	@ (800239c <HAL_ADC_ConfigChannel+0x5c8>)
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e009      	b.n	800228a <HAL_ADC_ConfigChannel+0x4b6>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a48      	ldr	r2, [pc, #288]	@ (800239c <HAL_ADC_ConfigChannel+0x5c8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d102      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x4b2>
 8002280:	4b45      	ldr	r3, [pc, #276]	@ (8002398 <HAL_ADC_ConfigChannel+0x5c4>)
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e001      	b.n	800228a <HAL_ADC_ConfigChannel+0x4b6>
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d108      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x4d6>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x4d6>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_ADC_ConfigChannel+0x4d8>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d150      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022b0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d010      	beq.n	80022d8 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x4fe>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x4fe>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x500>
 80022d2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d13c      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d11d      	bne.n	800231c <HAL_ADC_ConfigChannel+0x548>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022e8:	d118      	bne.n	800231c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80022ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80022f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022f4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022f6:	4b2a      	ldr	r3, [pc, #168]	@ (80023a0 <HAL_ADC_ConfigChannel+0x5cc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a2a      	ldr	r2, [pc, #168]	@ (80023a4 <HAL_ADC_ConfigChannel+0x5d0>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	0c9a      	lsrs	r2, r3, #18
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800230c:	e002      	b.n	8002314 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3b01      	subs	r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f9      	bne.n	800230e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800231a:	e02e      	b.n	800237a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b11      	cmp	r3, #17
 8002322:	d10b      	bne.n	800233c <HAL_ADC_ConfigChannel+0x568>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800232c:	d106      	bne.n	800233c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800232e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002338:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800233a:	e01e      	b.n	800237a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b12      	cmp	r3, #18
 8002342:	d11a      	bne.n	800237a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002344:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800234c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800234e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002350:	e013      	b.n	800237a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f043 0220 	orr.w	r2, r3, #32
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002364:	e00a      	b.n	800237c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	f043 0220 	orr.w	r2, r3, #32
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002378:	e000      	b.n	800237c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800237a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002384:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002388:	4618      	mov	r0, r3
 800238a:	376c      	adds	r7, #108	@ 0x6c
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	50000100 	.word	0x50000100
 8002398:	50000400 	.word	0x50000400
 800239c:	50000500 	.word	0x50000500
 80023a0:	20000000 	.word	0x20000000
 80023a4:	431bde83 	.word	0x431bde83

080023a8 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc ADC handle
  * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	@ 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	77fb      	strb	r3, [r7, #31]

  /* Verify if threshold is within the selected ADC resolution */
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));

  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023be:	d003      	beq.n	80023c8 <HAL_ADC_AnalogWDGConfig+0x20>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80023c4:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_AnalogWDGConfig+0x2e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e12c      	b.n	8002630 <HAL_ADC_AnalogWDGConfig+0x288>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular and injected groups:                      */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f040 8114 	bne.w	8002616 <HAL_ADC_AnalogWDGConfig+0x26e>
  {
  
    /* Analog watchdogs configuration */
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d14f      	bne.n	8002496 <HAL_ADC_AnalogWDGConfig+0xee>
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: regular and/or injected      */
      /*    groups, one or overall group of channels.                         */
      /*  - Set the Analog watchdog channel (is not used if watchdog          */
      /*    mode "all channels": ADC_CFGR_AWD1SGL=0U).                         */
      MODIFY_REG(hadc->Instance->CFGR                             ,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f023 43fb 	bic.w	r3, r3, #2105540608	@ 0x7d800000
 8002400:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	6851      	ldr	r1, [r2, #4]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	6892      	ldr	r2, [r2, #8]
 800240c:	0692      	lsls	r2, r2, #26
 800240e:	4311      	orrs	r1, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	430b      	orrs	r3, r1
 8002416:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR_AWD1CH_SHIFT(AnalogWDGConfig->Channel)   );

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11U, the LSB (right bits)   */
      /* are set to 0                                                         */ 
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	08db      	lsrs	r3, r3, #3
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	613b      	str	r3, [r7, #16]
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	08db      	lsrs	r3, r3, #3
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	60fb      	str	r3, [r7, #12]
      
      /* Set the high and low thresholds */
      MODIFY_REG(hadc->Instance->TR1                                ,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	f003 21f0 	and.w	r1, r3, #4026593280	@ 0xf000f000
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	041a      	lsls	r2, r3, #16
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	621a      	str	r2, [r3, #32]
                 tmpAWDLowThresholdShifted                           );
      
      /* Clear the ADC Analog watchdog flag (in case of left enabled by       */
      /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler() */
      /* or HAL_ADC_PollForEvent().                                           */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2280      	movs	r2, #128	@ 0x80
 8002468:	601a      	str	r2, [r3, #0]
      
      /* Configure ADC Analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	7b1b      	ldrb	r3, [r3, #12]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d108      	bne.n	8002484 <HAL_ADC_AnalogWDGConfig+0xdc>
      {
        /* Enable the ADC Analog watchdog interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD1);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	e0d0      	b.n	8002626 <HAL_ADC_AnalogWDGConfig+0x27e>
      }
      else
      {
        /* Disable the ADC Analog watchdog interrupt */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	e0c7      	b.n	8002626 <HAL_ADC_AnalogWDGConfig+0x27e>
    /* Case of ADC_ANALOGWATCHDOG_2 and ADC_ANALOGWATCHDOG_3 */
    else
    {
    /* Shift the threshold in function of the selected ADC resolution */
    /* have to be left-aligned on bit 7U, the LSB (right bits) are set to 0    */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0318 	and.w	r3, r3, #24
 80024a0:	2b18      	cmp	r3, #24
 80024a2:	d00d      	beq.n	80024c0 <HAL_ADC_AnalogWDGConfig+0x118>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	08db      	lsrs	r3, r3, #3
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	f1c3 0302 	rsb	r3, r3, #2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	e002      	b.n	80024c6 <HAL_ADC_AnalogWDGConfig+0x11e>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	613b      	str	r3, [r7, #16]
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0318 	and.w	r3, r3, #24
 80024d2:	2b18      	cmp	r3, #24
 80024d4:	d00d      	beq.n	80024f2 <HAL_ADC_AnalogWDGConfig+0x14a>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	08db      	lsrs	r3, r3, #3
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	f1c3 0302 	rsb	r3, r3, #2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
 80024f0:	e002      	b.n	80024f8 <HAL_ADC_AnalogWDGConfig+0x150>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	60fb      	str	r3, [r7, #12]

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d137      	bne.n	8002572 <HAL_ADC_AnalogWDGConfig+0x1ca>
      {
        /* Set the Analog watchdog channel or group of channels. This also    */
        /* enables the watchdog.                                              */
        /* Note: Conditional register reset, because several channels can be  */
        /*       set by successive calls of this function.                    */
        if (AnalogWDGConfig->WatchdogMode != ADC_ANALOGWATCHDOG_NONE) 
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d01a      	beq.n	8002540 <HAL_ADC_AnalogWDGConfig+0x198>
        {
          /* Set the high and low thresholds */
          MODIFY_REG(hadc->Instance->TR2                                ,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	f003 21ff 	and.w	r1, r3, #4278255360	@ 0xff00ff00
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	041a      	lsls	r2, r3, #16
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	625a      	str	r2, [r3, #36]	@ 0x24
                     ADC_TR2_HT2 |
                     ADC_TR2_LT2                                        ,
                     ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted) |
                     tmpAWDLowThresholdShifted                           );
          
          SET_BIT(hadc->Instance->AWD2CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2201      	movs	r2, #1
 8002532:	409a      	lsls	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800253e:	e011      	b.n	8002564 <HAL_ADC_AnalogWDGConfig+0x1bc>
        }
        else
        {
          CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 800254e:	625a      	str	r2, [r3, #36]	@ 0x24
          CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b37      	ldr	r3, [pc, #220]	@ (800263c <HAL_ADC_AnalogWDGConfig+0x294>)
 800255e:	400b      	ands	r3, r1
 8002560:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
        }
                
        /* Set temporary variable to flag and IT of AWD2 or AWD3 for further  */
        /* settings.                                                          */
        tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD2;
 8002564:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002568:	61bb      	str	r3, [r7, #24]
        tmpADCITAWD2orAWD3 = ADC_IT_AWD2;
 800256a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e036      	b.n	80025e0 <HAL_ADC_AnalogWDGConfig+0x238>
      {
        /* Set the Analog watchdog channel or group of channels. This also    */
        /* enables the watchdog.                                              */
        /* Note: Conditional register reset, because several channels can be */
        /*       set by successive calls of this function.                    */
        if (AnalogWDGConfig->WatchdogMode != ADC_ANALOGWATCHDOG_NONE) 
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01a      	beq.n	80025b0 <HAL_ADC_AnalogWDGConfig+0x208>
        {
          /* Set the high and low thresholds */
          MODIFY_REG(hadc->Instance->TR3                                ,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002580:	f003 21ff 	and.w	r1, r3, #4278255360	@ 0xff00ff00
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	041a      	lsls	r2, r3, #16
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	629a      	str	r2, [r3, #40]	@ 0x28
                     ADC_TR3_HT3 |
                     ADC_TR3_LT3                                        ,
                     ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted) |
                     tmpAWDLowThresholdShifted                           );
          
          SET_BIT(hadc->Instance->AWD3CR, ADC_CFGR_AWD23CR(AnalogWDGConfig->Channel));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2201      	movs	r2, #1
 80025a2:	409a      	lsls	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80025ae:	e011      	b.n	80025d4 <HAL_ADC_AnalogWDGConfig+0x22c>
        }
        else
        {
          CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 80025be:	629a      	str	r2, [r3, #40]	@ 0x28
          CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <HAL_ADC_AnalogWDGConfig+0x294>)
 80025ce:	400b      	ands	r3, r1
 80025d0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
        }
        
        /* Set temporary variable to flag and IT of AWD2 or AWD3 for further  */
        /* settings.                                                          */
        tmpADCFlagAWD2orAWD3 = ADC_FLAG_AWD3;
 80025d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025d8:	61bb      	str	r3, [r7, #24]
        tmpADCITAWD2orAWD3 = ADC_IT_AWD3;
 80025da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025de:	617b      	str	r3, [r7, #20]
      }

      /* Clear the ADC Analog watchdog flag (in case of left enabled by       */
      /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler() */
      /* or HAL_ADC_PollForEvent().                                           */
      __HAL_ADC_CLEAR_FLAG(hadc, tmpADCFlagAWD2orAWD3);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	601a      	str	r2, [r3, #0]

      /* Configure ADC Analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	7b1b      	ldrb	r3, [r3, #12]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d108      	bne.n	8002602 <HAL_ADC_AnalogWDGConfig+0x25a>
      {
        __HAL_ADC_ENABLE_IT(hadc, tmpADCITAWD2orAWD3);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6859      	ldr	r1, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	e011      	b.n	8002626 <HAL_ADC_AnalogWDGConfig+0x27e>
      }
      else
      {
        __HAL_ADC_DISABLE_IT(hadc, tmpADCITAWD2orAWD3);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	43da      	mvns	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	400a      	ands	r2, r1
 8002612:	605a      	str	r2, [r3, #4]
 8002614:	e007      	b.n	8002626 <HAL_ADC_AnalogWDGConfig+0x27e>
  /* If a conversion is on going on regular or injected groups, no update     */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f043 0220 	orr.w	r2, r3, #32
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	77fb      	strb	r3, [r7, #31]
  }
  
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800262e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3724      	adds	r7, #36	@ 0x24
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	fff80001 	.word	0xfff80001

08002640 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002640:	b480      	push	{r7}
 8002642:	b099      	sub	sp, #100	@ 0x64
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002658:	d102      	bne.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800265a:	4b6d      	ldr	r3, [pc, #436]	@ (8002810 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	e01a      	b.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a6a      	ldr	r2, [pc, #424]	@ (8002810 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d103      	bne.n	8002672 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800266a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	e011      	b.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a67      	ldr	r2, [pc, #412]	@ (8002814 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d102      	bne.n	8002682 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800267c:	4b66      	ldr	r3, [pc, #408]	@ (8002818 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	e009      	b.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a64      	ldr	r2, [pc, #400]	@ (8002818 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d102      	bne.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800268c:	4b61      	ldr	r3, [pc, #388]	@ (8002814 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	e001      	b.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0b0      	b.n	8002802 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0a9      	b.n	8002802 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f040 808d 	bne.w	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 8086 	bne.w	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026dc:	d004      	beq.n	80026e8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a4b      	ldr	r2, [pc, #300]	@ (8002810 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d101      	bne.n	80026ec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80026e8:	4b4c      	ldr	r3, [pc, #304]	@ (800281c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80026ea:	e000      	b.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80026ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002820 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80026ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d040      	beq.n	800277a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80026f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800270a:	035b      	lsls	r3, r3, #13
 800270c:	430b      	orrs	r3, r1
 800270e:	431a      	orrs	r2, r3
 8002710:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002712:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d108      	bne.n	8002734 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002734:	2300      	movs	r3, #0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d15c      	bne.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d107      	bne.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002756:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002758:	2b00      	cmp	r3, #0
 800275a:	d14b      	bne.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800275c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002764:	f023 030f 	bic.w	r3, r3, #15
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	6811      	ldr	r1, [r2, #0]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	6892      	ldr	r2, [r2, #8]
 8002770:	430a      	orrs	r2, r1
 8002772:	431a      	orrs	r2, r3
 8002774:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002776:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002778:	e03c      	b.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800277a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002782:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002784:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d108      	bne.n	80027a6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d123      	bne.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d107      	bne.n	80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80027c8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d112      	bne.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80027ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80027d6:	f023 030f 	bic.w	r3, r3, #15
 80027da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027dc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027de:	e009      	b.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80027f2:	e000      	b.n	80027f6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027f4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002802:	4618      	mov	r0, r3
 8002804:	3764      	adds	r7, #100	@ 0x64
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	50000100 	.word	0x50000100
 8002814:	50000400 	.word	0x50000400
 8002818:	50000500 	.word	0x50000500
 800281c:	50000300 	.word	0x50000300
 8002820:	50000700 	.word	0x50000700

08002824 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d108      	bne.n	8002850 <ADC_Enable+0x2c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <ADC_Enable+0x2c>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <ADC_Enable+0x2e>
 8002850:	2300      	movs	r3, #0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d143      	bne.n	80028de <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	4b22      	ldr	r3, [pc, #136]	@ (80028e8 <ADC_Enable+0xc4>)
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00d      	beq.n	8002880 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	f043 0210 	orr.w	r2, r3, #16
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e02f      	b.n	80028e0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002890:	f7fe fc2e 	bl	80010f0 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002896:	e01b      	b.n	80028d0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002898:	f7fe fc2a 	bl	80010f0 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d914      	bls.n	80028d0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d00d      	beq.n	80028d0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b8:	f043 0210 	orr.w	r2, r3, #16
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e007      	b.n	80028e0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d1dc      	bne.n	8002898 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	8000003f 	.word	0x8000003f

080028ec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b01      	cmp	r3, #1
 8002904:	d108      	bne.n	8002918 <ADC_Disable+0x2c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <ADC_Disable+0x2c>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <ADC_Disable+0x2e>
 8002918:	2300      	movs	r3, #0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d047      	beq.n	80029ae <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 030d 	and.w	r3, r3, #13
 8002928:	2b01      	cmp	r3, #1
 800292a:	d10f      	bne.n	800294c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0202 	orr.w	r2, r2, #2
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2203      	movs	r2, #3
 8002942:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002944:	f7fe fbd4 	bl	80010f0 <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800294a:	e029      	b.n	80029a0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	f043 0210 	orr.w	r2, r3, #16
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295c:	f043 0201 	orr.w	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e023      	b.n	80029b0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002968:	f7fe fbc2 	bl	80010f0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d914      	bls.n	80029a0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d10d      	bne.n	80029a0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	f043 0210 	orr.w	r2, r3, #16
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	f043 0201 	orr.w	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e007      	b.n	80029b0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d0dc      	beq.n	8002968 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c8:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <__NVIC_SetPriorityGrouping+0x44>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029d4:	4013      	ands	r3, r2
 80029d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ea:	4a04      	ldr	r2, [pc, #16]	@ (80029fc <__NVIC_SetPriorityGrouping+0x44>)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	60d3      	str	r3, [r2, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a04:	4b04      	ldr	r3, [pc, #16]	@ (8002a18 <__NVIC_GetPriorityGrouping+0x18>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	f003 0307 	and.w	r3, r3, #7
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	db0b      	blt.n	8002a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	4907      	ldr	r1, [pc, #28]	@ (8002a54 <__NVIC_EnableIRQ+0x38>)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000e100 	.word	0xe000e100

08002a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db0a      	blt.n	8002a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	490c      	ldr	r1, [pc, #48]	@ (8002aa4 <__NVIC_SetPriority+0x4c>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a80:	e00a      	b.n	8002a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4908      	ldr	r1, [pc, #32]	@ (8002aa8 <__NVIC_SetPriority+0x50>)
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	3b04      	subs	r3, #4
 8002a90:	0112      	lsls	r2, r2, #4
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	440b      	add	r3, r1
 8002a96:	761a      	strb	r2, [r3, #24]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000e100 	.word	0xe000e100
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	@ 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f1c3 0307 	rsb	r3, r3, #7
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	bf28      	it	cs
 8002aca:	2304      	movcs	r3, #4
 8002acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d902      	bls.n	8002adc <NVIC_EncodePriority+0x30>
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3b03      	subs	r3, #3
 8002ada:	e000      	b.n	8002ade <NVIC_EncodePriority+0x32>
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	401a      	ands	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	43d9      	mvns	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	4313      	orrs	r3, r2
         );
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3724      	adds	r7, #36	@ 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b24:	d301      	bcc.n	8002b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00f      	b.n	8002b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b54 <SysTick_Config+0x40>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b32:	210f      	movs	r1, #15
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b38:	f7ff ff8e 	bl	8002a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <SysTick_Config+0x40>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b42:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <SysTick_Config+0x40>)
 8002b44:	2207      	movs	r2, #7
 8002b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	e000e010 	.word	0xe000e010

08002b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ff29 	bl	80029b8 <__NVIC_SetPriorityGrouping>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b80:	f7ff ff3e 	bl	8002a00 <__NVIC_GetPriorityGrouping>
 8002b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	6978      	ldr	r0, [r7, #20]
 8002b8c:	f7ff ff8e 	bl	8002aac <NVIC_EncodePriority>
 8002b90:	4602      	mov	r2, r0
 8002b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff5d 	bl	8002a58 <__NVIC_SetPriority>
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff31 	bl	8002a1c <__NVIC_EnableIRQ>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff ffa2 	bl	8002b14 <SysTick_Config>
 8002bd0:	4603      	mov	r3, r0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e02e      	b.n	8002c4a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d008      	beq.n	8002c08 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e020      	b.n	8002c4a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 020e 	bic.w	r2, r2, #14
 8002c16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c30:	2101      	movs	r1, #1
 8002c32:	fa01 f202 	lsl.w	r2, r1, r2
 8002c36:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d005      	beq.n	8002c78 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2204      	movs	r2, #4
 8002c70:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
 8002c76:	e027      	b.n	8002cc8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 020e 	bic.w	r2, r2, #14
 8002c86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
    }
  }
  return status;
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ce2:	e154      	b.n	8002f8e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	2101      	movs	r1, #1
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 8146 	beq.w	8002f88 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d005      	beq.n	8002d14 <HAL_GPIO_Init+0x40>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d130      	bne.n	8002d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f003 0201 	and.w	r2, r3, #1
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d017      	beq.n	8002db2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d123      	bne.n	8002e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	08da      	lsrs	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3208      	adds	r2, #8
 8002dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	08da      	lsrs	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3208      	adds	r2, #8
 8002e00:	6939      	ldr	r1, [r7, #16]
 8002e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	2203      	movs	r2, #3
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 0203 	and.w	r2, r3, #3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 80a0 	beq.w	8002f88 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e48:	4b58      	ldr	r3, [pc, #352]	@ (8002fac <HAL_GPIO_Init+0x2d8>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	4a57      	ldr	r2, [pc, #348]	@ (8002fac <HAL_GPIO_Init+0x2d8>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6193      	str	r3, [r2, #24]
 8002e54:	4b55      	ldr	r3, [pc, #340]	@ (8002fac <HAL_GPIO_Init+0x2d8>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e60:	4a53      	ldr	r2, [pc, #332]	@ (8002fb0 <HAL_GPIO_Init+0x2dc>)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	089b      	lsrs	r3, r3, #2
 8002e66:	3302      	adds	r3, #2
 8002e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	220f      	movs	r2, #15
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e8a:	d019      	beq.n	8002ec0 <HAL_GPIO_Init+0x1ec>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a49      	ldr	r2, [pc, #292]	@ (8002fb4 <HAL_GPIO_Init+0x2e0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d013      	beq.n	8002ebc <HAL_GPIO_Init+0x1e8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a48      	ldr	r2, [pc, #288]	@ (8002fb8 <HAL_GPIO_Init+0x2e4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00d      	beq.n	8002eb8 <HAL_GPIO_Init+0x1e4>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a47      	ldr	r2, [pc, #284]	@ (8002fbc <HAL_GPIO_Init+0x2e8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d007      	beq.n	8002eb4 <HAL_GPIO_Init+0x1e0>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a46      	ldr	r2, [pc, #280]	@ (8002fc0 <HAL_GPIO_Init+0x2ec>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d101      	bne.n	8002eb0 <HAL_GPIO_Init+0x1dc>
 8002eac:	2304      	movs	r3, #4
 8002eae:	e008      	b.n	8002ec2 <HAL_GPIO_Init+0x1ee>
 8002eb0:	2305      	movs	r3, #5
 8002eb2:	e006      	b.n	8002ec2 <HAL_GPIO_Init+0x1ee>
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e004      	b.n	8002ec2 <HAL_GPIO_Init+0x1ee>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e002      	b.n	8002ec2 <HAL_GPIO_Init+0x1ee>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <HAL_GPIO_Init+0x1ee>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	f002 0203 	and.w	r2, r2, #3
 8002ec8:	0092      	lsls	r2, r2, #2
 8002eca:	4093      	lsls	r3, r2
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ed2:	4937      	ldr	r1, [pc, #220]	@ (8002fb0 <HAL_GPIO_Init+0x2dc>)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee0:	4b38      	ldr	r3, [pc, #224]	@ (8002fc4 <HAL_GPIO_Init+0x2f0>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f04:	4a2f      	ldr	r2, [pc, #188]	@ (8002fc4 <HAL_GPIO_Init+0x2f0>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002fc4 <HAL_GPIO_Init+0x2f0>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f2e:	4a25      	ldr	r2, [pc, #148]	@ (8002fc4 <HAL_GPIO_Init+0x2f0>)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f34:	4b23      	ldr	r3, [pc, #140]	@ (8002fc4 <HAL_GPIO_Init+0x2f0>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f58:	4a1a      	ldr	r2, [pc, #104]	@ (8002fc4 <HAL_GPIO_Init+0x2f0>)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f5e:	4b19      	ldr	r3, [pc, #100]	@ (8002fc4 <HAL_GPIO_Init+0x2f0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f82:	4a10      	ldr	r2, [pc, #64]	@ (8002fc4 <HAL_GPIO_Init+0x2f0>)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f47f aea3 	bne.w	8002ce4 <HAL_GPIO_Init+0x10>
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
 8002fa2:	371c      	adds	r7, #28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	48000400 	.word	0x48000400
 8002fb8:	48000800 	.word	0x48000800
 8002fbc:	48000c00 	.word	0x48000c00
 8002fc0:	48001000 	.word	0x48001000
 8002fc4:	40010400 	.word	0x40010400

08002fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd8:	787b      	ldrb	r3, [r7, #1]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fe4:	e002      	b.n	8002fec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003004:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003008:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800300a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	f001 b823 	b.w	8004064 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003022:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 817d 	beq.w	800332e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003034:	4bbc      	ldr	r3, [pc, #752]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b04      	cmp	r3, #4
 800303e:	d00c      	beq.n	800305a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003040:	4bb9      	ldr	r3, [pc, #740]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b08      	cmp	r3, #8
 800304a:	d15c      	bne.n	8003106 <HAL_RCC_OscConfig+0x10e>
 800304c:	4bb6      	ldr	r3, [pc, #728]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003058:	d155      	bne.n	8003106 <HAL_RCC_OscConfig+0x10e>
 800305a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800305e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800306e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d102      	bne.n	800308c <HAL_RCC_OscConfig+0x94>
 8003086:	4ba8      	ldr	r3, [pc, #672]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	e015      	b.n	80030b8 <HAL_RCC_OscConfig+0xc0>
 800308c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003090:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80030a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030a4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80030a8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80030b4:	4b9c      	ldr	r3, [pc, #624]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030bc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80030c0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80030c4:	fa92 f2a2 	rbit	r2, r2
 80030c8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80030cc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80030d0:	fab2 f282 	clz	r2, r2
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	f042 0220 	orr.w	r2, r2, #32
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	f002 021f 	and.w	r2, r2, #31
 80030e0:	2101      	movs	r1, #1
 80030e2:	fa01 f202 	lsl.w	r2, r1, r2
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 811f 	beq.w	800332c <HAL_RCC_OscConfig+0x334>
 80030ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 8116 	bne.w	800332c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f000 bfaf 	b.w	8004064 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003116:	d106      	bne.n	8003126 <HAL_RCC_OscConfig+0x12e>
 8003118:	4b83      	ldr	r3, [pc, #524]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a82      	ldr	r2, [pc, #520]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 800311e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	e036      	b.n	8003194 <HAL_RCC_OscConfig+0x19c>
 8003126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0x158>
 8003136:	4b7c      	ldr	r3, [pc, #496]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a7b      	ldr	r2, [pc, #492]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 800313c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	4b79      	ldr	r3, [pc, #484]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a78      	ldr	r2, [pc, #480]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 8003148:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e021      	b.n	8003194 <HAL_RCC_OscConfig+0x19c>
 8003150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003154:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0x184>
 8003162:	4b71      	ldr	r3, [pc, #452]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a70      	ldr	r2, [pc, #448]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 8003168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	4b6e      	ldr	r3, [pc, #440]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a6d      	ldr	r2, [pc, #436]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 8003174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0x19c>
 800317c:	4b6a      	ldr	r3, [pc, #424]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a69      	ldr	r2, [pc, #420]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 8003182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b67      	ldr	r3, [pc, #412]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a66      	ldr	r2, [pc, #408]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 800318e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003192:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003194:	4b64      	ldr	r3, [pc, #400]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	f023 020f 	bic.w	r2, r3, #15
 800319c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	495f      	ldr	r1, [pc, #380]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d059      	beq.n	8003272 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7fd ff97 	bl	80010f0 <HAL_GetTick>
 80031c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	e00a      	b.n	80031de <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fd ff92 	bl	80010f0 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b64      	cmp	r3, #100	@ 0x64
 80031d6:	d902      	bls.n	80031de <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	f000 bf43 	b.w	8004064 <HAL_RCC_OscConfig+0x106c>
 80031de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031e2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80031f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	d102      	bne.n	8003210 <HAL_RCC_OscConfig+0x218>
 800320a:	4b47      	ldr	r3, [pc, #284]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	e015      	b.n	800323c <HAL_RCC_OscConfig+0x244>
 8003210:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003214:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003224:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003228:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800322c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003230:	fa93 f3a3 	rbit	r3, r3
 8003234:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003238:	4b3b      	ldr	r3, [pc, #236]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003240:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003244:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003248:	fa92 f2a2 	rbit	r2, r2
 800324c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003250:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003254:	fab2 f282 	clz	r2, r2
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	f042 0220 	orr.w	r2, r2, #32
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	f002 021f 	and.w	r2, r2, #31
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f202 	lsl.w	r2, r1, r2
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ab      	beq.n	80031c8 <HAL_RCC_OscConfig+0x1d0>
 8003270:	e05d      	b.n	800332e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fd ff3d 	bl	80010f0 <HAL_GetTick>
 8003276:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327a:	e00a      	b.n	8003292 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800327c:	f7fd ff38 	bl	80010f0 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b64      	cmp	r3, #100	@ 0x64
 800328a:	d902      	bls.n	8003292 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	f000 bee9 	b.w	8004064 <HAL_RCC_OscConfig+0x106c>
 8003292:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003296:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80032a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032aa:	fab3 f383 	clz	r3, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d102      	bne.n	80032c4 <HAL_RCC_OscConfig+0x2cc>
 80032be:	4b1a      	ldr	r3, [pc, #104]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	e015      	b.n	80032f0 <HAL_RCC_OscConfig+0x2f8>
 80032c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032c8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80032d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032dc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80032e0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80032ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003328 <HAL_RCC_OscConfig+0x330>)
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032f4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80032f8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80032fc:	fa92 f2a2 	rbit	r2, r2
 8003300:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003304:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003308:	fab2 f282 	clz	r2, r2
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	f042 0220 	orr.w	r2, r2, #32
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	f002 021f 	and.w	r2, r2, #31
 8003318:	2101      	movs	r1, #1
 800331a:	fa01 f202 	lsl.w	r2, r1, r2
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ab      	bne.n	800327c <HAL_RCC_OscConfig+0x284>
 8003324:	e003      	b.n	800332e <HAL_RCC_OscConfig+0x336>
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003332:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 817d 	beq.w	800363e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003344:	4ba6      	ldr	r3, [pc, #664]	@ (80035e0 <HAL_RCC_OscConfig+0x5e8>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00b      	beq.n	8003368 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003350:	4ba3      	ldr	r3, [pc, #652]	@ (80035e0 <HAL_RCC_OscConfig+0x5e8>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b08      	cmp	r3, #8
 800335a:	d172      	bne.n	8003442 <HAL_RCC_OscConfig+0x44a>
 800335c:	4ba0      	ldr	r3, [pc, #640]	@ (80035e0 <HAL_RCC_OscConfig+0x5e8>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d16c      	bne.n	8003442 <HAL_RCC_OscConfig+0x44a>
 8003368:	2302      	movs	r3, #2
 800336a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800337a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d102      	bne.n	8003398 <HAL_RCC_OscConfig+0x3a0>
 8003392:	4b93      	ldr	r3, [pc, #588]	@ (80035e0 <HAL_RCC_OscConfig+0x5e8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	e013      	b.n	80033c0 <HAL_RCC_OscConfig+0x3c8>
 8003398:	2302      	movs	r3, #2
 800339a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80033aa:	2302      	movs	r3, #2
 80033ac:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80033b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80033bc:	4b88      	ldr	r3, [pc, #544]	@ (80035e0 <HAL_RCC_OscConfig+0x5e8>)
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	2202      	movs	r2, #2
 80033c2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80033c6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80033ca:	fa92 f2a2 	rbit	r2, r2
 80033ce:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80033d2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80033d6:	fab2 f282 	clz	r2, r2
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	f042 0220 	orr.w	r2, r2, #32
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	f002 021f 	and.w	r2, r2, #31
 80033e6:	2101      	movs	r1, #1
 80033e8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCC_OscConfig+0x410>
 80033f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d002      	beq.n	8003408 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f000 be2e 	b.w	8004064 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003408:	4b75      	ldr	r3, [pc, #468]	@ (80035e0 <HAL_RCC_OscConfig+0x5e8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003414:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	21f8      	movs	r1, #248	@ 0xf8
 800341e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003426:	fa91 f1a1 	rbit	r1, r1
 800342a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800342e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003432:	fab1 f181 	clz	r1, r1
 8003436:	b2c9      	uxtb	r1, r1
 8003438:	408b      	lsls	r3, r1
 800343a:	4969      	ldr	r1, [pc, #420]	@ (80035e0 <HAL_RCC_OscConfig+0x5e8>)
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003440:	e0fd      	b.n	800363e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003446:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 8088 	beq.w	8003564 <HAL_RCC_OscConfig+0x56c>
 8003454:	2301      	movs	r3, #1
 8003456:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003466:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003474:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	461a      	mov	r2, r3
 800347c:	2301      	movs	r3, #1
 800347e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7fd fe36 	bl	80010f0 <HAL_GetTick>
 8003484:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348a:	f7fd fe31 	bl	80010f0 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d902      	bls.n	80034a0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	f000 bde2 	b.w	8004064 <HAL_RCC_OscConfig+0x106c>
 80034a0:	2302      	movs	r3, #2
 80034a2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80034b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d102      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4d8>
 80034ca:	4b45      	ldr	r3, [pc, #276]	@ (80035e0 <HAL_RCC_OscConfig+0x5e8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	e013      	b.n	80034f8 <HAL_RCC_OscConfig+0x500>
 80034d0:	2302      	movs	r3, #2
 80034d2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80034da:	fa93 f3a3 	rbit	r3, r3
 80034de:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80034e2:	2302      	movs	r3, #2
 80034e4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80034e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80034f4:	4b3a      	ldr	r3, [pc, #232]	@ (80035e0 <HAL_RCC_OscConfig+0x5e8>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f8:	2202      	movs	r2, #2
 80034fa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80034fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003502:	fa92 f2a2 	rbit	r2, r2
 8003506:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800350a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800350e:	fab2 f282 	clz	r2, r2
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	f042 0220 	orr.w	r2, r2, #32
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	f002 021f 	and.w	r2, r2, #31
 800351e:	2101      	movs	r1, #1
 8003520:	fa01 f202 	lsl.w	r2, r1, r2
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0af      	beq.n	800348a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352a:	4b2d      	ldr	r3, [pc, #180]	@ (80035e0 <HAL_RCC_OscConfig+0x5e8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	21f8      	movs	r1, #248	@ 0xf8
 8003540:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003548:	fa91 f1a1 	rbit	r1, r1
 800354c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003550:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003554:	fab1 f181 	clz	r1, r1
 8003558:	b2c9      	uxtb	r1, r1
 800355a:	408b      	lsls	r3, r1
 800355c:	4920      	ldr	r1, [pc, #128]	@ (80035e0 <HAL_RCC_OscConfig+0x5e8>)
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
 8003562:	e06c      	b.n	800363e <HAL_RCC_OscConfig+0x646>
 8003564:	2301      	movs	r3, #1
 8003566:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003576:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003584:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	461a      	mov	r2, r3
 800358c:	2300      	movs	r3, #0
 800358e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fd fdae 	bl	80010f0 <HAL_GetTick>
 8003594:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003598:	e00a      	b.n	80035b0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800359a:	f7fd fda9 	bl	80010f0 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d902      	bls.n	80035b0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	f000 bd5a 	b.w	8004064 <HAL_RCC_OscConfig+0x106c>
 80035b0:	2302      	movs	r3, #2
 80035b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80035c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d104      	bne.n	80035e4 <HAL_RCC_OscConfig+0x5ec>
 80035da:	4b01      	ldr	r3, [pc, #4]	@ (80035e0 <HAL_RCC_OscConfig+0x5e8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	e015      	b.n	800360c <HAL_RCC_OscConfig+0x614>
 80035e0:	40021000 	.word	0x40021000
 80035e4:	2302      	movs	r3, #2
 80035e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80035f6:	2302      	movs	r3, #2
 80035f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80035fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003608:	4bc8      	ldr	r3, [pc, #800]	@ (800392c <HAL_RCC_OscConfig+0x934>)
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	2202      	movs	r2, #2
 800360e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003612:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003616:	fa92 f2a2 	rbit	r2, r2
 800361a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800361e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003622:	fab2 f282 	clz	r2, r2
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	f042 0220 	orr.w	r2, r2, #32
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	f002 021f 	and.w	r2, r2, #31
 8003632:	2101      	movs	r1, #1
 8003634:	fa01 f202 	lsl.w	r2, r1, r2
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ad      	bne.n	800359a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003642:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8110 	beq.w	8003874 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003658:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d079      	beq.n	8003758 <HAL_RCC_OscConfig+0x760>
 8003664:	2301      	movs	r3, #1
 8003666:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	4bab      	ldr	r3, [pc, #684]	@ (8003930 <HAL_RCC_OscConfig+0x938>)
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	461a      	mov	r2, r3
 800368a:	2301      	movs	r3, #1
 800368c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368e:	f7fd fd2f 	bl	80010f0 <HAL_GetTick>
 8003692:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	e00a      	b.n	80036ae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003698:	f7fd fd2a 	bl	80010f0 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d902      	bls.n	80036ae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	f000 bcdb 	b.w	8004064 <HAL_RCC_OscConfig+0x106c>
 80036ae:	2302      	movs	r3, #2
 80036b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80036c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80036c8:	2202      	movs	r2, #2
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	fa93 f2a3 	rbit	r2, r3
 80036da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036ec:	2202      	movs	r2, #2
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	fa93 f2a3 	rbit	r2, r3
 80036fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003702:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003706:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003708:	4b88      	ldr	r3, [pc, #544]	@ (800392c <HAL_RCC_OscConfig+0x934>)
 800370a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800370c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003710:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003714:	2102      	movs	r1, #2
 8003716:	6019      	str	r1, [r3, #0]
 8003718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	fa93 f1a3 	rbit	r1, r3
 8003726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800372e:	6019      	str	r1, [r3, #0]
  return result;
 8003730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003734:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	2101      	movs	r1, #1
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	4013      	ands	r3, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0a0      	beq.n	8003698 <HAL_RCC_OscConfig+0x6a0>
 8003756:	e08d      	b.n	8003874 <HAL_RCC_OscConfig+0x87c>
 8003758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003760:	2201      	movs	r2, #1
 8003762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003768:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	fa93 f2a3 	rbit	r2, r3
 8003772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003776:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800377a:	601a      	str	r2, [r3, #0]
  return result;
 800377c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003780:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003784:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	4b68      	ldr	r3, [pc, #416]	@ (8003930 <HAL_RCC_OscConfig+0x938>)
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	461a      	mov	r2, r3
 8003796:	2300      	movs	r3, #0
 8003798:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379a:	f7fd fca9 	bl	80010f0 <HAL_GetTick>
 800379e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a4:	f7fd fca4 	bl	80010f0 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d902      	bls.n	80037ba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	f000 bc55 	b.w	8004064 <HAL_RCC_OscConfig+0x106c>
 80037ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80037c2:	2202      	movs	r2, #2
 80037c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	fa93 f2a3 	rbit	r2, r3
 80037d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80037e6:	2202      	movs	r2, #2
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	fa93 f2a3 	rbit	r2, r3
 80037f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003806:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800380a:	2202      	movs	r2, #2
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003812:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	fa93 f2a3 	rbit	r2, r3
 800381c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003820:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003824:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003826:	4b41      	ldr	r3, [pc, #260]	@ (800392c <HAL_RCC_OscConfig+0x934>)
 8003828:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800382a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003832:	2102      	movs	r1, #2
 8003834:	6019      	str	r1, [r3, #0]
 8003836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	fa93 f1a3 	rbit	r1, r3
 8003844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003848:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800384c:	6019      	str	r1, [r3, #0]
  return result;
 800384e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003852:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	fab3 f383 	clz	r3, r3
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	2101      	movs	r1, #1
 800386a:	fa01 f303 	lsl.w	r3, r1, r3
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d197      	bne.n	80037a4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003878:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 81a1 	beq.w	8003bcc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003890:	4b26      	ldr	r3, [pc, #152]	@ (800392c <HAL_RCC_OscConfig+0x934>)
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d116      	bne.n	80038ca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800389c:	4b23      	ldr	r3, [pc, #140]	@ (800392c <HAL_RCC_OscConfig+0x934>)
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	4a22      	ldr	r2, [pc, #136]	@ (800392c <HAL_RCC_OscConfig+0x934>)
 80038a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a6:	61d3      	str	r3, [r2, #28]
 80038a8:	4b20      	ldr	r3, [pc, #128]	@ (800392c <HAL_RCC_OscConfig+0x934>)
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80038b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038be:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80038c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003934 <HAL_RCC_OscConfig+0x93c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d11a      	bne.n	800390c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038d6:	4b17      	ldr	r3, [pc, #92]	@ (8003934 <HAL_RCC_OscConfig+0x93c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a16      	ldr	r2, [pc, #88]	@ (8003934 <HAL_RCC_OscConfig+0x93c>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e2:	f7fd fc05 	bl	80010f0 <HAL_GetTick>
 80038e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ea:	e009      	b.n	8003900 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ec:	f7fd fc00 	bl	80010f0 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b64      	cmp	r3, #100	@ 0x64
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e3b1      	b.n	8004064 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <HAL_RCC_OscConfig+0x93c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0ef      	beq.n	80038ec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003910:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10d      	bne.n	8003938 <HAL_RCC_OscConfig+0x940>
 800391c:	4b03      	ldr	r3, [pc, #12]	@ (800392c <HAL_RCC_OscConfig+0x934>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	4a02      	ldr	r2, [pc, #8]	@ (800392c <HAL_RCC_OscConfig+0x934>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6213      	str	r3, [r2, #32]
 8003928:	e03c      	b.n	80039a4 <HAL_RCC_OscConfig+0x9ac>
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
 8003930:	10908120 	.word	0x10908120
 8003934:	40007000 	.word	0x40007000
 8003938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10c      	bne.n	8003962 <HAL_RCC_OscConfig+0x96a>
 8003948:	4bc1      	ldr	r3, [pc, #772]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4ac0      	ldr	r2, [pc, #768]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	6213      	str	r3, [r2, #32]
 8003954:	4bbe      	ldr	r3, [pc, #760]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	4abd      	ldr	r2, [pc, #756]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 800395a:	f023 0304 	bic.w	r3, r3, #4
 800395e:	6213      	str	r3, [r2, #32]
 8003960:	e020      	b.n	80039a4 <HAL_RCC_OscConfig+0x9ac>
 8003962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003966:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2b05      	cmp	r3, #5
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0x994>
 8003972:	4bb7      	ldr	r3, [pc, #732]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	4ab6      	ldr	r2, [pc, #728]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 8003978:	f043 0304 	orr.w	r3, r3, #4
 800397c:	6213      	str	r3, [r2, #32]
 800397e:	4bb4      	ldr	r3, [pc, #720]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	4ab3      	ldr	r2, [pc, #716]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6213      	str	r3, [r2, #32]
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0x9ac>
 800398c:	4bb0      	ldr	r3, [pc, #704]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	4aaf      	ldr	r2, [pc, #700]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	6213      	str	r3, [r2, #32]
 8003998:	4bad      	ldr	r3, [pc, #692]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4aac      	ldr	r2, [pc, #688]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 800399e:	f023 0304 	bic.w	r3, r3, #4
 80039a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8081 	beq.w	8003ab8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b6:	f7fd fb9b 	bl	80010f0 <HAL_GetTick>
 80039ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039be:	e00b      	b.n	80039d8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c0:	f7fd fb96 	bl	80010f0 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e345      	b.n	8004064 <HAL_RCC_OscConfig+0x106c>
 80039d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80039e0:	2202      	movs	r2, #2
 80039e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	fa93 f2a3 	rbit	r2, r3
 80039f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a00:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003a04:	2202      	movs	r2, #2
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	fa93 f2a3 	rbit	r2, r3
 8003a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a1a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003a1e:	601a      	str	r2, [r3, #0]
  return result;
 8003a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a24:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003a28:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f043 0302 	orr.w	r3, r3, #2
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d102      	bne.n	8003a44 <HAL_RCC_OscConfig+0xa4c>
 8003a3e:	4b84      	ldr	r3, [pc, #528]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	e013      	b.n	8003a6c <HAL_RCC_OscConfig+0xa74>
 8003a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a48:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a54:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	fa93 f2a3 	rbit	r2, r3
 8003a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a62:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	4b79      	ldr	r3, [pc, #484]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a70:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003a74:	2102      	movs	r1, #2
 8003a76:	6011      	str	r1, [r2, #0]
 8003a78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a7c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	fa92 f1a2 	rbit	r1, r2
 8003a86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a8a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a8e:	6011      	str	r1, [r2, #0]
  return result;
 8003a90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a94:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	fab2 f282 	clz	r2, r2
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	f002 021f 	and.w	r2, r2, #31
 8003aaa:	2101      	movs	r1, #1
 8003aac:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d084      	beq.n	80039c0 <HAL_RCC_OscConfig+0x9c8>
 8003ab6:	e07f      	b.n	8003bb8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab8:	f7fd fb1a 	bl	80010f0 <HAL_GetTick>
 8003abc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac0:	e00b      	b.n	8003ada <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac2:	f7fd fb15 	bl	80010f0 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e2c4      	b.n	8004064 <HAL_RCC_OscConfig+0x106c>
 8003ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ade:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	fa93 f2a3 	rbit	r2, r3
 8003af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b02:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003b06:	2202      	movs	r2, #2
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	fa93 f2a3 	rbit	r2, r3
 8003b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b1c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003b20:	601a      	str	r2, [r3, #0]
  return result;
 8003b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b26:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003b2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f043 0302 	orr.w	r3, r3, #2
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d102      	bne.n	8003b46 <HAL_RCC_OscConfig+0xb4e>
 8003b40:	4b43      	ldr	r3, [pc, #268]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	e013      	b.n	8003b6e <HAL_RCC_OscConfig+0xb76>
 8003b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b4a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003b4e:	2202      	movs	r2, #2
 8003b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b56:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	fa93 f2a3 	rbit	r2, r3
 8003b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b64:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	4b39      	ldr	r3, [pc, #228]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b72:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003b76:	2102      	movs	r1, #2
 8003b78:	6011      	str	r1, [r2, #0]
 8003b7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b7e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	fa92 f1a2 	rbit	r1, r2
 8003b88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b8c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b90:	6011      	str	r1, [r2, #0]
  return result;
 8003b92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b96:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	fab2 f282 	clz	r2, r2
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	f002 021f 	and.w	r2, r2, #31
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d184      	bne.n	8003ac2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bb8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d105      	bne.n	8003bcc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc0:	4b23      	ldr	r3, [pc, #140]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	4a22      	ldr	r2, [pc, #136]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 8003bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8242 	beq.w	8004062 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bde:	4b1c      	ldr	r3, [pc, #112]	@ (8003c50 <HAL_RCC_OscConfig+0xc58>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	f000 8213 	beq.w	8004012 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	f040 8162 	bne.w	8003ec2 <HAL_RCC_OscConfig+0xeca>
 8003bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c02:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003c06:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c10:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	fa93 f2a3 	rbit	r2, r3
 8003c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003c22:	601a      	str	r2, [r3, #0]
  return result;
 8003c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c28:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003c2c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2e:	fab3 f383 	clz	r3, r3
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c38:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2300      	movs	r3, #0
 8003c42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7fd fa54 	bl	80010f0 <HAL_GetTick>
 8003c48:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4c:	e00c      	b.n	8003c68 <HAL_RCC_OscConfig+0xc70>
 8003c4e:	bf00      	nop
 8003c50:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fd fa4c 	bl	80010f0 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e1fd      	b.n	8004064 <HAL_RCC_OscConfig+0x106c>
 8003c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c7a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	fa93 f2a3 	rbit	r2, r3
 8003c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c88:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c8c:	601a      	str	r2, [r3, #0]
  return result;
 8003c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c92:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c98:	fab3 f383 	clz	r3, r3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d102      	bne.n	8003cb2 <HAL_RCC_OscConfig+0xcba>
 8003cac:	4bb0      	ldr	r3, [pc, #704]	@ (8003f70 <HAL_RCC_OscConfig+0xf78>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	e027      	b.n	8003d02 <HAL_RCC_OscConfig+0xd0a>
 8003cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003cba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	fa93 f2a3 	rbit	r2, r3
 8003cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cdc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003ce0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cea:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	fa93 f2a3 	rbit	r2, r3
 8003cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	4b9c      	ldr	r3, [pc, #624]	@ (8003f70 <HAL_RCC_OscConfig+0xf78>)
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d06:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003d0a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003d0e:	6011      	str	r1, [r2, #0]
 8003d10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d14:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	fa92 f1a2 	rbit	r1, r2
 8003d1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d22:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003d26:	6011      	str	r1, [r2, #0]
  return result;
 8003d28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d2c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	fab2 f282 	clz	r2, r2
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	f042 0220 	orr.w	r2, r2, #32
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	f002 021f 	and.w	r2, r2, #31
 8003d42:	2101      	movs	r1, #1
 8003d44:	fa01 f202 	lsl.w	r2, r1, r2
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d182      	bne.n	8003c54 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d4e:	4b88      	ldr	r3, [pc, #544]	@ (8003f70 <HAL_RCC_OscConfig+0xf78>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	497f      	ldr	r1, [pc, #508]	@ (8003f70 <HAL_RCC_OscConfig+0xf78>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	604b      	str	r3, [r1, #4]
 8003d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d7a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003d7e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d88:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	fa93 f2a3 	rbit	r2, r3
 8003d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d96:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003d9a:	601a      	str	r2, [r3, #0]
  return result;
 8003d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003da4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003db0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	461a      	mov	r2, r3
 8003db8:	2301      	movs	r3, #1
 8003dba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fd f998 	bl	80010f0 <HAL_GetTick>
 8003dc0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dc4:	e009      	b.n	8003dda <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc6:	f7fd f993 	bl	80010f0 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e144      	b.n	8004064 <HAL_RCC_OscConfig+0x106c>
 8003dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dde:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003de2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dec:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	fa93 f2a3 	rbit	r2, r3
 8003df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003dfe:	601a      	str	r2, [r3, #0]
  return result;
 8003e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e04:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003e08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e0a:	fab3 f383 	clz	r3, r3
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d102      	bne.n	8003e24 <HAL_RCC_OscConfig+0xe2c>
 8003e1e:	4b54      	ldr	r3, [pc, #336]	@ (8003f70 <HAL_RCC_OscConfig+0xf78>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	e027      	b.n	8003e74 <HAL_RCC_OscConfig+0xe7c>
 8003e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e28:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003e2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e36:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	fa93 f2a3 	rbit	r2, r3
 8003e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e44:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e4e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003e52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e5c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	fa93 f2a3 	rbit	r2, r3
 8003e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	4b3f      	ldr	r3, [pc, #252]	@ (8003f70 <HAL_RCC_OscConfig+0xf78>)
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e78:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003e7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e80:	6011      	str	r1, [r2, #0]
 8003e82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e86:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	fa92 f1a2 	rbit	r1, r2
 8003e90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e94:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003e98:	6011      	str	r1, [r2, #0]
  return result;
 8003e9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e9e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	fab2 f282 	clz	r2, r2
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	f042 0220 	orr.w	r2, r2, #32
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	f002 021f 	and.w	r2, r2, #31
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d082      	beq.n	8003dc6 <HAL_RCC_OscConfig+0xdce>
 8003ec0:	e0cf      	b.n	8004062 <HAL_RCC_OscConfig+0x106a>
 8003ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003eca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	fa93 f2a3 	rbit	r2, r3
 8003ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003ee6:	601a      	str	r2, [r3, #0]
  return result;
 8003ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003ef0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef2:	fab3 f383 	clz	r3, r3
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003efc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	461a      	mov	r2, r3
 8003f04:	2300      	movs	r3, #0
 8003f06:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fd f8f2 	bl	80010f0 <HAL_GetTick>
 8003f0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f10:	e009      	b.n	8003f26 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f12:	f7fd f8ed 	bl	80010f0 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e09e      	b.n	8004064 <HAL_RCC_OscConfig+0x106c>
 8003f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f2a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003f2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f38:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	fa93 f2a3 	rbit	r2, r3
 8003f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f46:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003f4a:	601a      	str	r2, [r3, #0]
  return result;
 8003f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f50:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003f54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d104      	bne.n	8003f74 <HAL_RCC_OscConfig+0xf7c>
 8003f6a:	4b01      	ldr	r3, [pc, #4]	@ (8003f70 <HAL_RCC_OscConfig+0xf78>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	e029      	b.n	8003fc4 <HAL_RCC_OscConfig+0xfcc>
 8003f70:	40021000 	.word	0x40021000
 8003f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f78:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f86:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	fa93 f2a3 	rbit	r2, r3
 8003f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f94:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f9e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003fa2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fac:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	fa93 f2a3 	rbit	r2, r3
 8003fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004070 <HAL_RCC_OscConfig+0x1078>)
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fc8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003fcc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003fd0:	6011      	str	r1, [r2, #0]
 8003fd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fd6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	fa92 f1a2 	rbit	r1, r2
 8003fe0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fe4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003fe8:	6011      	str	r1, [r2, #0]
  return result;
 8003fea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fee:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	fab2 f282 	clz	r2, r2
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	f042 0220 	orr.w	r2, r2, #32
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	f002 021f 	and.w	r2, r2, #31
 8004004:	2101      	movs	r1, #1
 8004006:	fa01 f202 	lsl.w	r2, r1, r2
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d180      	bne.n	8003f12 <HAL_RCC_OscConfig+0xf1a>
 8004010:	e027      	b.n	8004062 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004016:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e01e      	b.n	8004064 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004026:	4b12      	ldr	r3, [pc, #72]	@ (8004070 <HAL_RCC_OscConfig+0x1078>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800402e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004032:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	429a      	cmp	r2, r3
 8004044:	d10b      	bne.n	800405e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004046:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800404a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800404e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004052:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800405a:	429a      	cmp	r2, r3
 800405c:	d001      	beq.n	8004062 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40021000 	.word	0x40021000

08004074 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b09e      	sub	sp, #120	@ 0x78
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e162      	b.n	8004352 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800408c:	4b90      	ldr	r3, [pc, #576]	@ (80042d0 <HAL_RCC_ClockConfig+0x25c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d910      	bls.n	80040bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	4b8d      	ldr	r3, [pc, #564]	@ (80042d0 <HAL_RCC_ClockConfig+0x25c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 0207 	bic.w	r2, r3, #7
 80040a2:	498b      	ldr	r1, [pc, #556]	@ (80042d0 <HAL_RCC_ClockConfig+0x25c>)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b89      	ldr	r3, [pc, #548]	@ (80042d0 <HAL_RCC_ClockConfig+0x25c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e14a      	b.n	8004352 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c8:	4b82      	ldr	r3, [pc, #520]	@ (80042d4 <HAL_RCC_ClockConfig+0x260>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	497f      	ldr	r1, [pc, #508]	@ (80042d4 <HAL_RCC_ClockConfig+0x260>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80dc 	beq.w	80042a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d13c      	bne.n	800416a <HAL_RCC_ClockConfig+0xf6>
 80040f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040f4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040f8:	fa93 f3a3 	rbit	r3, r3
 80040fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80040fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004100:	fab3 f383 	clz	r3, r3
 8004104:	b2db      	uxtb	r3, r3
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d102      	bne.n	800411a <HAL_RCC_ClockConfig+0xa6>
 8004114:	4b6f      	ldr	r3, [pc, #444]	@ (80042d4 <HAL_RCC_ClockConfig+0x260>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	e00f      	b.n	800413a <HAL_RCC_ClockConfig+0xc6>
 800411a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800411e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004120:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004122:	fa93 f3a3 	rbit	r3, r3
 8004126:	667b      	str	r3, [r7, #100]	@ 0x64
 8004128:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800412c:	663b      	str	r3, [r7, #96]	@ 0x60
 800412e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004130:	fa93 f3a3 	rbit	r3, r3
 8004134:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004136:	4b67      	ldr	r3, [pc, #412]	@ (80042d4 <HAL_RCC_ClockConfig+0x260>)
 8004138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800413e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004140:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004142:	fa92 f2a2 	rbit	r2, r2
 8004146:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004148:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800414a:	fab2 f282 	clz	r2, r2
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	f042 0220 	orr.w	r2, r2, #32
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	f002 021f 	and.w	r2, r2, #31
 800415a:	2101      	movs	r1, #1
 800415c:	fa01 f202 	lsl.w	r2, r1, r2
 8004160:	4013      	ands	r3, r2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d17b      	bne.n	800425e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e0f3      	b.n	8004352 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d13c      	bne.n	80041ec <HAL_RCC_ClockConfig+0x178>
 8004172:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004176:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800417a:	fa93 f3a3 	rbit	r3, r3
 800417e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004182:	fab3 f383 	clz	r3, r3
 8004186:	b2db      	uxtb	r3, r3
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	d102      	bne.n	800419c <HAL_RCC_ClockConfig+0x128>
 8004196:	4b4f      	ldr	r3, [pc, #316]	@ (80042d4 <HAL_RCC_ClockConfig+0x260>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	e00f      	b.n	80041bc <HAL_RCC_ClockConfig+0x148>
 800419c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80041b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b2:	fa93 f3a3 	rbit	r3, r3
 80041b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041b8:	4b46      	ldr	r3, [pc, #280]	@ (80042d4 <HAL_RCC_ClockConfig+0x260>)
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041c0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80041c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041c4:	fa92 f2a2 	rbit	r2, r2
 80041c8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80041ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041cc:	fab2 f282 	clz	r2, r2
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	f042 0220 	orr.w	r2, r2, #32
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	f002 021f 	and.w	r2, r2, #31
 80041dc:	2101      	movs	r1, #1
 80041de:	fa01 f202 	lsl.w	r2, r1, r2
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d13a      	bne.n	800425e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0b2      	b.n	8004352 <HAL_RCC_ClockConfig+0x2de>
 80041ec:	2302      	movs	r3, #2
 80041ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80041f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fa:	fab3 f383 	clz	r3, r3
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d102      	bne.n	8004214 <HAL_RCC_ClockConfig+0x1a0>
 800420e:	4b31      	ldr	r3, [pc, #196]	@ (80042d4 <HAL_RCC_ClockConfig+0x260>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	e00d      	b.n	8004230 <HAL_RCC_ClockConfig+0x1bc>
 8004214:	2302      	movs	r3, #2
 8004216:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004220:	2302      	movs	r3, #2
 8004222:	623b      	str	r3, [r7, #32]
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	fa93 f3a3 	rbit	r3, r3
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	4b29      	ldr	r3, [pc, #164]	@ (80042d4 <HAL_RCC_ClockConfig+0x260>)
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	2202      	movs	r2, #2
 8004232:	61ba      	str	r2, [r7, #24]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	fa92 f2a2 	rbit	r2, r2
 800423a:	617a      	str	r2, [r7, #20]
  return result;
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	fab2 f282 	clz	r2, r2
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	f042 0220 	orr.w	r2, r2, #32
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	f002 021f 	and.w	r2, r2, #31
 800424e:	2101      	movs	r1, #1
 8004250:	fa01 f202 	lsl.w	r2, r1, r2
 8004254:	4013      	ands	r3, r2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e079      	b.n	8004352 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800425e:	4b1d      	ldr	r3, [pc, #116]	@ (80042d4 <HAL_RCC_ClockConfig+0x260>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f023 0203 	bic.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	491a      	ldr	r1, [pc, #104]	@ (80042d4 <HAL_RCC_ClockConfig+0x260>)
 800426c:	4313      	orrs	r3, r2
 800426e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004270:	f7fc ff3e 	bl	80010f0 <HAL_GetTick>
 8004274:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004276:	e00a      	b.n	800428e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004278:	f7fc ff3a 	bl	80010f0 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e061      	b.n	8004352 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428e:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <HAL_RCC_ClockConfig+0x260>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 020c 	and.w	r2, r3, #12
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	429a      	cmp	r2, r3
 800429e:	d1eb      	bne.n	8004278 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a0:	4b0b      	ldr	r3, [pc, #44]	@ (80042d0 <HAL_RCC_ClockConfig+0x25c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d214      	bcs.n	80042d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b08      	ldr	r3, [pc, #32]	@ (80042d0 <HAL_RCC_ClockConfig+0x25c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 0207 	bic.w	r2, r3, #7
 80042b6:	4906      	ldr	r1, [pc, #24]	@ (80042d0 <HAL_RCC_ClockConfig+0x25c>)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042be:	4b04      	ldr	r3, [pc, #16]	@ (80042d0 <HAL_RCC_ClockConfig+0x25c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e040      	b.n	8004352 <HAL_RCC_ClockConfig+0x2de>
 80042d0:	40022000 	.word	0x40022000
 80042d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e4:	4b1d      	ldr	r3, [pc, #116]	@ (800435c <HAL_RCC_ClockConfig+0x2e8>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	491a      	ldr	r1, [pc, #104]	@ (800435c <HAL_RCC_ClockConfig+0x2e8>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004302:	4b16      	ldr	r3, [pc, #88]	@ (800435c <HAL_RCC_ClockConfig+0x2e8>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4912      	ldr	r1, [pc, #72]	@ (800435c <HAL_RCC_ClockConfig+0x2e8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004316:	f000 f829 	bl	800436c <HAL_RCC_GetSysClockFreq>
 800431a:	4601      	mov	r1, r0
 800431c:	4b0f      	ldr	r3, [pc, #60]	@ (800435c <HAL_RCC_ClockConfig+0x2e8>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004324:	22f0      	movs	r2, #240	@ 0xf0
 8004326:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	fa92 f2a2 	rbit	r2, r2
 800432e:	60fa      	str	r2, [r7, #12]
  return result;
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	fab2 f282 	clz	r2, r2
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	40d3      	lsrs	r3, r2
 800433a:	4a09      	ldr	r2, [pc, #36]	@ (8004360 <HAL_RCC_ClockConfig+0x2ec>)
 800433c:	5cd3      	ldrb	r3, [r2, r3]
 800433e:	fa21 f303 	lsr.w	r3, r1, r3
 8004342:	4a08      	ldr	r2, [pc, #32]	@ (8004364 <HAL_RCC_ClockConfig+0x2f0>)
 8004344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004346:	4b08      	ldr	r3, [pc, #32]	@ (8004368 <HAL_RCC_ClockConfig+0x2f4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fc fe8c 	bl	8001068 <HAL_InitTick>
  
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3778      	adds	r7, #120	@ 0x78
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40021000 	.word	0x40021000
 8004360:	08007bd0 	.word	0x08007bd0
 8004364:	20000000 	.word	0x20000000
 8004368:	20000004 	.word	0x20000004

0800436c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	2300      	movs	r3, #0
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	2300      	movs	r3, #0
 8004380:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004386:	4b1e      	ldr	r3, [pc, #120]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x94>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b04      	cmp	r3, #4
 8004394:	d002      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0x30>
 8004396:	2b08      	cmp	r3, #8
 8004398:	d003      	beq.n	80043a2 <HAL_RCC_GetSysClockFreq+0x36>
 800439a:	e026      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800439c:	4b19      	ldr	r3, [pc, #100]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x98>)
 800439e:	613b      	str	r3, [r7, #16]
      break;
 80043a0:	e026      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	0c9b      	lsrs	r3, r3, #18
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	4a17      	ldr	r2, [pc, #92]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043ac:	5cd3      	ldrb	r3, [r2, r3]
 80043ae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80043b0:	4b13      	ldr	r3, [pc, #76]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x94>)
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	4a14      	ldr	r2, [pc, #80]	@ (800440c <HAL_RCC_GetSysClockFreq+0xa0>)
 80043ba:	5cd3      	ldrb	r3, [r2, r3]
 80043bc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x98>)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	e004      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004410 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043de:	fb02 f303 	mul.w	r3, r2, r3
 80043e2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	613b      	str	r3, [r7, #16]
      break;
 80043e8:	e002      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043ea:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x98>)
 80043ec:	613b      	str	r3, [r7, #16]
      break;
 80043ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f0:	693b      	ldr	r3, [r7, #16]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40021000 	.word	0x40021000
 8004404:	007a1200 	.word	0x007a1200
 8004408:	08007be8 	.word	0x08007be8
 800440c:	08007bf8 	.word	0x08007bf8
 8004410:	003d0900 	.word	0x003d0900

08004414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004418:	4b03      	ldr	r3, [pc, #12]	@ (8004428 <HAL_RCC_GetHCLKFreq+0x14>)
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000000 	.word	0x20000000

0800442c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004432:	f7ff ffef 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8004436:	4601      	mov	r1, r0
 8004438:	4b0b      	ldr	r3, [pc, #44]	@ (8004468 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004440:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004444:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	fa92 f2a2 	rbit	r2, r2
 800444c:	603a      	str	r2, [r7, #0]
  return result;
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	fab2 f282 	clz	r2, r2
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	40d3      	lsrs	r3, r2
 8004458:	4a04      	ldr	r2, [pc, #16]	@ (800446c <HAL_RCC_GetPCLK1Freq+0x40>)
 800445a:	5cd3      	ldrb	r3, [r2, r3]
 800445c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	08007be0 	.word	0x08007be0

08004470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004476:	f7ff ffcd 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 800447a:	4601      	mov	r1, r0
 800447c:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004484:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004488:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	fa92 f2a2 	rbit	r2, r2
 8004490:	603a      	str	r2, [r7, #0]
  return result;
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	fab2 f282 	clz	r2, r2
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	40d3      	lsrs	r3, r2
 800449c:	4a04      	ldr	r2, [pc, #16]	@ (80044b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800449e:	5cd3      	ldrb	r3, [r2, r3]
 80044a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	08007be0 	.word	0x08007be0

080044b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b092      	sub	sp, #72	@ 0x48
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 80d4 	beq.w	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10e      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	4a4a      	ldr	r2, [pc, #296]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ee:	61d3      	str	r3, [r2, #28]
 80044f0:	4b48      	ldr	r3, [pc, #288]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004502:	4b45      	ldr	r3, [pc, #276]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d118      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800450e:	4b42      	ldr	r3, [pc, #264]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a41      	ldr	r2, [pc, #260]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004518:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800451a:	f7fc fde9 	bl	80010f0 <HAL_GetTick>
 800451e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004520:	e008      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004522:	f7fc fde5 	bl	80010f0 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b64      	cmp	r3, #100	@ 0x64
 800452e:	d901      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e169      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004534:	4b38      	ldr	r3, [pc, #224]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004540:	4b34      	ldr	r3, [pc, #208]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004548:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800454a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8084 	beq.w	800465a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800455a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800455c:	429a      	cmp	r2, r3
 800455e:	d07c      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004560:	4b2c      	ldr	r3, [pc, #176]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800456a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800456e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004572:	fa93 f3a3 	rbit	r3, r3
 8004576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800457a:	fab3 f383 	clz	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	4b26      	ldr	r3, [pc, #152]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	461a      	mov	r2, r3
 800458a:	2301      	movs	r3, #1
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004592:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004596:	fa93 f3a3 	rbit	r3, r3
 800459a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800459c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800459e:	fab3 f383 	clz	r3, r3
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	4b1d      	ldr	r3, [pc, #116]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	461a      	mov	r2, r3
 80045ae:	2300      	movs	r3, #0
 80045b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045b2:	4a18      	ldr	r2, [pc, #96]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d04b      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c2:	f7fc fd95 	bl	80010f0 <HAL_GetTick>
 80045c6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7fc fd91 	bl	80010f0 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e113      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80045e0:	2302      	movs	r3, #2
 80045e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e6:	fa93 f3a3 	rbit	r3, r3
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ec:	2302      	movs	r3, #2
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	fa93 f3a3 	rbit	r3, r3
 80045f6:	61fb      	str	r3, [r7, #28]
  return result;
 80045f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fa:	fab3 f383 	clz	r3, r3
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f043 0302 	orr.w	r3, r3, #2
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d108      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800460e:	4b01      	ldr	r3, [pc, #4]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	e00d      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004614:	40021000 	.word	0x40021000
 8004618:	40007000 	.word	0x40007000
 800461c:	10908100 	.word	0x10908100
 8004620:	2302      	movs	r3, #2
 8004622:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	fa93 f3a3 	rbit	r3, r3
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	4b78      	ldr	r3, [pc, #480]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	2202      	movs	r2, #2
 8004632:	613a      	str	r2, [r7, #16]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	fa92 f2a2 	rbit	r2, r2
 800463a:	60fa      	str	r2, [r7, #12]
  return result;
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	fab2 f282 	clz	r2, r2
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	f002 021f 	and.w	r2, r2, #31
 800464e:	2101      	movs	r1, #1
 8004650:	fa01 f202 	lsl.w	r2, r1, r2
 8004654:	4013      	ands	r3, r2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0b7      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800465a:	4b6d      	ldr	r3, [pc, #436]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	496a      	ldr	r1, [pc, #424]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004668:	4313      	orrs	r3, r2
 800466a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800466c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004670:	2b01      	cmp	r3, #1
 8004672:	d105      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004674:	4b66      	ldr	r3, [pc, #408]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	4a65      	ldr	r2, [pc, #404]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800467a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800467e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800468c:	4b60      	ldr	r3, [pc, #384]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004690:	f023 0203 	bic.w	r2, r3, #3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	495d      	ldr	r1, [pc, #372]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800469a:	4313      	orrs	r3, r2
 800469c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046aa:	4b59      	ldr	r3, [pc, #356]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	4956      	ldr	r1, [pc, #344]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046c8:	4b51      	ldr	r3, [pc, #324]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	494e      	ldr	r1, [pc, #312]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d008      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ea:	f023 0210 	bic.w	r2, r3, #16
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	4947      	ldr	r1, [pc, #284]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004704:	4b42      	ldr	r3, [pc, #264]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004710:	493f      	ldr	r1, [pc, #252]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004712:	4313      	orrs	r3, r2
 8004714:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004722:	4b3b      	ldr	r3, [pc, #236]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004726:	f023 0220 	bic.w	r2, r3, #32
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	4938      	ldr	r1, [pc, #224]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004730:	4313      	orrs	r3, r2
 8004732:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004740:	4b33      	ldr	r3, [pc, #204]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004744:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	4930      	ldr	r1, [pc, #192]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800474e:	4313      	orrs	r3, r2
 8004750:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	d008      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800475e:	4b2c      	ldr	r3, [pc, #176]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004762:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	4929      	ldr	r1, [pc, #164]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800476c:	4313      	orrs	r3, r2
 800476e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800477c:	4b24      	ldr	r3, [pc, #144]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	4921      	ldr	r1, [pc, #132]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800478a:	4313      	orrs	r3, r2
 800478c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	d008      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800479a:	4b1d      	ldr	r3, [pc, #116]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	491a      	ldr	r1, [pc, #104]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80047b8:	4b15      	ldr	r3, [pc, #84]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047bc:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c4:	4912      	ldr	r1, [pc, #72]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d008      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e2:	490b      	ldr	r1, [pc, #44]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80047f4:	4b06      	ldr	r3, [pc, #24]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004800:	4903      	ldr	r1, [pc, #12]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004802:	4313      	orrs	r3, r2
 8004804:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3748      	adds	r7, #72	@ 0x48
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000

08004814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e049      	b.n	80048ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fc fa00 	bl	8000c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3304      	adds	r3, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f000 fc5e 	bl	8005114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e049      	b.n	8004968 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d106      	bne.n	80048ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7fc f9c7 	bl	8000c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f000 fc07 	bl	8005114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d109      	bne.n	8004994 <HAL_TIM_PWM_Start+0x24>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	bf14      	ite	ne
 800498c:	2301      	movne	r3, #1
 800498e:	2300      	moveq	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	e03c      	b.n	8004a0e <HAL_TIM_PWM_Start+0x9e>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b04      	cmp	r3, #4
 8004998:	d109      	bne.n	80049ae <HAL_TIM_PWM_Start+0x3e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	bf14      	ite	ne
 80049a6:	2301      	movne	r3, #1
 80049a8:	2300      	moveq	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	e02f      	b.n	8004a0e <HAL_TIM_PWM_Start+0x9e>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d109      	bne.n	80049c8 <HAL_TIM_PWM_Start+0x58>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	bf14      	ite	ne
 80049c0:	2301      	movne	r3, #1
 80049c2:	2300      	moveq	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	e022      	b.n	8004a0e <HAL_TIM_PWM_Start+0x9e>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b0c      	cmp	r3, #12
 80049cc:	d109      	bne.n	80049e2 <HAL_TIM_PWM_Start+0x72>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	bf14      	ite	ne
 80049da:	2301      	movne	r3, #1
 80049dc:	2300      	moveq	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	e015      	b.n	8004a0e <HAL_TIM_PWM_Start+0x9e>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d109      	bne.n	80049fc <HAL_TIM_PWM_Start+0x8c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e008      	b.n	8004a0e <HAL_TIM_PWM_Start+0x9e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	bf14      	ite	ne
 8004a08:	2301      	movne	r3, #1
 8004a0a:	2300      	moveq	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e097      	b.n	8004b46 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_PWM_Start+0xb6>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a24:	e023      	b.n	8004a6e <HAL_TIM_PWM_Start+0xfe>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_PWM_Start+0xc6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a34:	e01b      	b.n	8004a6e <HAL_TIM_PWM_Start+0xfe>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_PWM_Start+0xd6>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a44:	e013      	b.n	8004a6e <HAL_TIM_PWM_Start+0xfe>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start+0xe6>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a54:	e00b      	b.n	8004a6e <HAL_TIM_PWM_Start+0xfe>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start+0xf6>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a64:	e003      	b.n	8004a6e <HAL_TIM_PWM_Start+0xfe>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2201      	movs	r2, #1
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 f876 	bl	8005b68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a33      	ldr	r2, [pc, #204]	@ (8004b50 <HAL_TIM_PWM_Start+0x1e0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <HAL_TIM_PWM_Start+0x13e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a32      	ldr	r2, [pc, #200]	@ (8004b54 <HAL_TIM_PWM_Start+0x1e4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00e      	beq.n	8004aae <HAL_TIM_PWM_Start+0x13e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a30      	ldr	r2, [pc, #192]	@ (8004b58 <HAL_TIM_PWM_Start+0x1e8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_TIM_PWM_Start+0x13e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8004b5c <HAL_TIM_PWM_Start+0x1ec>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d004      	beq.n	8004aae <HAL_TIM_PWM_Start+0x13e>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a2d      	ldr	r2, [pc, #180]	@ (8004b60 <HAL_TIM_PWM_Start+0x1f0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d101      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0x142>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <HAL_TIM_PWM_Start+0x144>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ac6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a20      	ldr	r2, [pc, #128]	@ (8004b50 <HAL_TIM_PWM_Start+0x1e0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d018      	beq.n	8004b04 <HAL_TIM_PWM_Start+0x194>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ada:	d013      	beq.n	8004b04 <HAL_TIM_PWM_Start+0x194>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a20      	ldr	r2, [pc, #128]	@ (8004b64 <HAL_TIM_PWM_Start+0x1f4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00e      	beq.n	8004b04 <HAL_TIM_PWM_Start+0x194>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1f      	ldr	r2, [pc, #124]	@ (8004b68 <HAL_TIM_PWM_Start+0x1f8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d009      	beq.n	8004b04 <HAL_TIM_PWM_Start+0x194>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a17      	ldr	r2, [pc, #92]	@ (8004b54 <HAL_TIM_PWM_Start+0x1e4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <HAL_TIM_PWM_Start+0x194>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a16      	ldr	r2, [pc, #88]	@ (8004b58 <HAL_TIM_PWM_Start+0x1e8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d115      	bne.n	8004b30 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	4b18      	ldr	r3, [pc, #96]	@ (8004b6c <HAL_TIM_PWM_Start+0x1fc>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b06      	cmp	r3, #6
 8004b14:	d015      	beq.n	8004b42 <HAL_TIM_PWM_Start+0x1d2>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b1c:	d011      	beq.n	8004b42 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2e:	e008      	b.n	8004b42 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e000      	b.n	8004b44 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40013400 	.word	0x40013400
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800
 8004b64:	40000400 	.word	0x40000400
 8004b68:	40000800 	.word	0x40000800
 8004b6c:	00010007 	.word	0x00010007

08004b70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e049      	b.n	8004c16 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fc f890 	bl	8000cbc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f000 fab0 	bl	8005114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b086      	sub	sp, #24
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e088      	b.n	8004d4e <HAL_TIM_IC_ConfigChannel+0x130>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d11b      	bne.n	8004c82 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004c5a:	f000 fdcd 	bl	80057f8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 020c 	bic.w	r2, r2, #12
 8004c6c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6999      	ldr	r1, [r3, #24]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	619a      	str	r2, [r3, #24]
 8004c80:	e060      	b.n	8004d44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d11c      	bne.n	8004cc2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004c98:	f000 fe45 	bl	8005926 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004caa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6999      	ldr	r1, [r3, #24]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	021a      	lsls	r2, r3, #8
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	619a      	str	r2, [r3, #24]
 8004cc0:	e040      	b.n	8004d44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d11b      	bne.n	8004d00 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004cd8:	f000 fe92 	bl	8005a00 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69da      	ldr	r2, [r3, #28]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 020c 	bic.w	r2, r2, #12
 8004cea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	69d9      	ldr	r1, [r3, #28]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	61da      	str	r2, [r3, #28]
 8004cfe:	e021      	b.n	8004d44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b0c      	cmp	r3, #12
 8004d04:	d11c      	bne.n	8004d40 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004d16:	f000 feaf 	bl	8005a78 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004d28:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69d9      	ldr	r1, [r3, #28]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	021a      	lsls	r2, r3, #8
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	61da      	str	r2, [r3, #28]
 8004d3e:	e001      	b.n	8004d44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d101      	bne.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d72:	2302      	movs	r3, #2
 8004d74:	e0ff      	b.n	8004f76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b14      	cmp	r3, #20
 8004d82:	f200 80f0 	bhi.w	8004f66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d86:	a201      	add	r2, pc, #4	@ (adr r2, 8004d8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004de1 	.word	0x08004de1
 8004d90:	08004f67 	.word	0x08004f67
 8004d94:	08004f67 	.word	0x08004f67
 8004d98:	08004f67 	.word	0x08004f67
 8004d9c:	08004e21 	.word	0x08004e21
 8004da0:	08004f67 	.word	0x08004f67
 8004da4:	08004f67 	.word	0x08004f67
 8004da8:	08004f67 	.word	0x08004f67
 8004dac:	08004e63 	.word	0x08004e63
 8004db0:	08004f67 	.word	0x08004f67
 8004db4:	08004f67 	.word	0x08004f67
 8004db8:	08004f67 	.word	0x08004f67
 8004dbc:	08004ea3 	.word	0x08004ea3
 8004dc0:	08004f67 	.word	0x08004f67
 8004dc4:	08004f67 	.word	0x08004f67
 8004dc8:	08004f67 	.word	0x08004f67
 8004dcc:	08004ee5 	.word	0x08004ee5
 8004dd0:	08004f67 	.word	0x08004f67
 8004dd4:	08004f67 	.word	0x08004f67
 8004dd8:	08004f67 	.word	0x08004f67
 8004ddc:	08004f25 	.word	0x08004f25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fa30 	bl	800524c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0208 	orr.w	r2, r2, #8
 8004dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0204 	bic.w	r2, r2, #4
 8004e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6999      	ldr	r1, [r3, #24]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	619a      	str	r2, [r3, #24]
      break;
 8004e1e:	e0a5      	b.n	8004f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 faa0 	bl	800536c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6999      	ldr	r1, [r3, #24]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	021a      	lsls	r2, r3, #8
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	619a      	str	r2, [r3, #24]
      break;
 8004e60:	e084      	b.n	8004f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fb09 	bl	8005480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69da      	ldr	r2, [r3, #28]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0208 	orr.w	r2, r2, #8
 8004e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0204 	bic.w	r2, r2, #4
 8004e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69d9      	ldr	r1, [r3, #28]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	61da      	str	r2, [r3, #28]
      break;
 8004ea0:	e064      	b.n	8004f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fb71 	bl	8005590 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69d9      	ldr	r1, [r3, #28]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	021a      	lsls	r2, r3, #8
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	61da      	str	r2, [r3, #28]
      break;
 8004ee2:	e043      	b.n	8004f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fbba 	bl	8005664 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0208 	orr.w	r2, r2, #8
 8004efe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0204 	bic.w	r2, r2, #4
 8004f0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f22:	e023      	b.n	8004f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fbfe 	bl	800572c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f3e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f4e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	021a      	lsls	r2, r3, #8
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f64:	e002      	b.n	8004f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop

08004f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_TIM_ConfigClockSource+0x1c>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e0b6      	b.n	800510a <HAL_TIM_ConfigClockSource+0x18a>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd8:	d03e      	beq.n	8005058 <HAL_TIM_ConfigClockSource+0xd8>
 8004fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fde:	f200 8087 	bhi.w	80050f0 <HAL_TIM_ConfigClockSource+0x170>
 8004fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fe6:	f000 8086 	beq.w	80050f6 <HAL_TIM_ConfigClockSource+0x176>
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fee:	d87f      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x170>
 8004ff0:	2b70      	cmp	r3, #112	@ 0x70
 8004ff2:	d01a      	beq.n	800502a <HAL_TIM_ConfigClockSource+0xaa>
 8004ff4:	2b70      	cmp	r3, #112	@ 0x70
 8004ff6:	d87b      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x170>
 8004ff8:	2b60      	cmp	r3, #96	@ 0x60
 8004ffa:	d050      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x11e>
 8004ffc:	2b60      	cmp	r3, #96	@ 0x60
 8004ffe:	d877      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x170>
 8005000:	2b50      	cmp	r3, #80	@ 0x50
 8005002:	d03c      	beq.n	800507e <HAL_TIM_ConfigClockSource+0xfe>
 8005004:	2b50      	cmp	r3, #80	@ 0x50
 8005006:	d873      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x170>
 8005008:	2b40      	cmp	r3, #64	@ 0x40
 800500a:	d058      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x13e>
 800500c:	2b40      	cmp	r3, #64	@ 0x40
 800500e:	d86f      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x170>
 8005010:	2b30      	cmp	r3, #48	@ 0x30
 8005012:	d064      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15e>
 8005014:	2b30      	cmp	r3, #48	@ 0x30
 8005016:	d86b      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x170>
 8005018:	2b20      	cmp	r3, #32
 800501a:	d060      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15e>
 800501c:	2b20      	cmp	r3, #32
 800501e:	d867      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x170>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d05c      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15e>
 8005024:	2b10      	cmp	r3, #16
 8005026:	d05a      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15e>
 8005028:	e062      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800503a:	f000 fd75 	bl	8005b28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800504c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	609a      	str	r2, [r3, #8]
      break;
 8005056:	e04f      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005068:	f000 fd5e 	bl	8005b28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800507a:	609a      	str	r2, [r3, #8]
      break;
 800507c:	e03c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800508a:	461a      	mov	r2, r3
 800508c:	f000 fc1c 	bl	80058c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2150      	movs	r1, #80	@ 0x50
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fd2b 	bl	8005af2 <TIM_ITRx_SetConfig>
      break;
 800509c:	e02c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050aa:	461a      	mov	r2, r3
 80050ac:	f000 fc78 	bl	80059a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2160      	movs	r1, #96	@ 0x60
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fd1b 	bl	8005af2 <TIM_ITRx_SetConfig>
      break;
 80050bc:	e01c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ca:	461a      	mov	r2, r3
 80050cc:	f000 fbfc 	bl	80058c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2140      	movs	r1, #64	@ 0x40
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fd0b 	bl	8005af2 <TIM_ITRx_SetConfig>
      break;
 80050dc:	e00c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4619      	mov	r1, r3
 80050e8:	4610      	mov	r0, r2
 80050ea:	f000 fd02 	bl	8005af2 <TIM_ITRx_SetConfig>
      break;
 80050ee:	e003      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
      break;
 80050f4:	e000      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a42      	ldr	r2, [pc, #264]	@ (8005230 <TIM_Base_SetConfig+0x11c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00f      	beq.n	800514c <TIM_Base_SetConfig+0x38>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005132:	d00b      	beq.n	800514c <TIM_Base_SetConfig+0x38>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a3f      	ldr	r2, [pc, #252]	@ (8005234 <TIM_Base_SetConfig+0x120>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <TIM_Base_SetConfig+0x38>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a3e      	ldr	r2, [pc, #248]	@ (8005238 <TIM_Base_SetConfig+0x124>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_Base_SetConfig+0x38>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a3d      	ldr	r2, [pc, #244]	@ (800523c <TIM_Base_SetConfig+0x128>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d108      	bne.n	800515e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a33      	ldr	r2, [pc, #204]	@ (8005230 <TIM_Base_SetConfig+0x11c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01b      	beq.n	800519e <TIM_Base_SetConfig+0x8a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800516c:	d017      	beq.n	800519e <TIM_Base_SetConfig+0x8a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a30      	ldr	r2, [pc, #192]	@ (8005234 <TIM_Base_SetConfig+0x120>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d013      	beq.n	800519e <TIM_Base_SetConfig+0x8a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2f      	ldr	r2, [pc, #188]	@ (8005238 <TIM_Base_SetConfig+0x124>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00f      	beq.n	800519e <TIM_Base_SetConfig+0x8a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2e      	ldr	r2, [pc, #184]	@ (800523c <TIM_Base_SetConfig+0x128>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00b      	beq.n	800519e <TIM_Base_SetConfig+0x8a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a2d      	ldr	r2, [pc, #180]	@ (8005240 <TIM_Base_SetConfig+0x12c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d007      	beq.n	800519e <TIM_Base_SetConfig+0x8a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2c      	ldr	r2, [pc, #176]	@ (8005244 <TIM_Base_SetConfig+0x130>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d003      	beq.n	800519e <TIM_Base_SetConfig+0x8a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2b      	ldr	r2, [pc, #172]	@ (8005248 <TIM_Base_SetConfig+0x134>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d108      	bne.n	80051b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a16      	ldr	r2, [pc, #88]	@ (8005230 <TIM_Base_SetConfig+0x11c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00f      	beq.n	80051fc <TIM_Base_SetConfig+0xe8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a17      	ldr	r2, [pc, #92]	@ (800523c <TIM_Base_SetConfig+0x128>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00b      	beq.n	80051fc <TIM_Base_SetConfig+0xe8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a16      	ldr	r2, [pc, #88]	@ (8005240 <TIM_Base_SetConfig+0x12c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d007      	beq.n	80051fc <TIM_Base_SetConfig+0xe8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a15      	ldr	r2, [pc, #84]	@ (8005244 <TIM_Base_SetConfig+0x130>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_Base_SetConfig+0xe8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a14      	ldr	r2, [pc, #80]	@ (8005248 <TIM_Base_SetConfig+0x134>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d103      	bne.n	8005204 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b01      	cmp	r3, #1
 8005214:	d105      	bne.n	8005222 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f023 0201 	bic.w	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	611a      	str	r2, [r3, #16]
  }
}
 8005222:	bf00      	nop
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800
 800523c:	40013400 	.word	0x40013400
 8005240:	40014000 	.word	0x40014000
 8005244:	40014400 	.word	0x40014400
 8005248:	40014800 	.word	0x40014800

0800524c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	f023 0201 	bic.w	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800527a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800527e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f023 0302 	bic.w	r3, r3, #2
 8005298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005358 <TIM_OC1_SetConfig+0x10c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00f      	beq.n	80052cc <TIM_OC1_SetConfig+0x80>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a2b      	ldr	r2, [pc, #172]	@ (800535c <TIM_OC1_SetConfig+0x110>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00b      	beq.n	80052cc <TIM_OC1_SetConfig+0x80>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005360 <TIM_OC1_SetConfig+0x114>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d007      	beq.n	80052cc <TIM_OC1_SetConfig+0x80>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a29      	ldr	r2, [pc, #164]	@ (8005364 <TIM_OC1_SetConfig+0x118>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_OC1_SetConfig+0x80>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a28      	ldr	r2, [pc, #160]	@ (8005368 <TIM_OC1_SetConfig+0x11c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d10c      	bne.n	80052e6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f023 0308 	bic.w	r3, r3, #8
 80052d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f023 0304 	bic.w	r3, r3, #4
 80052e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005358 <TIM_OC1_SetConfig+0x10c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00f      	beq.n	800530e <TIM_OC1_SetConfig+0xc2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a1a      	ldr	r2, [pc, #104]	@ (800535c <TIM_OC1_SetConfig+0x110>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00b      	beq.n	800530e <TIM_OC1_SetConfig+0xc2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a19      	ldr	r2, [pc, #100]	@ (8005360 <TIM_OC1_SetConfig+0x114>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d007      	beq.n	800530e <TIM_OC1_SetConfig+0xc2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a18      	ldr	r2, [pc, #96]	@ (8005364 <TIM_OC1_SetConfig+0x118>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_OC1_SetConfig+0xc2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a17      	ldr	r2, [pc, #92]	@ (8005368 <TIM_OC1_SetConfig+0x11c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d111      	bne.n	8005332 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800531c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	621a      	str	r2, [r3, #32]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40013400 	.word	0x40013400
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800

0800536c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f023 0210 	bic.w	r2, r3, #16
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800539a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800539e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f023 0320 	bic.w	r3, r3, #32
 80053ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a28      	ldr	r2, [pc, #160]	@ (800546c <TIM_OC2_SetConfig+0x100>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d003      	beq.n	80053d8 <TIM_OC2_SetConfig+0x6c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a27      	ldr	r2, [pc, #156]	@ (8005470 <TIM_OC2_SetConfig+0x104>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d10d      	bne.n	80053f4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a1d      	ldr	r2, [pc, #116]	@ (800546c <TIM_OC2_SetConfig+0x100>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00f      	beq.n	800541c <TIM_OC2_SetConfig+0xb0>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005470 <TIM_OC2_SetConfig+0x104>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00b      	beq.n	800541c <TIM_OC2_SetConfig+0xb0>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a1b      	ldr	r2, [pc, #108]	@ (8005474 <TIM_OC2_SetConfig+0x108>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d007      	beq.n	800541c <TIM_OC2_SetConfig+0xb0>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a1a      	ldr	r2, [pc, #104]	@ (8005478 <TIM_OC2_SetConfig+0x10c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d003      	beq.n	800541c <TIM_OC2_SetConfig+0xb0>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a19      	ldr	r2, [pc, #100]	@ (800547c <TIM_OC2_SetConfig+0x110>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d113      	bne.n	8005444 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005422:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800542a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	621a      	str	r2, [r3, #32]
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40012c00 	.word	0x40012c00
 8005470:	40013400 	.word	0x40013400
 8005474:	40014000 	.word	0x40014000
 8005478:	40014400 	.word	0x40014400
 800547c:	40014800 	.word	0x40014800

08005480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a27      	ldr	r2, [pc, #156]	@ (800557c <TIM_OC3_SetConfig+0xfc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_OC3_SetConfig+0x6a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a26      	ldr	r2, [pc, #152]	@ (8005580 <TIM_OC3_SetConfig+0x100>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d10d      	bne.n	8005506 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	021b      	lsls	r3, r3, #8
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005504:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a1c      	ldr	r2, [pc, #112]	@ (800557c <TIM_OC3_SetConfig+0xfc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00f      	beq.n	800552e <TIM_OC3_SetConfig+0xae>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a1b      	ldr	r2, [pc, #108]	@ (8005580 <TIM_OC3_SetConfig+0x100>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00b      	beq.n	800552e <TIM_OC3_SetConfig+0xae>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a1a      	ldr	r2, [pc, #104]	@ (8005584 <TIM_OC3_SetConfig+0x104>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d007      	beq.n	800552e <TIM_OC3_SetConfig+0xae>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a19      	ldr	r2, [pc, #100]	@ (8005588 <TIM_OC3_SetConfig+0x108>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d003      	beq.n	800552e <TIM_OC3_SetConfig+0xae>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a18      	ldr	r2, [pc, #96]	@ (800558c <TIM_OC3_SetConfig+0x10c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d113      	bne.n	8005556 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800553c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	621a      	str	r2, [r3, #32]
}
 8005570:	bf00      	nop
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40012c00 	.word	0x40012c00
 8005580:	40013400 	.word	0x40013400
 8005584:	40014000 	.word	0x40014000
 8005588:	40014400 	.word	0x40014400
 800558c:	40014800 	.word	0x40014800

08005590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	031b      	lsls	r3, r3, #12
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a18      	ldr	r2, [pc, #96]	@ (8005650 <TIM_OC4_SetConfig+0xc0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00f      	beq.n	8005614 <TIM_OC4_SetConfig+0x84>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a17      	ldr	r2, [pc, #92]	@ (8005654 <TIM_OC4_SetConfig+0xc4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00b      	beq.n	8005614 <TIM_OC4_SetConfig+0x84>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a16      	ldr	r2, [pc, #88]	@ (8005658 <TIM_OC4_SetConfig+0xc8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d007      	beq.n	8005614 <TIM_OC4_SetConfig+0x84>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a15      	ldr	r2, [pc, #84]	@ (800565c <TIM_OC4_SetConfig+0xcc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_OC4_SetConfig+0x84>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a14      	ldr	r2, [pc, #80]	@ (8005660 <TIM_OC4_SetConfig+0xd0>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d109      	bne.n	8005628 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800561a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	019b      	lsls	r3, r3, #6
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40013400 	.word	0x40013400
 8005658:	40014000 	.word	0x40014000
 800565c:	40014400 	.word	0x40014400
 8005660:	40014800 	.word	0x40014800

08005664 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80056a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	041b      	lsls	r3, r3, #16
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a17      	ldr	r2, [pc, #92]	@ (8005718 <TIM_OC5_SetConfig+0xb4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00f      	beq.n	80056de <TIM_OC5_SetConfig+0x7a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a16      	ldr	r2, [pc, #88]	@ (800571c <TIM_OC5_SetConfig+0xb8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00b      	beq.n	80056de <TIM_OC5_SetConfig+0x7a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a15      	ldr	r2, [pc, #84]	@ (8005720 <TIM_OC5_SetConfig+0xbc>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d007      	beq.n	80056de <TIM_OC5_SetConfig+0x7a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a14      	ldr	r2, [pc, #80]	@ (8005724 <TIM_OC5_SetConfig+0xc0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d003      	beq.n	80056de <TIM_OC5_SetConfig+0x7a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a13      	ldr	r2, [pc, #76]	@ (8005728 <TIM_OC5_SetConfig+0xc4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d109      	bne.n	80056f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	621a      	str	r2, [r3, #32]
}
 800570c:	bf00      	nop
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	40012c00 	.word	0x40012c00
 800571c:	40013400 	.word	0x40013400
 8005720:	40014000 	.word	0x40014000
 8005724:	40014400 	.word	0x40014400
 8005728:	40014800 	.word	0x40014800

0800572c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800575a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800575e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	051b      	lsls	r3, r3, #20
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a18      	ldr	r2, [pc, #96]	@ (80057e4 <TIM_OC6_SetConfig+0xb8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00f      	beq.n	80057a8 <TIM_OC6_SetConfig+0x7c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a17      	ldr	r2, [pc, #92]	@ (80057e8 <TIM_OC6_SetConfig+0xbc>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00b      	beq.n	80057a8 <TIM_OC6_SetConfig+0x7c>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a16      	ldr	r2, [pc, #88]	@ (80057ec <TIM_OC6_SetConfig+0xc0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d007      	beq.n	80057a8 <TIM_OC6_SetConfig+0x7c>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a15      	ldr	r2, [pc, #84]	@ (80057f0 <TIM_OC6_SetConfig+0xc4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_OC6_SetConfig+0x7c>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a14      	ldr	r2, [pc, #80]	@ (80057f4 <TIM_OC6_SetConfig+0xc8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d109      	bne.n	80057bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	029b      	lsls	r3, r3, #10
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40012c00 	.word	0x40012c00
 80057e8:	40013400 	.word	0x40013400
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800

080057f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f023 0201 	bic.w	r2, r3, #1
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4a24      	ldr	r2, [pc, #144]	@ (80058b4 <TIM_TI1_SetConfig+0xbc>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <TIM_TI1_SetConfig+0x56>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800582c:	d00f      	beq.n	800584e <TIM_TI1_SetConfig+0x56>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4a21      	ldr	r2, [pc, #132]	@ (80058b8 <TIM_TI1_SetConfig+0xc0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00b      	beq.n	800584e <TIM_TI1_SetConfig+0x56>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4a20      	ldr	r2, [pc, #128]	@ (80058bc <TIM_TI1_SetConfig+0xc4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d007      	beq.n	800584e <TIM_TI1_SetConfig+0x56>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4a1f      	ldr	r2, [pc, #124]	@ (80058c0 <TIM_TI1_SetConfig+0xc8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d003      	beq.n	800584e <TIM_TI1_SetConfig+0x56>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4a1e      	ldr	r2, [pc, #120]	@ (80058c4 <TIM_TI1_SetConfig+0xcc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d101      	bne.n	8005852 <TIM_TI1_SetConfig+0x5a>
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <TIM_TI1_SetConfig+0x5c>
 8005852:	2300      	movs	r3, #0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f023 0303 	bic.w	r3, r3, #3
 800585e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	e003      	b.n	8005872 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f043 0301 	orr.w	r3, r3, #1
 8005870:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005878:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	b2db      	uxtb	r3, r3
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f023 030a 	bic.w	r3, r3, #10
 800588c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f003 030a 	and.w	r3, r3, #10
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40012c00 	.word	0x40012c00
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40000800 	.word	0x40000800
 80058c0:	40013400 	.word	0x40013400
 80058c4:	40014000 	.word	0x40014000

080058c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	f023 0201 	bic.w	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f023 030a 	bic.w	r3, r3, #10
 8005904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005926:	b480      	push	{r7}
 8005928:	b087      	sub	sp, #28
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	607a      	str	r2, [r7, #4]
 8005932:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f023 0210 	bic.w	r2, r3, #16
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	021b      	lsls	r3, r3, #8
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	031b      	lsls	r3, r3, #12
 800596a:	b29b      	uxth	r3, r3
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005978:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	621a      	str	r2, [r3, #32]
}
 8005994:	bf00      	nop
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f023 0210 	bic.w	r2, r3, #16
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	031b      	lsls	r3, r3, #12
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]
}
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f023 0303 	bic.w	r3, r3, #3
 8005a2c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005a50:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	621a      	str	r2, [r3, #32]
}
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aa4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ab6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	031b      	lsls	r3, r3, #12
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005aca:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	031b      	lsls	r3, r3, #12
 8005ad0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	621a      	str	r2, [r3, #32]
}
 8005ae6:	bf00      	nop
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b085      	sub	sp, #20
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f043 0307 	orr.w	r3, r3, #7
 8005b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	609a      	str	r2, [r3, #8]
}
 8005b1c:	bf00      	nop
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	021a      	lsls	r2, r3, #8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	609a      	str	r2, [r3, #8]
}
 8005b5c:	bf00      	nop
 8005b5e:	371c      	adds	r7, #28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a1a      	ldr	r2, [r3, #32]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	401a      	ands	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a1a      	ldr	r2, [r3, #32]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f003 031f 	and.w	r3, r3, #31
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
	...

08005bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e063      	b.n	8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d004      	beq.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d108      	bne.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d018      	beq.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c3e:	d013      	beq.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a18      	ldr	r2, [pc, #96]	@ (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00e      	beq.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a17      	ldr	r2, [pc, #92]	@ (8005cac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d009      	beq.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a12      	ldr	r2, [pc, #72]	@ (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d004      	beq.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a13      	ldr	r2, [pc, #76]	@ (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d10c      	bne.n	8005c82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	40012c00 	.word	0x40012c00
 8005ca4:	40013400 	.word	0x40013400
 8005ca8:	40000400 	.word	0x40000400
 8005cac:	40000800 	.word	0x40000800
 8005cb0:	40014000 	.word	0x40014000

08005cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e040      	b.n	8005d48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fb f86a 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2224      	movs	r2, #36	@ 0x24
 8005ce0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0201 	bic.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fdd0 	bl	80068a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fbf9 	bl	80064f8 <UART_SetConfig>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e01b      	b.n	8005d48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fe4f 	bl	80069e4 <UART_CheckIdleState>
 8005d46:	4603      	mov	r3, r0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08a      	sub	sp, #40	@ 0x28
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d177      	bne.n	8005e58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_UART_Transmit+0x24>
 8005d6e:	88fb      	ldrh	r3, [r7, #6]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e070      	b.n	8005e5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2221      	movs	r2, #33	@ 0x21
 8005d84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d86:	f7fb f9b3 	bl	80010f0 <HAL_GetTick>
 8005d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	88fa      	ldrh	r2, [r7, #6]
 8005d90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005da4:	d108      	bne.n	8005db8 <HAL_UART_Transmit+0x68>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d104      	bne.n	8005db8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	61bb      	str	r3, [r7, #24]
 8005db6:	e003      	b.n	8005dc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005dc0:	e02f      	b.n	8005e22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2180      	movs	r1, #128	@ 0x80
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 feb1 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d004      	beq.n	8005de2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e03b      	b.n	8005e5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10b      	bne.n	8005e00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	881a      	ldrh	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005df4:	b292      	uxth	r2, r2
 8005df6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	61bb      	str	r3, [r7, #24]
 8005dfe:	e007      	b.n	8005e10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	781a      	ldrb	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1c9      	bne.n	8005dc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2200      	movs	r2, #0
 8005e36:	2140      	movs	r1, #64	@ 0x40
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fe7b 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d004      	beq.n	8005e4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e005      	b.n	8005e5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2220      	movs	r2, #32
 8005e52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	e000      	b.n	8005e5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005e58:	2302      	movs	r3, #2
  }
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b08a      	sub	sp, #40	@ 0x28
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d132      	bne.n	8005ee0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_UART_Receive_IT+0x24>
 8005e80:	88fb      	ldrh	r3, [r7, #6]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e02b      	b.n	8005ee2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d018      	beq.n	8005ed0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	623b      	str	r3, [r7, #32]
 8005ebe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	69f9      	ldr	r1, [r7, #28]
 8005ec2:	6a3a      	ldr	r2, [r7, #32]
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e6      	bne.n	8005e9e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fe9a 	bl	8006c10 <UART_Start_Receive_IT>
 8005edc:	4603      	mov	r3, r0
 8005ede:	e000      	b.n	8005ee2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005ee0:	2302      	movs	r3, #2
  }
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3728      	adds	r7, #40	@ 0x28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b0ba      	sub	sp, #232	@ 0xe8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005f16:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d115      	bne.n	8005f54 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00f      	beq.n	8005f54 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d009      	beq.n	8005f54 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 82ab 	beq.w	80064a0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	4798      	blx	r3
      }
      return;
 8005f52:	e2a5      	b.n	80064a0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 8117 	beq.w	800618c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005f6e:	4b85      	ldr	r3, [pc, #532]	@ (8006184 <HAL_UART_IRQHandler+0x298>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 810a 	beq.w	800618c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d011      	beq.n	8005fa8 <HAL_UART_IRQHandler+0xbc>
 8005f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2201      	movs	r2, #1
 8005f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f9e:	f043 0201 	orr.w	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d011      	beq.n	8005fd8 <HAL_UART_IRQHandler+0xec>
 8005fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fce:	f043 0204 	orr.w	r2, r3, #4
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d011      	beq.n	8006008 <HAL_UART_IRQHandler+0x11c>
 8005fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00b      	beq.n	8006008 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ffe:	f043 0202 	orr.w	r2, r3, #2
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d017      	beq.n	8006044 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b00      	cmp	r3, #0
 800601e:	d105      	bne.n	800602c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006024:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00b      	beq.n	8006044 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2208      	movs	r2, #8
 8006032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800603a:	f043 0208 	orr.w	r2, r3, #8
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800604c:	2b00      	cmp	r3, #0
 800604e:	d012      	beq.n	8006076 <HAL_UART_IRQHandler+0x18a>
 8006050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006054:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00c      	beq.n	8006076 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006064:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800606c:	f043 0220 	orr.w	r2, r3, #32
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8211 	beq.w	80064a4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00d      	beq.n	80060aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800608e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060be:	2b40      	cmp	r3, #64	@ 0x40
 80060c0:	d005      	beq.n	80060ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d04f      	beq.n	800616e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fe52 	bl	8006d78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060de:	2b40      	cmp	r3, #64	@ 0x40
 80060e0:	d141      	bne.n	8006166 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3308      	adds	r3, #8
 80060e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80060f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006100:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3308      	adds	r3, #8
 800610a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800610e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006112:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800611a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1d9      	bne.n	80060e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006132:	2b00      	cmp	r3, #0
 8006134:	d013      	beq.n	800615e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800613a:	4a13      	ldr	r2, [pc, #76]	@ (8006188 <HAL_UART_IRQHandler+0x29c>)
 800613c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006142:	4618      	mov	r0, r3
 8006144:	f7fc fd87 	bl	8002c56 <HAL_DMA_Abort_IT>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d017      	beq.n	800617e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006158:	4610      	mov	r0, r2
 800615a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800615c:	e00f      	b.n	800617e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f9b4 	bl	80064cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006164:	e00b      	b.n	800617e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f9b0 	bl	80064cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616c:	e007      	b.n	800617e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f9ac 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800617c:	e192      	b.n	80064a4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800617e:	bf00      	nop
    return;
 8006180:	e190      	b.n	80064a4 <HAL_UART_IRQHandler+0x5b8>
 8006182:	bf00      	nop
 8006184:	04000120 	.word	0x04000120
 8006188:	08006e41 	.word	0x08006e41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006190:	2b01      	cmp	r3, #1
 8006192:	f040 814b 	bne.w	800642c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619a:	f003 0310 	and.w	r3, r3, #16
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 8144 	beq.w	800642c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80061a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061a8:	f003 0310 	and.w	r3, r3, #16
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 813d 	beq.w	800642c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2210      	movs	r2, #16
 80061b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c4:	2b40      	cmp	r3, #64	@ 0x40
 80061c6:	f040 80b5 	bne.w	8006334 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8164 	beq.w	80064a8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80061e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061ea:	429a      	cmp	r2, r3
 80061ec:	f080 815c 	bcs.w	80064a8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	2b20      	cmp	r3, #32
 8006202:	f000 8086 	beq.w	8006312 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800621a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800621e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006222:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006230:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006234:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800623c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006248:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1da      	bne.n	8006206 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3308      	adds	r3, #8
 8006256:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006260:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006262:	f023 0301 	bic.w	r3, r3, #1
 8006266:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3308      	adds	r3, #8
 8006270:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006274:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006278:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800627c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006286:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e1      	bne.n	8006250 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3308      	adds	r3, #8
 8006292:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800629c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800629e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3308      	adds	r3, #8
 80062ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80062b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80062b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80062b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80062be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e3      	bne.n	800628c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062e2:	f023 0310 	bic.w	r3, r3, #16
 80062e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062f6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e4      	bne.n	80062d2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800630c:	4618      	mov	r0, r3
 800630e:	f7fc fc64 	bl	8002bda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2202      	movs	r2, #2
 8006316:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006324:	b29b      	uxth	r3, r3
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	b29b      	uxth	r3, r3
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f8d7 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006332:	e0b9      	b.n	80064a8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006340:	b29b      	uxth	r3, r3
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 80ab 	beq.w	80064ac <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006356:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 80a6 	beq.w	80064ac <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800636e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006370:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006374:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006382:	647b      	str	r3, [r7, #68]	@ 0x44
 8006384:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006388:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e4      	bne.n	8006360 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3308      	adds	r3, #8
 800639c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	623b      	str	r3, [r7, #32]
   return(result);
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	f023 0301 	bic.w	r3, r3, #1
 80063ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3308      	adds	r3, #8
 80063b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80063ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80063bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e3      	bne.n	8006396 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 0310 	bic.w	r3, r3, #16
 80063f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	69b9      	ldr	r1, [r7, #24]
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	617b      	str	r3, [r7, #20]
   return(result);
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e4      	bne.n	80063e2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800641e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f85b 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800642a:	e03f      	b.n	80064ac <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800642c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00e      	beq.n	8006456 <HAL_UART_IRQHandler+0x56a>
 8006438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800643c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d008      	beq.n	8006456 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800644c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fede 	bl	8007210 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006454:	e02d      	b.n	80064b2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800645a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00e      	beq.n	8006480 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800646a:	2b00      	cmp	r3, #0
 800646c:	d008      	beq.n	8006480 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01c      	beq.n	80064b0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	4798      	blx	r3
    }
    return;
 800647e:	e017      	b.n	80064b0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d012      	beq.n	80064b2 <HAL_UART_IRQHandler+0x5c6>
 800648c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00c      	beq.n	80064b2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fce7 	bl	8006e6c <UART_EndTransmit_IT>
    return;
 800649e:	e008      	b.n	80064b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80064a0:	bf00      	nop
 80064a2:	e006      	b.n	80064b2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80064a4:	bf00      	nop
 80064a6:	e004      	b.n	80064b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80064a8:	bf00      	nop
 80064aa:	e002      	b.n	80064b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80064ac:	bf00      	nop
 80064ae:	e000      	b.n	80064b2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80064b0:	bf00      	nop
  }

}
 80064b2:	37e8      	adds	r7, #232	@ 0xe8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	431a      	orrs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	4313      	orrs	r3, r2
 800651a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006526:	f023 030c 	bic.w	r3, r3, #12
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6812      	ldr	r2, [r2, #0]
 800652e:	6979      	ldr	r1, [r7, #20]
 8006530:	430b      	orrs	r3, r1
 8006532:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	430a      	orrs	r2, r1
 800656c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4aa7      	ldr	r2, [pc, #668]	@ (8006810 <UART_SetConfig+0x318>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d120      	bne.n	80065ba <UART_SetConfig+0xc2>
 8006578:	4ba6      	ldr	r3, [pc, #664]	@ (8006814 <UART_SetConfig+0x31c>)
 800657a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	2b03      	cmp	r3, #3
 8006582:	d817      	bhi.n	80065b4 <UART_SetConfig+0xbc>
 8006584:	a201      	add	r2, pc, #4	@ (adr r2, 800658c <UART_SetConfig+0x94>)
 8006586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658a:	bf00      	nop
 800658c:	0800659d 	.word	0x0800659d
 8006590:	080065a9 	.word	0x080065a9
 8006594:	080065af 	.word	0x080065af
 8006598:	080065a3 	.word	0x080065a3
 800659c:	2301      	movs	r3, #1
 800659e:	77fb      	strb	r3, [r7, #31]
 80065a0:	e0b5      	b.n	800670e <UART_SetConfig+0x216>
 80065a2:	2302      	movs	r3, #2
 80065a4:	77fb      	strb	r3, [r7, #31]
 80065a6:	e0b2      	b.n	800670e <UART_SetConfig+0x216>
 80065a8:	2304      	movs	r3, #4
 80065aa:	77fb      	strb	r3, [r7, #31]
 80065ac:	e0af      	b.n	800670e <UART_SetConfig+0x216>
 80065ae:	2308      	movs	r3, #8
 80065b0:	77fb      	strb	r3, [r7, #31]
 80065b2:	e0ac      	b.n	800670e <UART_SetConfig+0x216>
 80065b4:	2310      	movs	r3, #16
 80065b6:	77fb      	strb	r3, [r7, #31]
 80065b8:	e0a9      	b.n	800670e <UART_SetConfig+0x216>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a96      	ldr	r2, [pc, #600]	@ (8006818 <UART_SetConfig+0x320>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d124      	bne.n	800660e <UART_SetConfig+0x116>
 80065c4:	4b93      	ldr	r3, [pc, #588]	@ (8006814 <UART_SetConfig+0x31c>)
 80065c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065d0:	d011      	beq.n	80065f6 <UART_SetConfig+0xfe>
 80065d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065d6:	d817      	bhi.n	8006608 <UART_SetConfig+0x110>
 80065d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065dc:	d011      	beq.n	8006602 <UART_SetConfig+0x10a>
 80065de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065e2:	d811      	bhi.n	8006608 <UART_SetConfig+0x110>
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <UART_SetConfig+0xf8>
 80065e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ec:	d006      	beq.n	80065fc <UART_SetConfig+0x104>
 80065ee:	e00b      	b.n	8006608 <UART_SetConfig+0x110>
 80065f0:	2300      	movs	r3, #0
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e08b      	b.n	800670e <UART_SetConfig+0x216>
 80065f6:	2302      	movs	r3, #2
 80065f8:	77fb      	strb	r3, [r7, #31]
 80065fa:	e088      	b.n	800670e <UART_SetConfig+0x216>
 80065fc:	2304      	movs	r3, #4
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e085      	b.n	800670e <UART_SetConfig+0x216>
 8006602:	2308      	movs	r3, #8
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e082      	b.n	800670e <UART_SetConfig+0x216>
 8006608:	2310      	movs	r3, #16
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e07f      	b.n	800670e <UART_SetConfig+0x216>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a82      	ldr	r2, [pc, #520]	@ (800681c <UART_SetConfig+0x324>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d124      	bne.n	8006662 <UART_SetConfig+0x16a>
 8006618:	4b7e      	ldr	r3, [pc, #504]	@ (8006814 <UART_SetConfig+0x31c>)
 800661a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006620:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006624:	d011      	beq.n	800664a <UART_SetConfig+0x152>
 8006626:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800662a:	d817      	bhi.n	800665c <UART_SetConfig+0x164>
 800662c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006630:	d011      	beq.n	8006656 <UART_SetConfig+0x15e>
 8006632:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006636:	d811      	bhi.n	800665c <UART_SetConfig+0x164>
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <UART_SetConfig+0x14c>
 800663c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006640:	d006      	beq.n	8006650 <UART_SetConfig+0x158>
 8006642:	e00b      	b.n	800665c <UART_SetConfig+0x164>
 8006644:	2300      	movs	r3, #0
 8006646:	77fb      	strb	r3, [r7, #31]
 8006648:	e061      	b.n	800670e <UART_SetConfig+0x216>
 800664a:	2302      	movs	r3, #2
 800664c:	77fb      	strb	r3, [r7, #31]
 800664e:	e05e      	b.n	800670e <UART_SetConfig+0x216>
 8006650:	2304      	movs	r3, #4
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e05b      	b.n	800670e <UART_SetConfig+0x216>
 8006656:	2308      	movs	r3, #8
 8006658:	77fb      	strb	r3, [r7, #31]
 800665a:	e058      	b.n	800670e <UART_SetConfig+0x216>
 800665c:	2310      	movs	r3, #16
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	e055      	b.n	800670e <UART_SetConfig+0x216>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a6e      	ldr	r2, [pc, #440]	@ (8006820 <UART_SetConfig+0x328>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d124      	bne.n	80066b6 <UART_SetConfig+0x1be>
 800666c:	4b69      	ldr	r3, [pc, #420]	@ (8006814 <UART_SetConfig+0x31c>)
 800666e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006670:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006674:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006678:	d011      	beq.n	800669e <UART_SetConfig+0x1a6>
 800667a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800667e:	d817      	bhi.n	80066b0 <UART_SetConfig+0x1b8>
 8006680:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006684:	d011      	beq.n	80066aa <UART_SetConfig+0x1b2>
 8006686:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800668a:	d811      	bhi.n	80066b0 <UART_SetConfig+0x1b8>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <UART_SetConfig+0x1a0>
 8006690:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006694:	d006      	beq.n	80066a4 <UART_SetConfig+0x1ac>
 8006696:	e00b      	b.n	80066b0 <UART_SetConfig+0x1b8>
 8006698:	2300      	movs	r3, #0
 800669a:	77fb      	strb	r3, [r7, #31]
 800669c:	e037      	b.n	800670e <UART_SetConfig+0x216>
 800669e:	2302      	movs	r3, #2
 80066a0:	77fb      	strb	r3, [r7, #31]
 80066a2:	e034      	b.n	800670e <UART_SetConfig+0x216>
 80066a4:	2304      	movs	r3, #4
 80066a6:	77fb      	strb	r3, [r7, #31]
 80066a8:	e031      	b.n	800670e <UART_SetConfig+0x216>
 80066aa:	2308      	movs	r3, #8
 80066ac:	77fb      	strb	r3, [r7, #31]
 80066ae:	e02e      	b.n	800670e <UART_SetConfig+0x216>
 80066b0:	2310      	movs	r3, #16
 80066b2:	77fb      	strb	r3, [r7, #31]
 80066b4:	e02b      	b.n	800670e <UART_SetConfig+0x216>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a5a      	ldr	r2, [pc, #360]	@ (8006824 <UART_SetConfig+0x32c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d124      	bne.n	800670a <UART_SetConfig+0x212>
 80066c0:	4b54      	ldr	r3, [pc, #336]	@ (8006814 <UART_SetConfig+0x31c>)
 80066c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80066c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80066cc:	d011      	beq.n	80066f2 <UART_SetConfig+0x1fa>
 80066ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80066d2:	d817      	bhi.n	8006704 <UART_SetConfig+0x20c>
 80066d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066d8:	d011      	beq.n	80066fe <UART_SetConfig+0x206>
 80066da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066de:	d811      	bhi.n	8006704 <UART_SetConfig+0x20c>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <UART_SetConfig+0x1f4>
 80066e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066e8:	d006      	beq.n	80066f8 <UART_SetConfig+0x200>
 80066ea:	e00b      	b.n	8006704 <UART_SetConfig+0x20c>
 80066ec:	2300      	movs	r3, #0
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e00d      	b.n	800670e <UART_SetConfig+0x216>
 80066f2:	2302      	movs	r3, #2
 80066f4:	77fb      	strb	r3, [r7, #31]
 80066f6:	e00a      	b.n	800670e <UART_SetConfig+0x216>
 80066f8:	2304      	movs	r3, #4
 80066fa:	77fb      	strb	r3, [r7, #31]
 80066fc:	e007      	b.n	800670e <UART_SetConfig+0x216>
 80066fe:	2308      	movs	r3, #8
 8006700:	77fb      	strb	r3, [r7, #31]
 8006702:	e004      	b.n	800670e <UART_SetConfig+0x216>
 8006704:	2310      	movs	r3, #16
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e001      	b.n	800670e <UART_SetConfig+0x216>
 800670a:	2310      	movs	r3, #16
 800670c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006716:	d15b      	bne.n	80067d0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8006718:	7ffb      	ldrb	r3, [r7, #31]
 800671a:	2b08      	cmp	r3, #8
 800671c:	d827      	bhi.n	800676e <UART_SetConfig+0x276>
 800671e:	a201      	add	r2, pc, #4	@ (adr r2, 8006724 <UART_SetConfig+0x22c>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	08006749 	.word	0x08006749
 8006728:	08006751 	.word	0x08006751
 800672c:	08006759 	.word	0x08006759
 8006730:	0800676f 	.word	0x0800676f
 8006734:	0800675f 	.word	0x0800675f
 8006738:	0800676f 	.word	0x0800676f
 800673c:	0800676f 	.word	0x0800676f
 8006740:	0800676f 	.word	0x0800676f
 8006744:	08006767 	.word	0x08006767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006748:	f7fd fe70 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 800674c:	61b8      	str	r0, [r7, #24]
        break;
 800674e:	e013      	b.n	8006778 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006750:	f7fd fe8e 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 8006754:	61b8      	str	r0, [r7, #24]
        break;
 8006756:	e00f      	b.n	8006778 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006758:	4b33      	ldr	r3, [pc, #204]	@ (8006828 <UART_SetConfig+0x330>)
 800675a:	61bb      	str	r3, [r7, #24]
        break;
 800675c:	e00c      	b.n	8006778 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800675e:	f7fd fe05 	bl	800436c <HAL_RCC_GetSysClockFreq>
 8006762:	61b8      	str	r0, [r7, #24]
        break;
 8006764:	e008      	b.n	8006778 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800676a:	61bb      	str	r3, [r7, #24]
        break;
 800676c:	e004      	b.n	8006778 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	77bb      	strb	r3, [r7, #30]
        break;
 8006776:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 8082 	beq.w	8006884 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	005a      	lsls	r2, r3, #1
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	085b      	lsrs	r3, r3, #1
 800678a:	441a      	add	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	fbb2 f3f3 	udiv	r3, r2, r3
 8006794:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	2b0f      	cmp	r3, #15
 800679a:	d916      	bls.n	80067ca <UART_SetConfig+0x2d2>
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a2:	d212      	bcs.n	80067ca <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	f023 030f 	bic.w	r3, r3, #15
 80067ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	085b      	lsrs	r3, r3, #1
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	89fb      	ldrh	r3, [r7, #14]
 80067bc:	4313      	orrs	r3, r2
 80067be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	89fa      	ldrh	r2, [r7, #14]
 80067c6:	60da      	str	r2, [r3, #12]
 80067c8:	e05c      	b.n	8006884 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	77bb      	strb	r3, [r7, #30]
 80067ce:	e059      	b.n	8006884 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067d0:	7ffb      	ldrb	r3, [r7, #31]
 80067d2:	2b08      	cmp	r3, #8
 80067d4:	d835      	bhi.n	8006842 <UART_SetConfig+0x34a>
 80067d6:	a201      	add	r2, pc, #4	@ (adr r2, 80067dc <UART_SetConfig+0x2e4>)
 80067d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067dc:	08006801 	.word	0x08006801
 80067e0:	08006809 	.word	0x08006809
 80067e4:	0800682d 	.word	0x0800682d
 80067e8:	08006843 	.word	0x08006843
 80067ec:	08006833 	.word	0x08006833
 80067f0:	08006843 	.word	0x08006843
 80067f4:	08006843 	.word	0x08006843
 80067f8:	08006843 	.word	0x08006843
 80067fc:	0800683b 	.word	0x0800683b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006800:	f7fd fe14 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 8006804:	61b8      	str	r0, [r7, #24]
        break;
 8006806:	e021      	b.n	800684c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006808:	f7fd fe32 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 800680c:	61b8      	str	r0, [r7, #24]
        break;
 800680e:	e01d      	b.n	800684c <UART_SetConfig+0x354>
 8006810:	40013800 	.word	0x40013800
 8006814:	40021000 	.word	0x40021000
 8006818:	40004400 	.word	0x40004400
 800681c:	40004800 	.word	0x40004800
 8006820:	40004c00 	.word	0x40004c00
 8006824:	40005000 	.word	0x40005000
 8006828:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800682c:	4b1b      	ldr	r3, [pc, #108]	@ (800689c <UART_SetConfig+0x3a4>)
 800682e:	61bb      	str	r3, [r7, #24]
        break;
 8006830:	e00c      	b.n	800684c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006832:	f7fd fd9b 	bl	800436c <HAL_RCC_GetSysClockFreq>
 8006836:	61b8      	str	r0, [r7, #24]
        break;
 8006838:	e008      	b.n	800684c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800683a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800683e:	61bb      	str	r3, [r7, #24]
        break;
 8006840:	e004      	b.n	800684c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	77bb      	strb	r3, [r7, #30]
        break;
 800684a:	bf00      	nop
    }

    if (pclk != 0U)
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d018      	beq.n	8006884 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	085a      	lsrs	r2, r3, #1
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	441a      	add	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	fbb2 f3f3 	udiv	r3, r2, r3
 8006864:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	2b0f      	cmp	r3, #15
 800686a:	d909      	bls.n	8006880 <UART_SetConfig+0x388>
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006872:	d205      	bcs.n	8006880 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	b29a      	uxth	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	60da      	str	r2, [r3, #12]
 800687e:	e001      	b.n	8006884 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006890:	7fbb      	ldrb	r3, [r7, #30]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3720      	adds	r7, #32
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	007a1200 	.word	0x007a1200

080068a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00a      	beq.n	800690e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01a      	beq.n	80069b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800699e:	d10a      	bne.n	80069b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	605a      	str	r2, [r3, #4]
  }
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b098      	sub	sp, #96	@ 0x60
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069f4:	f7fa fb7c 	bl	80010f0 <HAL_GetTick>
 80069f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d12e      	bne.n	8006a66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a10:	2200      	movs	r2, #0
 8006a12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f88c 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d021      	beq.n	8006a66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a36:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a40:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a48:	e841 2300 	strex	r3, r2, [r1]
 8006a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e6      	bne.n	8006a22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e062      	b.n	8006b2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d149      	bne.n	8006b08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f856 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d03c      	beq.n	8006b08 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e6      	bne.n	8006a8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0301 	bic.w	r3, r3, #1
 8006ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ae0:	61fa      	str	r2, [r7, #28]
 8006ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	69b9      	ldr	r1, [r7, #24]
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	617b      	str	r3, [r7, #20]
   return(result);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e5      	bne.n	8006ac0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e011      	b.n	8006b2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3758      	adds	r7, #88	@ 0x58
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	603b      	str	r3, [r7, #0]
 8006b40:	4613      	mov	r3, r2
 8006b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b44:	e04f      	b.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b4c:	d04b      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4e:	f7fa facf 	bl	80010f0 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d302      	bcc.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e04e      	b.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d037      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b80      	cmp	r3, #128	@ 0x80
 8006b7a:	d034      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b40      	cmp	r3, #64	@ 0x40
 8006b80:	d031      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	f003 0308 	and.w	r3, r3, #8
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d110      	bne.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2208      	movs	r2, #8
 8006b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f8ed 	bl	8006d78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2208      	movs	r2, #8
 8006ba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e029      	b.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bc0:	d111      	bne.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f8d3 	bl	8006d78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e00f      	b.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2301      	moveq	r3, #1
 8006bf8:	2300      	movne	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d0a0      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b097      	sub	sp, #92	@ 0x5c
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	88fa      	ldrh	r2, [r7, #6]
 8006c28:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	88fa      	ldrh	r2, [r7, #6]
 8006c30:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c42:	d10e      	bne.n	8006c62 <UART_Start_Receive_IT+0x52>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d105      	bne.n	8006c58 <UART_Start_Receive_IT+0x48>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006c52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c56:	e01a      	b.n	8006c8e <UART_Start_Receive_IT+0x7e>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	22ff      	movs	r2, #255	@ 0xff
 8006c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c60:	e015      	b.n	8006c8e <UART_Start_Receive_IT+0x7e>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10d      	bne.n	8006c86 <UART_Start_Receive_IT+0x76>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d104      	bne.n	8006c7c <UART_Start_Receive_IT+0x6c>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	22ff      	movs	r2, #255	@ 0xff
 8006c76:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c7a:	e008      	b.n	8006c8e <UART_Start_Receive_IT+0x7e>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	227f      	movs	r2, #127	@ 0x7f
 8006c80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c84:	e003      	b.n	8006c8e <UART_Start_Receive_IT+0x7e>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2222      	movs	r2, #34	@ 0x22
 8006c9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3308      	adds	r3, #8
 8006cbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006cbe:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006cc0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006cc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e5      	bne.n	8006c9e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cda:	d107      	bne.n	8006cec <UART_Start_Receive_IT+0xdc>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d103      	bne.n	8006cec <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a22      	ldr	r2, [pc, #136]	@ (8006d70 <UART_Start_Receive_IT+0x160>)
 8006ce8:	669a      	str	r2, [r3, #104]	@ 0x68
 8006cea:	e002      	b.n	8006cf2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4a21      	ldr	r2, [pc, #132]	@ (8006d74 <UART_Start_Receive_IT+0x164>)
 8006cf0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d019      	beq.n	8006d2e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d1a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e6      	bne.n	8006cfa <UART_Start_Receive_IT+0xea>
 8006d2c:	e018      	b.n	8006d60 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	e853 3f00 	ldrex	r3, [r3]
 8006d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f043 0320 	orr.w	r3, r3, #32
 8006d42:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d4c:	623b      	str	r3, [r7, #32]
 8006d4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	69f9      	ldr	r1, [r7, #28]
 8006d52:	6a3a      	ldr	r2, [r7, #32]
 8006d54:	e841 2300 	strex	r3, r2, [r1]
 8006d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e6      	bne.n	8006d2e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	375c      	adds	r7, #92	@ 0x5c
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	08007069 	.word	0x08007069
 8006d74:	08006ec1 	.word	0x08006ec1

08006d78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b095      	sub	sp, #84	@ 0x54
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006da0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006da4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e6      	bne.n	8006d80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3308      	adds	r3, #8
 8006db8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	f023 0301 	bic.w	r3, r3, #1
 8006dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e5      	bne.n	8006db2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d118      	bne.n	8006e20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f023 0310 	bic.w	r3, r3, #16
 8006e02:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e0c:	61bb      	str	r3, [r7, #24]
 8006e0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	6979      	ldr	r1, [r7, #20]
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	613b      	str	r3, [r7, #16]
   return(result);
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e6      	bne.n	8006dee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006e34:	bf00      	nop
 8006e36:	3754      	adds	r7, #84	@ 0x54
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff fb34 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	61bb      	str	r3, [r7, #24]
 8006e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e6      	bne.n	8006e74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff fb00 	bl	80064b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eb8:	bf00      	nop
 8006eba:	3720      	adds	r7, #32
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b09c      	sub	sp, #112	@ 0x70
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ece:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ed8:	2b22      	cmp	r3, #34	@ 0x22
 8006eda:	f040 80b9 	bne.w	8007050 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006ee4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ee8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006eec:	b2d9      	uxtb	r1, r3
 8006eee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ef8:	400a      	ands	r2, r1
 8006efa:	b2d2      	uxtb	r2, r2
 8006efc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3b01      	subs	r3, #1
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f040 809c 	bne.w	8007060 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e6      	bne.n	8006f28 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6c:	f023 0301 	bic.w	r3, r3, #1
 8006f70:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3308      	adds	r3, #8
 8006f78:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e5      	bne.n	8006f5a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d018      	beq.n	8006fe2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fce:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e6      	bne.n	8006fb0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d12e      	bne.n	8007048 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f023 0310 	bic.w	r3, r3, #16
 8007004:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800700e:	61fb      	str	r3, [r7, #28]
 8007010:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	69b9      	ldr	r1, [r7, #24]
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	617b      	str	r3, [r7, #20]
   return(result);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e6      	bne.n	8006ff0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69db      	ldr	r3, [r3, #28]
 8007028:	f003 0310 	and.w	r3, r3, #16
 800702c:	2b10      	cmp	r3, #16
 800702e:	d103      	bne.n	8007038 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2210      	movs	r2, #16
 8007036:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7ff fa4d 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007046:	e00b      	b.n	8007060 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7f9 fce7 	bl	8000a1c <HAL_UART_RxCpltCallback>
}
 800704e:	e007      	b.n	8007060 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	699a      	ldr	r2, [r3, #24]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 0208 	orr.w	r2, r2, #8
 800705e:	619a      	str	r2, [r3, #24]
}
 8007060:	bf00      	nop
 8007062:	3770      	adds	r7, #112	@ 0x70
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b09c      	sub	sp, #112	@ 0x70
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007076:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007080:	2b22      	cmp	r3, #34	@ 0x22
 8007082:	f040 80b9 	bne.w	80071f8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800708c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007094:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007096:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800709a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800709e:	4013      	ands	r3, r2
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070aa:	1c9a      	adds	r2, r3, #2
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f040 809c 	bne.w	8007208 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80070de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80070f0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80070f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80070fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e6      	bne.n	80070d0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3308      	adds	r3, #8
 8007108:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	663b      	str	r3, [r7, #96]	@ 0x60
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3308      	adds	r3, #8
 8007120:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007122:	643a      	str	r2, [r7, #64]	@ 0x40
 8007124:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007128:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e5      	bne.n	8007102 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2220      	movs	r2, #32
 800713a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d018      	beq.n	800718a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	e853 3f00 	ldrex	r3, [r3]
 8007164:	61fb      	str	r3, [r7, #28]
   return(result);
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800716c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007178:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800717c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e6      	bne.n	8007158 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800718e:	2b01      	cmp	r3, #1
 8007190:	d12e      	bne.n	80071f0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f023 0310 	bic.w	r3, r3, #16
 80071ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071b6:	61bb      	str	r3, [r7, #24]
 80071b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	6979      	ldr	r1, [r7, #20]
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	613b      	str	r3, [r7, #16]
   return(result);
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e6      	bne.n	8007198 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	f003 0310 	and.w	r3, r3, #16
 80071d4:	2b10      	cmp	r3, #16
 80071d6:	d103      	bne.n	80071e0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2210      	movs	r2, #16
 80071de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff f979 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071ee:	e00b      	b.n	8007208 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7f9 fc13 	bl	8000a1c <HAL_UART_RxCpltCallback>
}
 80071f6:	e007      	b.n	8007208 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0208 	orr.w	r2, r2, #8
 8007206:	619a      	str	r2, [r3, #24]
}
 8007208:	bf00      	nop
 800720a:	3770      	adds	r7, #112	@ 0x70
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <siprintf>:
 8007224:	b40e      	push	{r1, r2, r3}
 8007226:	b500      	push	{lr}
 8007228:	b09c      	sub	sp, #112	@ 0x70
 800722a:	ab1d      	add	r3, sp, #116	@ 0x74
 800722c:	9002      	str	r0, [sp, #8]
 800722e:	9006      	str	r0, [sp, #24]
 8007230:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007234:	4809      	ldr	r0, [pc, #36]	@ (800725c <siprintf+0x38>)
 8007236:	9107      	str	r1, [sp, #28]
 8007238:	9104      	str	r1, [sp, #16]
 800723a:	4909      	ldr	r1, [pc, #36]	@ (8007260 <siprintf+0x3c>)
 800723c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007240:	9105      	str	r1, [sp, #20]
 8007242:	6800      	ldr	r0, [r0, #0]
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	a902      	add	r1, sp, #8
 8007248:	f000 f994 	bl	8007574 <_svfiprintf_r>
 800724c:	9b02      	ldr	r3, [sp, #8]
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]
 8007252:	b01c      	add	sp, #112	@ 0x70
 8007254:	f85d eb04 	ldr.w	lr, [sp], #4
 8007258:	b003      	add	sp, #12
 800725a:	4770      	bx	lr
 800725c:	2000000c 	.word	0x2000000c
 8007260:	ffff0208 	.word	0xffff0208

08007264 <memset>:
 8007264:	4402      	add	r2, r0
 8007266:	4603      	mov	r3, r0
 8007268:	4293      	cmp	r3, r2
 800726a:	d100      	bne.n	800726e <memset+0xa>
 800726c:	4770      	bx	lr
 800726e:	f803 1b01 	strb.w	r1, [r3], #1
 8007272:	e7f9      	b.n	8007268 <memset+0x4>

08007274 <__errno>:
 8007274:	4b01      	ldr	r3, [pc, #4]	@ (800727c <__errno+0x8>)
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	2000000c 	.word	0x2000000c

08007280 <__libc_init_array>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	4d0d      	ldr	r5, [pc, #52]	@ (80072b8 <__libc_init_array+0x38>)
 8007284:	4c0d      	ldr	r4, [pc, #52]	@ (80072bc <__libc_init_array+0x3c>)
 8007286:	1b64      	subs	r4, r4, r5
 8007288:	10a4      	asrs	r4, r4, #2
 800728a:	2600      	movs	r6, #0
 800728c:	42a6      	cmp	r6, r4
 800728e:	d109      	bne.n	80072a4 <__libc_init_array+0x24>
 8007290:	4d0b      	ldr	r5, [pc, #44]	@ (80072c0 <__libc_init_array+0x40>)
 8007292:	4c0c      	ldr	r4, [pc, #48]	@ (80072c4 <__libc_init_array+0x44>)
 8007294:	f000 fc66 	bl	8007b64 <_init>
 8007298:	1b64      	subs	r4, r4, r5
 800729a:	10a4      	asrs	r4, r4, #2
 800729c:	2600      	movs	r6, #0
 800729e:	42a6      	cmp	r6, r4
 80072a0:	d105      	bne.n	80072ae <__libc_init_array+0x2e>
 80072a2:	bd70      	pop	{r4, r5, r6, pc}
 80072a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a8:	4798      	blx	r3
 80072aa:	3601      	adds	r6, #1
 80072ac:	e7ee      	b.n	800728c <__libc_init_array+0xc>
 80072ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b2:	4798      	blx	r3
 80072b4:	3601      	adds	r6, #1
 80072b6:	e7f2      	b.n	800729e <__libc_init_array+0x1e>
 80072b8:	08007c44 	.word	0x08007c44
 80072bc:	08007c44 	.word	0x08007c44
 80072c0:	08007c44 	.word	0x08007c44
 80072c4:	08007c48 	.word	0x08007c48

080072c8 <__retarget_lock_acquire_recursive>:
 80072c8:	4770      	bx	lr

080072ca <__retarget_lock_release_recursive>:
 80072ca:	4770      	bx	lr

080072cc <_free_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4605      	mov	r5, r0
 80072d0:	2900      	cmp	r1, #0
 80072d2:	d041      	beq.n	8007358 <_free_r+0x8c>
 80072d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d8:	1f0c      	subs	r4, r1, #4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bfb8      	it	lt
 80072de:	18e4      	addlt	r4, r4, r3
 80072e0:	f000 f8e0 	bl	80074a4 <__malloc_lock>
 80072e4:	4a1d      	ldr	r2, [pc, #116]	@ (800735c <_free_r+0x90>)
 80072e6:	6813      	ldr	r3, [r2, #0]
 80072e8:	b933      	cbnz	r3, 80072f8 <_free_r+0x2c>
 80072ea:	6063      	str	r3, [r4, #4]
 80072ec:	6014      	str	r4, [r2, #0]
 80072ee:	4628      	mov	r0, r5
 80072f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072f4:	f000 b8dc 	b.w	80074b0 <__malloc_unlock>
 80072f8:	42a3      	cmp	r3, r4
 80072fa:	d908      	bls.n	800730e <_free_r+0x42>
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	1821      	adds	r1, r4, r0
 8007300:	428b      	cmp	r3, r1
 8007302:	bf01      	itttt	eq
 8007304:	6819      	ldreq	r1, [r3, #0]
 8007306:	685b      	ldreq	r3, [r3, #4]
 8007308:	1809      	addeq	r1, r1, r0
 800730a:	6021      	streq	r1, [r4, #0]
 800730c:	e7ed      	b.n	80072ea <_free_r+0x1e>
 800730e:	461a      	mov	r2, r3
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	b10b      	cbz	r3, 8007318 <_free_r+0x4c>
 8007314:	42a3      	cmp	r3, r4
 8007316:	d9fa      	bls.n	800730e <_free_r+0x42>
 8007318:	6811      	ldr	r1, [r2, #0]
 800731a:	1850      	adds	r0, r2, r1
 800731c:	42a0      	cmp	r0, r4
 800731e:	d10b      	bne.n	8007338 <_free_r+0x6c>
 8007320:	6820      	ldr	r0, [r4, #0]
 8007322:	4401      	add	r1, r0
 8007324:	1850      	adds	r0, r2, r1
 8007326:	4283      	cmp	r3, r0
 8007328:	6011      	str	r1, [r2, #0]
 800732a:	d1e0      	bne.n	80072ee <_free_r+0x22>
 800732c:	6818      	ldr	r0, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	6053      	str	r3, [r2, #4]
 8007332:	4408      	add	r0, r1
 8007334:	6010      	str	r0, [r2, #0]
 8007336:	e7da      	b.n	80072ee <_free_r+0x22>
 8007338:	d902      	bls.n	8007340 <_free_r+0x74>
 800733a:	230c      	movs	r3, #12
 800733c:	602b      	str	r3, [r5, #0]
 800733e:	e7d6      	b.n	80072ee <_free_r+0x22>
 8007340:	6820      	ldr	r0, [r4, #0]
 8007342:	1821      	adds	r1, r4, r0
 8007344:	428b      	cmp	r3, r1
 8007346:	bf04      	itt	eq
 8007348:	6819      	ldreq	r1, [r3, #0]
 800734a:	685b      	ldreq	r3, [r3, #4]
 800734c:	6063      	str	r3, [r4, #4]
 800734e:	bf04      	itt	eq
 8007350:	1809      	addeq	r1, r1, r0
 8007352:	6021      	streq	r1, [r4, #0]
 8007354:	6054      	str	r4, [r2, #4]
 8007356:	e7ca      	b.n	80072ee <_free_r+0x22>
 8007358:	bd38      	pop	{r3, r4, r5, pc}
 800735a:	bf00      	nop
 800735c:	20000484 	.word	0x20000484

08007360 <sbrk_aligned>:
 8007360:	b570      	push	{r4, r5, r6, lr}
 8007362:	4e0f      	ldr	r6, [pc, #60]	@ (80073a0 <sbrk_aligned+0x40>)
 8007364:	460c      	mov	r4, r1
 8007366:	6831      	ldr	r1, [r6, #0]
 8007368:	4605      	mov	r5, r0
 800736a:	b911      	cbnz	r1, 8007372 <sbrk_aligned+0x12>
 800736c:	f000 fba6 	bl	8007abc <_sbrk_r>
 8007370:	6030      	str	r0, [r6, #0]
 8007372:	4621      	mov	r1, r4
 8007374:	4628      	mov	r0, r5
 8007376:	f000 fba1 	bl	8007abc <_sbrk_r>
 800737a:	1c43      	adds	r3, r0, #1
 800737c:	d103      	bne.n	8007386 <sbrk_aligned+0x26>
 800737e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007382:	4620      	mov	r0, r4
 8007384:	bd70      	pop	{r4, r5, r6, pc}
 8007386:	1cc4      	adds	r4, r0, #3
 8007388:	f024 0403 	bic.w	r4, r4, #3
 800738c:	42a0      	cmp	r0, r4
 800738e:	d0f8      	beq.n	8007382 <sbrk_aligned+0x22>
 8007390:	1a21      	subs	r1, r4, r0
 8007392:	4628      	mov	r0, r5
 8007394:	f000 fb92 	bl	8007abc <_sbrk_r>
 8007398:	3001      	adds	r0, #1
 800739a:	d1f2      	bne.n	8007382 <sbrk_aligned+0x22>
 800739c:	e7ef      	b.n	800737e <sbrk_aligned+0x1e>
 800739e:	bf00      	nop
 80073a0:	20000480 	.word	0x20000480

080073a4 <_malloc_r>:
 80073a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a8:	1ccd      	adds	r5, r1, #3
 80073aa:	f025 0503 	bic.w	r5, r5, #3
 80073ae:	3508      	adds	r5, #8
 80073b0:	2d0c      	cmp	r5, #12
 80073b2:	bf38      	it	cc
 80073b4:	250c      	movcc	r5, #12
 80073b6:	2d00      	cmp	r5, #0
 80073b8:	4606      	mov	r6, r0
 80073ba:	db01      	blt.n	80073c0 <_malloc_r+0x1c>
 80073bc:	42a9      	cmp	r1, r5
 80073be:	d904      	bls.n	80073ca <_malloc_r+0x26>
 80073c0:	230c      	movs	r3, #12
 80073c2:	6033      	str	r3, [r6, #0]
 80073c4:	2000      	movs	r0, #0
 80073c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074a0 <_malloc_r+0xfc>
 80073ce:	f000 f869 	bl	80074a4 <__malloc_lock>
 80073d2:	f8d8 3000 	ldr.w	r3, [r8]
 80073d6:	461c      	mov	r4, r3
 80073d8:	bb44      	cbnz	r4, 800742c <_malloc_r+0x88>
 80073da:	4629      	mov	r1, r5
 80073dc:	4630      	mov	r0, r6
 80073de:	f7ff ffbf 	bl	8007360 <sbrk_aligned>
 80073e2:	1c43      	adds	r3, r0, #1
 80073e4:	4604      	mov	r4, r0
 80073e6:	d158      	bne.n	800749a <_malloc_r+0xf6>
 80073e8:	f8d8 4000 	ldr.w	r4, [r8]
 80073ec:	4627      	mov	r7, r4
 80073ee:	2f00      	cmp	r7, #0
 80073f0:	d143      	bne.n	800747a <_malloc_r+0xd6>
 80073f2:	2c00      	cmp	r4, #0
 80073f4:	d04b      	beq.n	800748e <_malloc_r+0xea>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	4639      	mov	r1, r7
 80073fa:	4630      	mov	r0, r6
 80073fc:	eb04 0903 	add.w	r9, r4, r3
 8007400:	f000 fb5c 	bl	8007abc <_sbrk_r>
 8007404:	4581      	cmp	r9, r0
 8007406:	d142      	bne.n	800748e <_malloc_r+0xea>
 8007408:	6821      	ldr	r1, [r4, #0]
 800740a:	1a6d      	subs	r5, r5, r1
 800740c:	4629      	mov	r1, r5
 800740e:	4630      	mov	r0, r6
 8007410:	f7ff ffa6 	bl	8007360 <sbrk_aligned>
 8007414:	3001      	adds	r0, #1
 8007416:	d03a      	beq.n	800748e <_malloc_r+0xea>
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	442b      	add	r3, r5
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	f8d8 3000 	ldr.w	r3, [r8]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	bb62      	cbnz	r2, 8007480 <_malloc_r+0xdc>
 8007426:	f8c8 7000 	str.w	r7, [r8]
 800742a:	e00f      	b.n	800744c <_malloc_r+0xa8>
 800742c:	6822      	ldr	r2, [r4, #0]
 800742e:	1b52      	subs	r2, r2, r5
 8007430:	d420      	bmi.n	8007474 <_malloc_r+0xd0>
 8007432:	2a0b      	cmp	r2, #11
 8007434:	d917      	bls.n	8007466 <_malloc_r+0xc2>
 8007436:	1961      	adds	r1, r4, r5
 8007438:	42a3      	cmp	r3, r4
 800743a:	6025      	str	r5, [r4, #0]
 800743c:	bf18      	it	ne
 800743e:	6059      	strne	r1, [r3, #4]
 8007440:	6863      	ldr	r3, [r4, #4]
 8007442:	bf08      	it	eq
 8007444:	f8c8 1000 	streq.w	r1, [r8]
 8007448:	5162      	str	r2, [r4, r5]
 800744a:	604b      	str	r3, [r1, #4]
 800744c:	4630      	mov	r0, r6
 800744e:	f000 f82f 	bl	80074b0 <__malloc_unlock>
 8007452:	f104 000b 	add.w	r0, r4, #11
 8007456:	1d23      	adds	r3, r4, #4
 8007458:	f020 0007 	bic.w	r0, r0, #7
 800745c:	1ac2      	subs	r2, r0, r3
 800745e:	bf1c      	itt	ne
 8007460:	1a1b      	subne	r3, r3, r0
 8007462:	50a3      	strne	r3, [r4, r2]
 8007464:	e7af      	b.n	80073c6 <_malloc_r+0x22>
 8007466:	6862      	ldr	r2, [r4, #4]
 8007468:	42a3      	cmp	r3, r4
 800746a:	bf0c      	ite	eq
 800746c:	f8c8 2000 	streq.w	r2, [r8]
 8007470:	605a      	strne	r2, [r3, #4]
 8007472:	e7eb      	b.n	800744c <_malloc_r+0xa8>
 8007474:	4623      	mov	r3, r4
 8007476:	6864      	ldr	r4, [r4, #4]
 8007478:	e7ae      	b.n	80073d8 <_malloc_r+0x34>
 800747a:	463c      	mov	r4, r7
 800747c:	687f      	ldr	r7, [r7, #4]
 800747e:	e7b6      	b.n	80073ee <_malloc_r+0x4a>
 8007480:	461a      	mov	r2, r3
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	42a3      	cmp	r3, r4
 8007486:	d1fb      	bne.n	8007480 <_malloc_r+0xdc>
 8007488:	2300      	movs	r3, #0
 800748a:	6053      	str	r3, [r2, #4]
 800748c:	e7de      	b.n	800744c <_malloc_r+0xa8>
 800748e:	230c      	movs	r3, #12
 8007490:	6033      	str	r3, [r6, #0]
 8007492:	4630      	mov	r0, r6
 8007494:	f000 f80c 	bl	80074b0 <__malloc_unlock>
 8007498:	e794      	b.n	80073c4 <_malloc_r+0x20>
 800749a:	6005      	str	r5, [r0, #0]
 800749c:	e7d6      	b.n	800744c <_malloc_r+0xa8>
 800749e:	bf00      	nop
 80074a0:	20000484 	.word	0x20000484

080074a4 <__malloc_lock>:
 80074a4:	4801      	ldr	r0, [pc, #4]	@ (80074ac <__malloc_lock+0x8>)
 80074a6:	f7ff bf0f 	b.w	80072c8 <__retarget_lock_acquire_recursive>
 80074aa:	bf00      	nop
 80074ac:	2000047c 	.word	0x2000047c

080074b0 <__malloc_unlock>:
 80074b0:	4801      	ldr	r0, [pc, #4]	@ (80074b8 <__malloc_unlock+0x8>)
 80074b2:	f7ff bf0a 	b.w	80072ca <__retarget_lock_release_recursive>
 80074b6:	bf00      	nop
 80074b8:	2000047c 	.word	0x2000047c

080074bc <__ssputs_r>:
 80074bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c0:	688e      	ldr	r6, [r1, #8]
 80074c2:	461f      	mov	r7, r3
 80074c4:	42be      	cmp	r6, r7
 80074c6:	680b      	ldr	r3, [r1, #0]
 80074c8:	4682      	mov	sl, r0
 80074ca:	460c      	mov	r4, r1
 80074cc:	4690      	mov	r8, r2
 80074ce:	d82d      	bhi.n	800752c <__ssputs_r+0x70>
 80074d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80074d8:	d026      	beq.n	8007528 <__ssputs_r+0x6c>
 80074da:	6965      	ldr	r5, [r4, #20]
 80074dc:	6909      	ldr	r1, [r1, #16]
 80074de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074e2:	eba3 0901 	sub.w	r9, r3, r1
 80074e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074ea:	1c7b      	adds	r3, r7, #1
 80074ec:	444b      	add	r3, r9
 80074ee:	106d      	asrs	r5, r5, #1
 80074f0:	429d      	cmp	r5, r3
 80074f2:	bf38      	it	cc
 80074f4:	461d      	movcc	r5, r3
 80074f6:	0553      	lsls	r3, r2, #21
 80074f8:	d527      	bpl.n	800754a <__ssputs_r+0x8e>
 80074fa:	4629      	mov	r1, r5
 80074fc:	f7ff ff52 	bl	80073a4 <_malloc_r>
 8007500:	4606      	mov	r6, r0
 8007502:	b360      	cbz	r0, 800755e <__ssputs_r+0xa2>
 8007504:	6921      	ldr	r1, [r4, #16]
 8007506:	464a      	mov	r2, r9
 8007508:	f000 fae8 	bl	8007adc <memcpy>
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007516:	81a3      	strh	r3, [r4, #12]
 8007518:	6126      	str	r6, [r4, #16]
 800751a:	6165      	str	r5, [r4, #20]
 800751c:	444e      	add	r6, r9
 800751e:	eba5 0509 	sub.w	r5, r5, r9
 8007522:	6026      	str	r6, [r4, #0]
 8007524:	60a5      	str	r5, [r4, #8]
 8007526:	463e      	mov	r6, r7
 8007528:	42be      	cmp	r6, r7
 800752a:	d900      	bls.n	800752e <__ssputs_r+0x72>
 800752c:	463e      	mov	r6, r7
 800752e:	6820      	ldr	r0, [r4, #0]
 8007530:	4632      	mov	r2, r6
 8007532:	4641      	mov	r1, r8
 8007534:	f000 faa8 	bl	8007a88 <memmove>
 8007538:	68a3      	ldr	r3, [r4, #8]
 800753a:	1b9b      	subs	r3, r3, r6
 800753c:	60a3      	str	r3, [r4, #8]
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	4433      	add	r3, r6
 8007542:	6023      	str	r3, [r4, #0]
 8007544:	2000      	movs	r0, #0
 8007546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800754a:	462a      	mov	r2, r5
 800754c:	f000 fad4 	bl	8007af8 <_realloc_r>
 8007550:	4606      	mov	r6, r0
 8007552:	2800      	cmp	r0, #0
 8007554:	d1e0      	bne.n	8007518 <__ssputs_r+0x5c>
 8007556:	6921      	ldr	r1, [r4, #16]
 8007558:	4650      	mov	r0, sl
 800755a:	f7ff feb7 	bl	80072cc <_free_r>
 800755e:	230c      	movs	r3, #12
 8007560:	f8ca 3000 	str.w	r3, [sl]
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800756a:	81a3      	strh	r3, [r4, #12]
 800756c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007570:	e7e9      	b.n	8007546 <__ssputs_r+0x8a>
	...

08007574 <_svfiprintf_r>:
 8007574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	4698      	mov	r8, r3
 800757a:	898b      	ldrh	r3, [r1, #12]
 800757c:	061b      	lsls	r3, r3, #24
 800757e:	b09d      	sub	sp, #116	@ 0x74
 8007580:	4607      	mov	r7, r0
 8007582:	460d      	mov	r5, r1
 8007584:	4614      	mov	r4, r2
 8007586:	d510      	bpl.n	80075aa <_svfiprintf_r+0x36>
 8007588:	690b      	ldr	r3, [r1, #16]
 800758a:	b973      	cbnz	r3, 80075aa <_svfiprintf_r+0x36>
 800758c:	2140      	movs	r1, #64	@ 0x40
 800758e:	f7ff ff09 	bl	80073a4 <_malloc_r>
 8007592:	6028      	str	r0, [r5, #0]
 8007594:	6128      	str	r0, [r5, #16]
 8007596:	b930      	cbnz	r0, 80075a6 <_svfiprintf_r+0x32>
 8007598:	230c      	movs	r3, #12
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075a0:	b01d      	add	sp, #116	@ 0x74
 80075a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a6:	2340      	movs	r3, #64	@ 0x40
 80075a8:	616b      	str	r3, [r5, #20]
 80075aa:	2300      	movs	r3, #0
 80075ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ae:	2320      	movs	r3, #32
 80075b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80075b8:	2330      	movs	r3, #48	@ 0x30
 80075ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007758 <_svfiprintf_r+0x1e4>
 80075be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075c2:	f04f 0901 	mov.w	r9, #1
 80075c6:	4623      	mov	r3, r4
 80075c8:	469a      	mov	sl, r3
 80075ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ce:	b10a      	cbz	r2, 80075d4 <_svfiprintf_r+0x60>
 80075d0:	2a25      	cmp	r2, #37	@ 0x25
 80075d2:	d1f9      	bne.n	80075c8 <_svfiprintf_r+0x54>
 80075d4:	ebba 0b04 	subs.w	fp, sl, r4
 80075d8:	d00b      	beq.n	80075f2 <_svfiprintf_r+0x7e>
 80075da:	465b      	mov	r3, fp
 80075dc:	4622      	mov	r2, r4
 80075de:	4629      	mov	r1, r5
 80075e0:	4638      	mov	r0, r7
 80075e2:	f7ff ff6b 	bl	80074bc <__ssputs_r>
 80075e6:	3001      	adds	r0, #1
 80075e8:	f000 80a7 	beq.w	800773a <_svfiprintf_r+0x1c6>
 80075ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075ee:	445a      	add	r2, fp
 80075f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80075f2:	f89a 3000 	ldrb.w	r3, [sl]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 809f 	beq.w	800773a <_svfiprintf_r+0x1c6>
 80075fc:	2300      	movs	r3, #0
 80075fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007606:	f10a 0a01 	add.w	sl, sl, #1
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	9307      	str	r3, [sp, #28]
 800760e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007612:	931a      	str	r3, [sp, #104]	@ 0x68
 8007614:	4654      	mov	r4, sl
 8007616:	2205      	movs	r2, #5
 8007618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800761c:	484e      	ldr	r0, [pc, #312]	@ (8007758 <_svfiprintf_r+0x1e4>)
 800761e:	f7f8 fddf 	bl	80001e0 <memchr>
 8007622:	9a04      	ldr	r2, [sp, #16]
 8007624:	b9d8      	cbnz	r0, 800765e <_svfiprintf_r+0xea>
 8007626:	06d0      	lsls	r0, r2, #27
 8007628:	bf44      	itt	mi
 800762a:	2320      	movmi	r3, #32
 800762c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007630:	0711      	lsls	r1, r2, #28
 8007632:	bf44      	itt	mi
 8007634:	232b      	movmi	r3, #43	@ 0x2b
 8007636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800763a:	f89a 3000 	ldrb.w	r3, [sl]
 800763e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007640:	d015      	beq.n	800766e <_svfiprintf_r+0xfa>
 8007642:	9a07      	ldr	r2, [sp, #28]
 8007644:	4654      	mov	r4, sl
 8007646:	2000      	movs	r0, #0
 8007648:	f04f 0c0a 	mov.w	ip, #10
 800764c:	4621      	mov	r1, r4
 800764e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007652:	3b30      	subs	r3, #48	@ 0x30
 8007654:	2b09      	cmp	r3, #9
 8007656:	d94b      	bls.n	80076f0 <_svfiprintf_r+0x17c>
 8007658:	b1b0      	cbz	r0, 8007688 <_svfiprintf_r+0x114>
 800765a:	9207      	str	r2, [sp, #28]
 800765c:	e014      	b.n	8007688 <_svfiprintf_r+0x114>
 800765e:	eba0 0308 	sub.w	r3, r0, r8
 8007662:	fa09 f303 	lsl.w	r3, r9, r3
 8007666:	4313      	orrs	r3, r2
 8007668:	9304      	str	r3, [sp, #16]
 800766a:	46a2      	mov	sl, r4
 800766c:	e7d2      	b.n	8007614 <_svfiprintf_r+0xa0>
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	1d19      	adds	r1, r3, #4
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	9103      	str	r1, [sp, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	bfbb      	ittet	lt
 800767a:	425b      	neglt	r3, r3
 800767c:	f042 0202 	orrlt.w	r2, r2, #2
 8007680:	9307      	strge	r3, [sp, #28]
 8007682:	9307      	strlt	r3, [sp, #28]
 8007684:	bfb8      	it	lt
 8007686:	9204      	strlt	r2, [sp, #16]
 8007688:	7823      	ldrb	r3, [r4, #0]
 800768a:	2b2e      	cmp	r3, #46	@ 0x2e
 800768c:	d10a      	bne.n	80076a4 <_svfiprintf_r+0x130>
 800768e:	7863      	ldrb	r3, [r4, #1]
 8007690:	2b2a      	cmp	r3, #42	@ 0x2a
 8007692:	d132      	bne.n	80076fa <_svfiprintf_r+0x186>
 8007694:	9b03      	ldr	r3, [sp, #12]
 8007696:	1d1a      	adds	r2, r3, #4
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	9203      	str	r2, [sp, #12]
 800769c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076a0:	3402      	adds	r4, #2
 80076a2:	9305      	str	r3, [sp, #20]
 80076a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007768 <_svfiprintf_r+0x1f4>
 80076a8:	7821      	ldrb	r1, [r4, #0]
 80076aa:	2203      	movs	r2, #3
 80076ac:	4650      	mov	r0, sl
 80076ae:	f7f8 fd97 	bl	80001e0 <memchr>
 80076b2:	b138      	cbz	r0, 80076c4 <_svfiprintf_r+0x150>
 80076b4:	9b04      	ldr	r3, [sp, #16]
 80076b6:	eba0 000a 	sub.w	r0, r0, sl
 80076ba:	2240      	movs	r2, #64	@ 0x40
 80076bc:	4082      	lsls	r2, r0
 80076be:	4313      	orrs	r3, r2
 80076c0:	3401      	adds	r4, #1
 80076c2:	9304      	str	r3, [sp, #16]
 80076c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c8:	4824      	ldr	r0, [pc, #144]	@ (800775c <_svfiprintf_r+0x1e8>)
 80076ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076ce:	2206      	movs	r2, #6
 80076d0:	f7f8 fd86 	bl	80001e0 <memchr>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d036      	beq.n	8007746 <_svfiprintf_r+0x1d2>
 80076d8:	4b21      	ldr	r3, [pc, #132]	@ (8007760 <_svfiprintf_r+0x1ec>)
 80076da:	bb1b      	cbnz	r3, 8007724 <_svfiprintf_r+0x1b0>
 80076dc:	9b03      	ldr	r3, [sp, #12]
 80076de:	3307      	adds	r3, #7
 80076e0:	f023 0307 	bic.w	r3, r3, #7
 80076e4:	3308      	adds	r3, #8
 80076e6:	9303      	str	r3, [sp, #12]
 80076e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ea:	4433      	add	r3, r6
 80076ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ee:	e76a      	b.n	80075c6 <_svfiprintf_r+0x52>
 80076f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80076f4:	460c      	mov	r4, r1
 80076f6:	2001      	movs	r0, #1
 80076f8:	e7a8      	b.n	800764c <_svfiprintf_r+0xd8>
 80076fa:	2300      	movs	r3, #0
 80076fc:	3401      	adds	r4, #1
 80076fe:	9305      	str	r3, [sp, #20]
 8007700:	4619      	mov	r1, r3
 8007702:	f04f 0c0a 	mov.w	ip, #10
 8007706:	4620      	mov	r0, r4
 8007708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800770c:	3a30      	subs	r2, #48	@ 0x30
 800770e:	2a09      	cmp	r2, #9
 8007710:	d903      	bls.n	800771a <_svfiprintf_r+0x1a6>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0c6      	beq.n	80076a4 <_svfiprintf_r+0x130>
 8007716:	9105      	str	r1, [sp, #20]
 8007718:	e7c4      	b.n	80076a4 <_svfiprintf_r+0x130>
 800771a:	fb0c 2101 	mla	r1, ip, r1, r2
 800771e:	4604      	mov	r4, r0
 8007720:	2301      	movs	r3, #1
 8007722:	e7f0      	b.n	8007706 <_svfiprintf_r+0x192>
 8007724:	ab03      	add	r3, sp, #12
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	462a      	mov	r2, r5
 800772a:	4b0e      	ldr	r3, [pc, #56]	@ (8007764 <_svfiprintf_r+0x1f0>)
 800772c:	a904      	add	r1, sp, #16
 800772e:	4638      	mov	r0, r7
 8007730:	f3af 8000 	nop.w
 8007734:	1c42      	adds	r2, r0, #1
 8007736:	4606      	mov	r6, r0
 8007738:	d1d6      	bne.n	80076e8 <_svfiprintf_r+0x174>
 800773a:	89ab      	ldrh	r3, [r5, #12]
 800773c:	065b      	lsls	r3, r3, #25
 800773e:	f53f af2d 	bmi.w	800759c <_svfiprintf_r+0x28>
 8007742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007744:	e72c      	b.n	80075a0 <_svfiprintf_r+0x2c>
 8007746:	ab03      	add	r3, sp, #12
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	462a      	mov	r2, r5
 800774c:	4b05      	ldr	r3, [pc, #20]	@ (8007764 <_svfiprintf_r+0x1f0>)
 800774e:	a904      	add	r1, sp, #16
 8007750:	4638      	mov	r0, r7
 8007752:	f000 f879 	bl	8007848 <_printf_i>
 8007756:	e7ed      	b.n	8007734 <_svfiprintf_r+0x1c0>
 8007758:	08007c08 	.word	0x08007c08
 800775c:	08007c12 	.word	0x08007c12
 8007760:	00000000 	.word	0x00000000
 8007764:	080074bd 	.word	0x080074bd
 8007768:	08007c0e 	.word	0x08007c0e

0800776c <_printf_common>:
 800776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	4616      	mov	r6, r2
 8007772:	4698      	mov	r8, r3
 8007774:	688a      	ldr	r2, [r1, #8]
 8007776:	690b      	ldr	r3, [r1, #16]
 8007778:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800777c:	4293      	cmp	r3, r2
 800777e:	bfb8      	it	lt
 8007780:	4613      	movlt	r3, r2
 8007782:	6033      	str	r3, [r6, #0]
 8007784:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007788:	4607      	mov	r7, r0
 800778a:	460c      	mov	r4, r1
 800778c:	b10a      	cbz	r2, 8007792 <_printf_common+0x26>
 800778e:	3301      	adds	r3, #1
 8007790:	6033      	str	r3, [r6, #0]
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	0699      	lsls	r1, r3, #26
 8007796:	bf42      	ittt	mi
 8007798:	6833      	ldrmi	r3, [r6, #0]
 800779a:	3302      	addmi	r3, #2
 800779c:	6033      	strmi	r3, [r6, #0]
 800779e:	6825      	ldr	r5, [r4, #0]
 80077a0:	f015 0506 	ands.w	r5, r5, #6
 80077a4:	d106      	bne.n	80077b4 <_printf_common+0x48>
 80077a6:	f104 0a19 	add.w	sl, r4, #25
 80077aa:	68e3      	ldr	r3, [r4, #12]
 80077ac:	6832      	ldr	r2, [r6, #0]
 80077ae:	1a9b      	subs	r3, r3, r2
 80077b0:	42ab      	cmp	r3, r5
 80077b2:	dc26      	bgt.n	8007802 <_printf_common+0x96>
 80077b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077b8:	6822      	ldr	r2, [r4, #0]
 80077ba:	3b00      	subs	r3, #0
 80077bc:	bf18      	it	ne
 80077be:	2301      	movne	r3, #1
 80077c0:	0692      	lsls	r2, r2, #26
 80077c2:	d42b      	bmi.n	800781c <_printf_common+0xb0>
 80077c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077c8:	4641      	mov	r1, r8
 80077ca:	4638      	mov	r0, r7
 80077cc:	47c8      	blx	r9
 80077ce:	3001      	adds	r0, #1
 80077d0:	d01e      	beq.n	8007810 <_printf_common+0xa4>
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	6922      	ldr	r2, [r4, #16]
 80077d6:	f003 0306 	and.w	r3, r3, #6
 80077da:	2b04      	cmp	r3, #4
 80077dc:	bf02      	ittt	eq
 80077de:	68e5      	ldreq	r5, [r4, #12]
 80077e0:	6833      	ldreq	r3, [r6, #0]
 80077e2:	1aed      	subeq	r5, r5, r3
 80077e4:	68a3      	ldr	r3, [r4, #8]
 80077e6:	bf0c      	ite	eq
 80077e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077ec:	2500      	movne	r5, #0
 80077ee:	4293      	cmp	r3, r2
 80077f0:	bfc4      	itt	gt
 80077f2:	1a9b      	subgt	r3, r3, r2
 80077f4:	18ed      	addgt	r5, r5, r3
 80077f6:	2600      	movs	r6, #0
 80077f8:	341a      	adds	r4, #26
 80077fa:	42b5      	cmp	r5, r6
 80077fc:	d11a      	bne.n	8007834 <_printf_common+0xc8>
 80077fe:	2000      	movs	r0, #0
 8007800:	e008      	b.n	8007814 <_printf_common+0xa8>
 8007802:	2301      	movs	r3, #1
 8007804:	4652      	mov	r2, sl
 8007806:	4641      	mov	r1, r8
 8007808:	4638      	mov	r0, r7
 800780a:	47c8      	blx	r9
 800780c:	3001      	adds	r0, #1
 800780e:	d103      	bne.n	8007818 <_printf_common+0xac>
 8007810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007818:	3501      	adds	r5, #1
 800781a:	e7c6      	b.n	80077aa <_printf_common+0x3e>
 800781c:	18e1      	adds	r1, r4, r3
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	2030      	movs	r0, #48	@ 0x30
 8007822:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007826:	4422      	add	r2, r4
 8007828:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800782c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007830:	3302      	adds	r3, #2
 8007832:	e7c7      	b.n	80077c4 <_printf_common+0x58>
 8007834:	2301      	movs	r3, #1
 8007836:	4622      	mov	r2, r4
 8007838:	4641      	mov	r1, r8
 800783a:	4638      	mov	r0, r7
 800783c:	47c8      	blx	r9
 800783e:	3001      	adds	r0, #1
 8007840:	d0e6      	beq.n	8007810 <_printf_common+0xa4>
 8007842:	3601      	adds	r6, #1
 8007844:	e7d9      	b.n	80077fa <_printf_common+0x8e>
	...

08007848 <_printf_i>:
 8007848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800784c:	7e0f      	ldrb	r7, [r1, #24]
 800784e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007850:	2f78      	cmp	r7, #120	@ 0x78
 8007852:	4691      	mov	r9, r2
 8007854:	4680      	mov	r8, r0
 8007856:	460c      	mov	r4, r1
 8007858:	469a      	mov	sl, r3
 800785a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800785e:	d807      	bhi.n	8007870 <_printf_i+0x28>
 8007860:	2f62      	cmp	r7, #98	@ 0x62
 8007862:	d80a      	bhi.n	800787a <_printf_i+0x32>
 8007864:	2f00      	cmp	r7, #0
 8007866:	f000 80d2 	beq.w	8007a0e <_printf_i+0x1c6>
 800786a:	2f58      	cmp	r7, #88	@ 0x58
 800786c:	f000 80b9 	beq.w	80079e2 <_printf_i+0x19a>
 8007870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007874:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007878:	e03a      	b.n	80078f0 <_printf_i+0xa8>
 800787a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800787e:	2b15      	cmp	r3, #21
 8007880:	d8f6      	bhi.n	8007870 <_printf_i+0x28>
 8007882:	a101      	add	r1, pc, #4	@ (adr r1, 8007888 <_printf_i+0x40>)
 8007884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007888:	080078e1 	.word	0x080078e1
 800788c:	080078f5 	.word	0x080078f5
 8007890:	08007871 	.word	0x08007871
 8007894:	08007871 	.word	0x08007871
 8007898:	08007871 	.word	0x08007871
 800789c:	08007871 	.word	0x08007871
 80078a0:	080078f5 	.word	0x080078f5
 80078a4:	08007871 	.word	0x08007871
 80078a8:	08007871 	.word	0x08007871
 80078ac:	08007871 	.word	0x08007871
 80078b0:	08007871 	.word	0x08007871
 80078b4:	080079f5 	.word	0x080079f5
 80078b8:	0800791f 	.word	0x0800791f
 80078bc:	080079af 	.word	0x080079af
 80078c0:	08007871 	.word	0x08007871
 80078c4:	08007871 	.word	0x08007871
 80078c8:	08007a17 	.word	0x08007a17
 80078cc:	08007871 	.word	0x08007871
 80078d0:	0800791f 	.word	0x0800791f
 80078d4:	08007871 	.word	0x08007871
 80078d8:	08007871 	.word	0x08007871
 80078dc:	080079b7 	.word	0x080079b7
 80078e0:	6833      	ldr	r3, [r6, #0]
 80078e2:	1d1a      	adds	r2, r3, #4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6032      	str	r2, [r6, #0]
 80078e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078f0:	2301      	movs	r3, #1
 80078f2:	e09d      	b.n	8007a30 <_printf_i+0x1e8>
 80078f4:	6833      	ldr	r3, [r6, #0]
 80078f6:	6820      	ldr	r0, [r4, #0]
 80078f8:	1d19      	adds	r1, r3, #4
 80078fa:	6031      	str	r1, [r6, #0]
 80078fc:	0606      	lsls	r6, r0, #24
 80078fe:	d501      	bpl.n	8007904 <_printf_i+0xbc>
 8007900:	681d      	ldr	r5, [r3, #0]
 8007902:	e003      	b.n	800790c <_printf_i+0xc4>
 8007904:	0645      	lsls	r5, r0, #25
 8007906:	d5fb      	bpl.n	8007900 <_printf_i+0xb8>
 8007908:	f9b3 5000 	ldrsh.w	r5, [r3]
 800790c:	2d00      	cmp	r5, #0
 800790e:	da03      	bge.n	8007918 <_printf_i+0xd0>
 8007910:	232d      	movs	r3, #45	@ 0x2d
 8007912:	426d      	negs	r5, r5
 8007914:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007918:	4859      	ldr	r0, [pc, #356]	@ (8007a80 <_printf_i+0x238>)
 800791a:	230a      	movs	r3, #10
 800791c:	e011      	b.n	8007942 <_printf_i+0xfa>
 800791e:	6821      	ldr	r1, [r4, #0]
 8007920:	6833      	ldr	r3, [r6, #0]
 8007922:	0608      	lsls	r0, r1, #24
 8007924:	f853 5b04 	ldr.w	r5, [r3], #4
 8007928:	d402      	bmi.n	8007930 <_printf_i+0xe8>
 800792a:	0649      	lsls	r1, r1, #25
 800792c:	bf48      	it	mi
 800792e:	b2ad      	uxthmi	r5, r5
 8007930:	2f6f      	cmp	r7, #111	@ 0x6f
 8007932:	4853      	ldr	r0, [pc, #332]	@ (8007a80 <_printf_i+0x238>)
 8007934:	6033      	str	r3, [r6, #0]
 8007936:	bf14      	ite	ne
 8007938:	230a      	movne	r3, #10
 800793a:	2308      	moveq	r3, #8
 800793c:	2100      	movs	r1, #0
 800793e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007942:	6866      	ldr	r6, [r4, #4]
 8007944:	60a6      	str	r6, [r4, #8]
 8007946:	2e00      	cmp	r6, #0
 8007948:	bfa2      	ittt	ge
 800794a:	6821      	ldrge	r1, [r4, #0]
 800794c:	f021 0104 	bicge.w	r1, r1, #4
 8007950:	6021      	strge	r1, [r4, #0]
 8007952:	b90d      	cbnz	r5, 8007958 <_printf_i+0x110>
 8007954:	2e00      	cmp	r6, #0
 8007956:	d04b      	beq.n	80079f0 <_printf_i+0x1a8>
 8007958:	4616      	mov	r6, r2
 800795a:	fbb5 f1f3 	udiv	r1, r5, r3
 800795e:	fb03 5711 	mls	r7, r3, r1, r5
 8007962:	5dc7      	ldrb	r7, [r0, r7]
 8007964:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007968:	462f      	mov	r7, r5
 800796a:	42bb      	cmp	r3, r7
 800796c:	460d      	mov	r5, r1
 800796e:	d9f4      	bls.n	800795a <_printf_i+0x112>
 8007970:	2b08      	cmp	r3, #8
 8007972:	d10b      	bne.n	800798c <_printf_i+0x144>
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	07df      	lsls	r7, r3, #31
 8007978:	d508      	bpl.n	800798c <_printf_i+0x144>
 800797a:	6923      	ldr	r3, [r4, #16]
 800797c:	6861      	ldr	r1, [r4, #4]
 800797e:	4299      	cmp	r1, r3
 8007980:	bfde      	ittt	le
 8007982:	2330      	movle	r3, #48	@ 0x30
 8007984:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007988:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800798c:	1b92      	subs	r2, r2, r6
 800798e:	6122      	str	r2, [r4, #16]
 8007990:	f8cd a000 	str.w	sl, [sp]
 8007994:	464b      	mov	r3, r9
 8007996:	aa03      	add	r2, sp, #12
 8007998:	4621      	mov	r1, r4
 800799a:	4640      	mov	r0, r8
 800799c:	f7ff fee6 	bl	800776c <_printf_common>
 80079a0:	3001      	adds	r0, #1
 80079a2:	d14a      	bne.n	8007a3a <_printf_i+0x1f2>
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079a8:	b004      	add	sp, #16
 80079aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	f043 0320 	orr.w	r3, r3, #32
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	4833      	ldr	r0, [pc, #204]	@ (8007a84 <_printf_i+0x23c>)
 80079b8:	2778      	movs	r7, #120	@ 0x78
 80079ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	6831      	ldr	r1, [r6, #0]
 80079c2:	061f      	lsls	r7, r3, #24
 80079c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80079c8:	d402      	bmi.n	80079d0 <_printf_i+0x188>
 80079ca:	065f      	lsls	r7, r3, #25
 80079cc:	bf48      	it	mi
 80079ce:	b2ad      	uxthmi	r5, r5
 80079d0:	6031      	str	r1, [r6, #0]
 80079d2:	07d9      	lsls	r1, r3, #31
 80079d4:	bf44      	itt	mi
 80079d6:	f043 0320 	orrmi.w	r3, r3, #32
 80079da:	6023      	strmi	r3, [r4, #0]
 80079dc:	b11d      	cbz	r5, 80079e6 <_printf_i+0x19e>
 80079de:	2310      	movs	r3, #16
 80079e0:	e7ac      	b.n	800793c <_printf_i+0xf4>
 80079e2:	4827      	ldr	r0, [pc, #156]	@ (8007a80 <_printf_i+0x238>)
 80079e4:	e7e9      	b.n	80079ba <_printf_i+0x172>
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	f023 0320 	bic.w	r3, r3, #32
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	e7f6      	b.n	80079de <_printf_i+0x196>
 80079f0:	4616      	mov	r6, r2
 80079f2:	e7bd      	b.n	8007970 <_printf_i+0x128>
 80079f4:	6833      	ldr	r3, [r6, #0]
 80079f6:	6825      	ldr	r5, [r4, #0]
 80079f8:	6961      	ldr	r1, [r4, #20]
 80079fa:	1d18      	adds	r0, r3, #4
 80079fc:	6030      	str	r0, [r6, #0]
 80079fe:	062e      	lsls	r6, r5, #24
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	d501      	bpl.n	8007a08 <_printf_i+0x1c0>
 8007a04:	6019      	str	r1, [r3, #0]
 8007a06:	e002      	b.n	8007a0e <_printf_i+0x1c6>
 8007a08:	0668      	lsls	r0, r5, #25
 8007a0a:	d5fb      	bpl.n	8007a04 <_printf_i+0x1bc>
 8007a0c:	8019      	strh	r1, [r3, #0]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	6123      	str	r3, [r4, #16]
 8007a12:	4616      	mov	r6, r2
 8007a14:	e7bc      	b.n	8007990 <_printf_i+0x148>
 8007a16:	6833      	ldr	r3, [r6, #0]
 8007a18:	1d1a      	adds	r2, r3, #4
 8007a1a:	6032      	str	r2, [r6, #0]
 8007a1c:	681e      	ldr	r6, [r3, #0]
 8007a1e:	6862      	ldr	r2, [r4, #4]
 8007a20:	2100      	movs	r1, #0
 8007a22:	4630      	mov	r0, r6
 8007a24:	f7f8 fbdc 	bl	80001e0 <memchr>
 8007a28:	b108      	cbz	r0, 8007a2e <_printf_i+0x1e6>
 8007a2a:	1b80      	subs	r0, r0, r6
 8007a2c:	6060      	str	r0, [r4, #4]
 8007a2e:	6863      	ldr	r3, [r4, #4]
 8007a30:	6123      	str	r3, [r4, #16]
 8007a32:	2300      	movs	r3, #0
 8007a34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a38:	e7aa      	b.n	8007990 <_printf_i+0x148>
 8007a3a:	6923      	ldr	r3, [r4, #16]
 8007a3c:	4632      	mov	r2, r6
 8007a3e:	4649      	mov	r1, r9
 8007a40:	4640      	mov	r0, r8
 8007a42:	47d0      	blx	sl
 8007a44:	3001      	adds	r0, #1
 8007a46:	d0ad      	beq.n	80079a4 <_printf_i+0x15c>
 8007a48:	6823      	ldr	r3, [r4, #0]
 8007a4a:	079b      	lsls	r3, r3, #30
 8007a4c:	d413      	bmi.n	8007a76 <_printf_i+0x22e>
 8007a4e:	68e0      	ldr	r0, [r4, #12]
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	4298      	cmp	r0, r3
 8007a54:	bfb8      	it	lt
 8007a56:	4618      	movlt	r0, r3
 8007a58:	e7a6      	b.n	80079a8 <_printf_i+0x160>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4632      	mov	r2, r6
 8007a5e:	4649      	mov	r1, r9
 8007a60:	4640      	mov	r0, r8
 8007a62:	47d0      	blx	sl
 8007a64:	3001      	adds	r0, #1
 8007a66:	d09d      	beq.n	80079a4 <_printf_i+0x15c>
 8007a68:	3501      	adds	r5, #1
 8007a6a:	68e3      	ldr	r3, [r4, #12]
 8007a6c:	9903      	ldr	r1, [sp, #12]
 8007a6e:	1a5b      	subs	r3, r3, r1
 8007a70:	42ab      	cmp	r3, r5
 8007a72:	dcf2      	bgt.n	8007a5a <_printf_i+0x212>
 8007a74:	e7eb      	b.n	8007a4e <_printf_i+0x206>
 8007a76:	2500      	movs	r5, #0
 8007a78:	f104 0619 	add.w	r6, r4, #25
 8007a7c:	e7f5      	b.n	8007a6a <_printf_i+0x222>
 8007a7e:	bf00      	nop
 8007a80:	08007c19 	.word	0x08007c19
 8007a84:	08007c2a 	.word	0x08007c2a

08007a88 <memmove>:
 8007a88:	4288      	cmp	r0, r1
 8007a8a:	b510      	push	{r4, lr}
 8007a8c:	eb01 0402 	add.w	r4, r1, r2
 8007a90:	d902      	bls.n	8007a98 <memmove+0x10>
 8007a92:	4284      	cmp	r4, r0
 8007a94:	4623      	mov	r3, r4
 8007a96:	d807      	bhi.n	8007aa8 <memmove+0x20>
 8007a98:	1e43      	subs	r3, r0, #1
 8007a9a:	42a1      	cmp	r1, r4
 8007a9c:	d008      	beq.n	8007ab0 <memmove+0x28>
 8007a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aa6:	e7f8      	b.n	8007a9a <memmove+0x12>
 8007aa8:	4402      	add	r2, r0
 8007aaa:	4601      	mov	r1, r0
 8007aac:	428a      	cmp	r2, r1
 8007aae:	d100      	bne.n	8007ab2 <memmove+0x2a>
 8007ab0:	bd10      	pop	{r4, pc}
 8007ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007aba:	e7f7      	b.n	8007aac <memmove+0x24>

08007abc <_sbrk_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4d06      	ldr	r5, [pc, #24]	@ (8007ad8 <_sbrk_r+0x1c>)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	602b      	str	r3, [r5, #0]
 8007ac8:	f7f9 fa46 	bl	8000f58 <_sbrk>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_sbrk_r+0x1a>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_sbrk_r+0x1a>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	20000478 	.word	0x20000478

08007adc <memcpy>:
 8007adc:	440a      	add	r2, r1
 8007ade:	4291      	cmp	r1, r2
 8007ae0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007ae4:	d100      	bne.n	8007ae8 <memcpy+0xc>
 8007ae6:	4770      	bx	lr
 8007ae8:	b510      	push	{r4, lr}
 8007aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007af2:	4291      	cmp	r1, r2
 8007af4:	d1f9      	bne.n	8007aea <memcpy+0xe>
 8007af6:	bd10      	pop	{r4, pc}

08007af8 <_realloc_r>:
 8007af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007afc:	4680      	mov	r8, r0
 8007afe:	4615      	mov	r5, r2
 8007b00:	460c      	mov	r4, r1
 8007b02:	b921      	cbnz	r1, 8007b0e <_realloc_r+0x16>
 8007b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b08:	4611      	mov	r1, r2
 8007b0a:	f7ff bc4b 	b.w	80073a4 <_malloc_r>
 8007b0e:	b92a      	cbnz	r2, 8007b1c <_realloc_r+0x24>
 8007b10:	f7ff fbdc 	bl	80072cc <_free_r>
 8007b14:	2400      	movs	r4, #0
 8007b16:	4620      	mov	r0, r4
 8007b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b1c:	f000 f81a 	bl	8007b54 <_malloc_usable_size_r>
 8007b20:	4285      	cmp	r5, r0
 8007b22:	4606      	mov	r6, r0
 8007b24:	d802      	bhi.n	8007b2c <_realloc_r+0x34>
 8007b26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b2a:	d8f4      	bhi.n	8007b16 <_realloc_r+0x1e>
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	4640      	mov	r0, r8
 8007b30:	f7ff fc38 	bl	80073a4 <_malloc_r>
 8007b34:	4607      	mov	r7, r0
 8007b36:	2800      	cmp	r0, #0
 8007b38:	d0ec      	beq.n	8007b14 <_realloc_r+0x1c>
 8007b3a:	42b5      	cmp	r5, r6
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4621      	mov	r1, r4
 8007b40:	bf28      	it	cs
 8007b42:	4632      	movcs	r2, r6
 8007b44:	f7ff ffca 	bl	8007adc <memcpy>
 8007b48:	4621      	mov	r1, r4
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	f7ff fbbe 	bl	80072cc <_free_r>
 8007b50:	463c      	mov	r4, r7
 8007b52:	e7e0      	b.n	8007b16 <_realloc_r+0x1e>

08007b54 <_malloc_usable_size_r>:
 8007b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b58:	1f18      	subs	r0, r3, #4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bfbc      	itt	lt
 8007b5e:	580b      	ldrlt	r3, [r1, r0]
 8007b60:	18c0      	addlt	r0, r0, r3
 8007b62:	4770      	bx	lr

08007b64 <_init>:
 8007b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b66:	bf00      	nop
 8007b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b6a:	bc08      	pop	{r3}
 8007b6c:	469e      	mov	lr, r3
 8007b6e:	4770      	bx	lr

08007b70 <_fini>:
 8007b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b72:	bf00      	nop
 8007b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b76:	bc08      	pop	{r3}
 8007b78:	469e      	mov	lr, r3
 8007b7a:	4770      	bx	lr
